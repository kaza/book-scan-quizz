{
  "project_structure": [
    {
      "path": "app-old.txt",
      "content": "from flask import Flask, render_template, redirect, url_for, session, request, flash, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom authlib.integrations.flask_client import OAuth\nfrom authlib.integrations.base_client.errors import OAuthError\nfrom config import config\nimport os\nfrom werkzeug.utils import secure_filename\nimport google.generativeai as genai\nfrom transcribe import transcribe_audio\n\ndb = SQLAlchemy()\noauth = OAuth()\n\ndef home():\n    return render_template('home.html', active_page='home')\n\ndef about():\n    return render_template('about.html', active_page='about')\n\ndef quizz():\n    return render_template('quizz.html', active_page='services')\n\ndef contact():\n    return render_template('contact.html', active_page='contact')\n\ndef login():\n    google = oauth.create_client('google')\n    redirect_uri = url_for('authorized', _external=True)\n    return google.authorize_redirect(redirect_uri)\n\ndef logout():\n    session.pop('google_token', None)\n    session.pop('user_email', None)\n    return redirect(url_for('home'))\n\ndef authorized():\n    try:\n        google = oauth.create_client('google')\n        token = google.authorize_access_token()\n        user_info = token.get('userinfo')\n        if user_info:\n            session['google_token'] = token\n            session['user_email'] = user_info['email']\n            flash('Successfully logged in!', 'success')\n        return redirect(url_for('home'))\n    except OAuthError as e:\n        flash('Failed to log in. Access was denied.', 'danger')\n        return redirect(url_for('home'))\n\n\ndef evaluate_audio():\n    if 'audio' not in request.files:\n        return jsonify({'error': 'No audio file provided'}), 400\n\n    audio_file = request.files['audio']\n\n    if audio_file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n\n    if audio_file:\n        filename = secure_filename(audio_file.filename)\n\n        # Ensure the upload folder exists\n        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        audio_file.save(filepath)\n\n        try:\n            # Transcribe the audio using Gemini\n            transcription = transcribe_audio(filepath)\n\n            # Here you can add any additional processing or evaluation of the transcription\n\n            return jsonify({\n                'result':  transcription, # 'Audio processed successfully',\n                'transcription': transcription\n            })\n        except Exception as e:\n            return jsonify({'error': f'Error processing audio: {str(e)}'}), 500\n        finally:\n            # Optionally, remove the file after processing\n            os.remove(filepath)\n\n\ndef create_app(config_name=None):\n    app = Flask(__name__)\n\n    if config_name is None:\n        config_name = os.environ.get('FLASK_CONFIG', 'default')\n\n    config_name = config_name or os.getenv('FLASK_CONFIG', 'default')\n    app.config.from_object(config[config_name])\n\n    db.init_app(app)\n    oauth.init_app(app)\n\n    oauth.register(\n        name='google',\n        client_id=app.config['GOOGLE_CLIENT_ID'],\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n        client_kwargs={'scope': 'openid email profile'},\n    )\n\n    app.add_url_rule('/', 'home', home)\n    app.add_url_rule('/about', 'about', about)\n    app.add_url_rule('/quizz', 'quizz', quizz)\n    app.add_url_rule('/contact', 'contact', contact)\n    app.add_url_rule('/login', 'login', login)\n    app.add_url_rule('/logout', 'logout', logout)\n    app.add_url_rule('/login/authorized', 'authorized', authorized)\n    app.add_url_rule('/evaluate_audio', 'evaluate_audio', evaluate_audio, methods=['POST'])\n\n    return app\n\napp = create_app()\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
      "path": "run.py",
      "content": "import os\nfrom app import create_app, db\n#from app.models.user import User\n#from app.models.models import Quiz, Question, Answer, PageScan\n\napp = create_app(os.getenv('FLASK_CONFIG') or 'default')\n\n#\n# @app.cli.command(\"init-db\")\n# def init_db():\n#     db.create_all()\n#     print(\"Database tables created.\")\n\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n    app.run()"
    },
    {
      "path": "config.py",
      "content": "import os\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string'\n    GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')\n    GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    UPLOAD_FOLDER = os.environ.get('UPLOAD_FOLDER') or 'audio_uploads'\n    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY') or \"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\"\n    SQLALCHEMY_ECHO = False  # Default to False, enable per environment as needed\n\n    @staticmethod\n    def init_app(app):\n        pass\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), 'dev.sqlite')\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for development\n\n\nclass TestingConfig(Config):\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or 'sqlite:///:memory:'\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for testing\n\n\nclass ProductionConfig(Config):\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n\n    @classmethod\n    def init_app(cls, app):\n        Config.init_app(app)\n\n        # log to syslog\n        import logging\n        from logging.handlers import SysLogHandler\n        syslog_handler = SysLogHandler()\n        syslog_handler.setLevel(logging.WARNING)\n        app.logger.addHandler(syslog_handler)\n\nconfig = {\n    'development': DevelopmentConfig,\n    'testing': TestingConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}"
    },
    {
      "path": "requirements.txt",
      "content": "Flask~=3.0.3\n#flask-oauthlib\nauthlib~=1.3.1\nrequests\npython-dotenv~=1.0.1\nFlask-SQLAlchemy\n# google-cloud-speech\ngoogle-generativeai\n# psycopg2\n# mysqlclient\nflask-login\nWerkzeug~=3.0.3\nclick~=8.1.7\nSQLAlchemy~=2.0.31\nFlask-WTF\n"
    },
    {
      "path": ".gitignore",
      "content": "/__pycache__\n/audio_uploads\n__pycache__/\n*.pyc\n.pytest_cache/\n*.egg-info/\ndist/\nbuild/\n.env\nvenv\n/venv\n"
    },
    {
      "path": "project_structure.json",
      "content": "{\n  \"project_structure\": [\n    {\n      \"path\": \"app-old.txt\",\n      \"content\": \"from flask import Flask, render_template, redirect, url_for, session, request, flash, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom authlib.integrations.flask_client import OAuth\\nfrom authlib.integrations.base_client.errors import OAuthError\\nfrom config import config\\nimport os\\nfrom werkzeug.utils import secure_filename\\nimport google.generativeai as genai\\nfrom transcribe import transcribe_audio\\n\\ndb = SQLAlchemy()\\noauth = OAuth()\\n\\ndef home():\\n    return render_template('home.html', active_page='home')\\n\\ndef about():\\n    return render_template('about.html', active_page='about')\\n\\ndef quizz():\\n    return render_template('quizz.html', active_page='services')\\n\\ndef contact():\\n    return render_template('contact.html', active_page='contact')\\n\\ndef login():\\n    google = oauth.create_client('google')\\n    redirect_uri = url_for('authorized', _external=True)\\n    return google.authorize_redirect(redirect_uri)\\n\\ndef logout():\\n    session.pop('google_token', None)\\n    session.pop('user_email', None)\\n    return redirect(url_for('home'))\\n\\ndef authorized():\\n    try:\\n        google = oauth.create_client('google')\\n        token = google.authorize_access_token()\\n        user_info = token.get('userinfo')\\n        if user_info:\\n            session['google_token'] = token\\n            session['user_email'] = user_info['email']\\n            flash('Successfully logged in!', 'success')\\n        return redirect(url_for('home'))\\n    except OAuthError as e:\\n        flash('Failed to log in. Access was denied.', 'danger')\\n        return redirect(url_for('home'))\\n\\n\\ndef evaluate_audio():\\n    if 'audio' not in request.files:\\n        return jsonify({'error': 'No audio file provided'}), 400\\n\\n    audio_file = request.files['audio']\\n\\n    if audio_file.filename == '':\\n        return jsonify({'error': 'No selected file'}), 400\\n\\n    if audio_file:\\n        filename = secure_filename(audio_file.filename)\\n\\n        # Ensure the upload folder exists\\n        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\\n\\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\\n        audio_file.save(filepath)\\n\\n        try:\\n            # Transcribe the audio using Gemini\\n            transcription = transcribe_audio(filepath)\\n\\n            # Here you can add any additional processing or evaluation of the transcription\\n\\n            return jsonify({\\n                'result':  transcription, # 'Audio processed successfully',\\n                'transcription': transcription\\n            })\\n        except Exception as e:\\n            return jsonify({'error': f'Error processing audio: {str(e)}'}), 500\\n        finally:\\n            # Optionally, remove the file after processing\\n            os.remove(filepath)\\n\\n\\ndef create_app(config_name=None):\\n    app = Flask(__name__)\\n\\n    if config_name is None:\\n        config_name = os.environ.get('FLASK_CONFIG', 'default')\\n\\n    config_name = config_name or os.getenv('FLASK_CONFIG', 'default')\\n    app.config.from_object(config[config_name])\\n\\n    db.init_app(app)\\n    oauth.init_app(app)\\n\\n    oauth.register(\\n        name='google',\\n        client_id=app.config['GOOGLE_CLIENT_ID'],\\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\\n        client_kwargs={'scope': 'openid email profile'},\\n    )\\n\\n    app.add_url_rule('/', 'home', home)\\n    app.add_url_rule('/about', 'about', about)\\n    app.add_url_rule('/quizz', 'quizz', quizz)\\n    app.add_url_rule('/contact', 'contact', contact)\\n    app.add_url_rule('/login', 'login', login)\\n    app.add_url_rule('/logout', 'logout', logout)\\n    app.add_url_rule('/login/authorized', 'authorized', authorized)\\n    app.add_url_rule('/evaluate_audio', 'evaluate_audio', evaluate_audio, methods=['POST'])\\n\\n    return app\\n\\napp = create_app()\\n\\nif __name__ == '__main__':\\n    app.run()\"\n    },\n    {\n      \"path\": \"run.py\",\n      \"content\": \"import os\\nfrom app import create_app, db\\n#from app.models.user import User\\n#from app.models.models import Quiz, Question, Answer, PageScan\\n\\napp = create_app(os.getenv('FLASK_CONFIG') or 'default')\\n\\n#\\n# @app.cli.command(\\\"init-db\\\")\\n# def init_db():\\n#     db.create_all()\\n#     print(\\\"Database tables created.\\\")\\n\\nif __name__ == '__main__':\\n    with app.app_context():\\n        db.create_all()\\n    app.run()\"\n    },\n    {\n      \"path\": \"config.py\",\n      \"content\": \"import os\\nfrom dotenv import load_dotenv\\n\\n# Load environment variables from .env file\\nload_dotenv()\\n\\nclass Config:\\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string'\\n    GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')\\n    GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')\\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\\n    UPLOAD_FOLDER = os.environ.get('UPLOAD_FOLDER') or 'audio_uploads'\\n    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY') or \\\"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\\\"\\n    SQLALCHEMY_ECHO = False  # Default to False, enable per environment as needed\\n\\n    @staticmethod\\n    def init_app(app):\\n        pass\\n\\nclass DevelopmentConfig(Config):\\n    DEBUG = True\\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\\\\\n        'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), 'dev.sqlite')\\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for development\\n\\n\\nclass TestingConfig(Config):\\n    TESTING = True\\n    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or 'sqlite:///:memory:'\\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for testing\\n\\n\\nclass ProductionConfig(Config):\\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\\n\\n    @classmethod\\n    def init_app(cls, app):\\n        Config.init_app(app)\\n\\n        # log to syslog\\n        import logging\\n        from logging.handlers import SysLogHandler\\n        syslog_handler = SysLogHandler()\\n        syslog_handler.setLevel(logging.WARNING)\\n        app.logger.addHandler(syslog_handler)\\n\\nconfig = {\\n    'development': DevelopmentConfig,\\n    'testing': TestingConfig,\\n    'production': ProductionConfig,\\n    'default': DevelopmentConfig\\n}\"\n    },\n    {\n      \"path\": \"requirements.txt\",\n      \"content\": \"Flask~=3.0.3\\n#flask-oauthlib\\nauthlib~=1.3.1\\nrequests\\npython-dotenv~=1.0.1\\nFlask-SQLAlchemy\\n# google-cloud-speech\\ngoogle-generativeai\\n# psycopg2\\n# mysqlclient\\nflask-login\\nWerkzeug~=3.0.3\\nclick~=8.1.7\\nSQLAlchemy~=2.0.31\\nFlask-WTF\\n\"\n    },\n    {\n      \"path\": \".gitignore\",\n      \"content\": \"/__pycache__\\n/audio_uploads\\n__pycache__/\\n*.pyc\\n.pytest_cache/\\n*.egg-info/\\ndist/\\nbuild/\\n.env\\nvenv\\n/venv\\n\"\n    },\n    {\n      \"path\": \"project_structure.json\",\n      \"content\": \"{\\n  \\\"project_structure\\\": [\\n    {\\n      \\\"path\\\": \\\"app-old.txt\\\",\\n      \\\"content\\\": \\\"from flask import Flask, render_template, redirect, url_for, session, request, flash, jsonify\\\\nfrom flask_sqlalchemy import SQLAlchemy\\\\nfrom authlib.integrations.flask_client import OAuth\\\\nfrom authlib.integrations.base_client.errors import OAuthError\\\\nfrom config import config\\\\nimport os\\\\nfrom werkzeug.utils import secure_filename\\\\nimport google.generativeai as genai\\\\nfrom transcribe import transcribe_audio\\\\n\\\\ndb = SQLAlchemy()\\\\noauth = OAuth()\\\\n\\\\ndef home():\\\\n    return render_template('home.html', active_page='home')\\\\n\\\\ndef about():\\\\n    return render_template('about.html', active_page='about')\\\\n\\\\ndef quizz():\\\\n    return render_template('quizz.html', active_page='services')\\\\n\\\\ndef contact():\\\\n    return render_template('contact.html', active_page='contact')\\\\n\\\\ndef login():\\\\n    google = oauth.create_client('google')\\\\n    redirect_uri = url_for('authorized', _external=True)\\\\n    return google.authorize_redirect(redirect_uri)\\\\n\\\\ndef logout():\\\\n    session.pop('google_token', None)\\\\n    session.pop('user_email', None)\\\\n    return redirect(url_for('home'))\\\\n\\\\ndef authorized():\\\\n    try:\\\\n        google = oauth.create_client('google')\\\\n        token = google.authorize_access_token()\\\\n        user_info = token.get('userinfo')\\\\n        if user_info:\\\\n            session['google_token'] = token\\\\n            session['user_email'] = user_info['email']\\\\n            flash('Successfully logged in!', 'success')\\\\n        return redirect(url_for('home'))\\\\n    except OAuthError as e:\\\\n        flash('Failed to log in. Access was denied.', 'danger')\\\\n        return redirect(url_for('home'))\\\\n\\\\n\\\\ndef evaluate_audio():\\\\n    if 'audio' not in request.files:\\\\n        return jsonify({'error': 'No audio file provided'}), 400\\\\n\\\\n    audio_file = request.files['audio']\\\\n\\\\n    if audio_file.filename == '':\\\\n        return jsonify({'error': 'No selected file'}), 400\\\\n\\\\n    if audio_file:\\\\n        filename = secure_filename(audio_file.filename)\\\\n\\\\n        # Ensure the upload folder exists\\\\n        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\\\\n\\\\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\\\\n        audio_file.save(filepath)\\\\n\\\\n        try:\\\\n            # Transcribe the audio using Gemini\\\\n            transcription = transcribe_audio(filepath)\\\\n\\\\n            # Here you can add any additional processing or evaluation of the transcription\\\\n\\\\n            return jsonify({\\\\n                'result':  transcription, # 'Audio processed successfully',\\\\n                'transcription': transcription\\\\n            })\\\\n        except Exception as e:\\\\n            return jsonify({'error': f'Error processing audio: {str(e)}'}), 500\\\\n        finally:\\\\n            # Optionally, remove the file after processing\\\\n            os.remove(filepath)\\\\n\\\\n\\\\ndef create_app(config_name=None):\\\\n    app = Flask(__name__)\\\\n\\\\n    if config_name is None:\\\\n        config_name = os.environ.get('FLASK_CONFIG', 'default')\\\\n\\\\n    config_name = config_name or os.getenv('FLASK_CONFIG', 'default')\\\\n    app.config.from_object(config[config_name])\\\\n\\\\n    db.init_app(app)\\\\n    oauth.init_app(app)\\\\n\\\\n    oauth.register(\\\\n        name='google',\\\\n        client_id=app.config['GOOGLE_CLIENT_ID'],\\\\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\\\\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\\\\n        client_kwargs={'scope': 'openid email profile'},\\\\n    )\\\\n\\\\n    app.add_url_rule('/', 'home', home)\\\\n    app.add_url_rule('/about', 'about', about)\\\\n    app.add_url_rule('/quizz', 'quizz', quizz)\\\\n    app.add_url_rule('/contact', 'contact', contact)\\\\n    app.add_url_rule('/login', 'login', login)\\\\n    app.add_url_rule('/logout', 'logout', logout)\\\\n    app.add_url_rule('/login/authorized', 'authorized', authorized)\\\\n    app.add_url_rule('/evaluate_audio', 'evaluate_audio', evaluate_audio, methods=['POST'])\\\\n\\\\n    return app\\\\n\\\\napp = create_app()\\\\n\\\\nif __name__ == '__main__':\\\\n    app.run()\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"run.py\\\",\\n      \\\"content\\\": \\\"import os\\\\nfrom app import create_app, db\\\\n#from app.models.user import User\\\\n#from app.models.models import Quiz, Question, Answer, PageScan\\\\n\\\\napp = create_app(os.getenv('FLASK_CONFIG') or 'default')\\\\n\\\\n#\\\\n# @app.cli.command(\\\\\\\"init-db\\\\\\\")\\\\n# def init_db():\\\\n#     db.create_all()\\\\n#     print(\\\\\\\"Database tables created.\\\\\\\")\\\\n\\\\nif __name__ == '__main__':\\\\n    with app.app_context():\\\\n        db.create_all()\\\\n    app.run()\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"config.py\\\",\\n      \\\"content\\\": \\\"import os\\\\nfrom dotenv import load_dotenv\\\\n\\\\n# Load environment variables from .env file\\\\nload_dotenv()\\\\n\\\\nclass Config:\\\\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string'\\\\n    GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')\\\\n    GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')\\\\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\\\\n    UPLOAD_FOLDER = os.environ.get('UPLOAD_FOLDER') or 'audio_uploads'\\\\n    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY') or \\\\\\\"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\\\\\\\"\\\\n    SQLALCHEMY_ECHO = False  # Default to False, enable per environment as needed\\\\n\\\\n    @staticmethod\\\\n    def init_app(app):\\\\n        pass\\\\n\\\\nclass DevelopmentConfig(Config):\\\\n    DEBUG = True\\\\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\\\\\\\\\\\n        'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), 'dev.sqlite')\\\\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for development\\\\n\\\\n\\\\nclass TestingConfig(Config):\\\\n    TESTING = True\\\\n    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or 'sqlite:///:memory:'\\\\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for testing\\\\n\\\\n\\\\nclass ProductionConfig(Config):\\\\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\\\\n\\\\n    @classmethod\\\\n    def init_app(cls, app):\\\\n        Config.init_app(app)\\\\n\\\\n        # log to syslog\\\\n        import logging\\\\n        from logging.handlers import SysLogHandler\\\\n        syslog_handler = SysLogHandler()\\\\n        syslog_handler.setLevel(logging.WARNING)\\\\n        app.logger.addHandler(syslog_handler)\\\\n\\\\nconfig = {\\\\n    'development': DevelopmentConfig,\\\\n    'testing': TestingConfig,\\\\n    'production': ProductionConfig,\\\\n    'default': DevelopmentConfig\\\\n}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"requirements.txt\\\",\\n      \\\"content\\\": \\\"Flask~=3.0.3\\\\n#flask-oauthlib\\\\nauthlib~=1.3.1\\\\nrequests\\\\npython-dotenv~=1.0.1\\\\nFlask-SQLAlchemy\\\\n# google-cloud-speech\\\\ngoogle-generativeai\\\\n# psycopg2\\\\n# mysqlclient\\\\nflask-login\\\\nWerkzeug~=3.0.3\\\\nclick~=8.1.7\\\\nSQLAlchemy~=2.0.31\\\\nFlask-WTF\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".gitignore\\\",\\n      \\\"content\\\": \\\"/__pycache__\\\\n/audio_uploads\\\\n__pycache__/\\\\n*.pyc\\\\n.pytest_cache/\\\\n*.egg-info/\\\\ndist/\\\\nbuild/\\\\n.env\\\\nvenv\\\\n/venv\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".env\\\",\\n      \\\"content\\\": \\\"GOOGLE_CLIENT_ID=792066325521-dgtt0c4cp36nace09o3fcslflh9m4s4h.apps.googleusercontent.com\\\\nGOOGLE_CLIENT_SECRET=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\\\\nFLASK_CONFIG=development\\\\nSECRET_KEY=your_secret_key_here\\\\nDEV_DATABASE_URL=sqlite:///dev.sqlite\\\\nTEST_DATABASE_URL=sqlite:///test.sqlite\\\\nDATABASE_URL=postgresql://user:password@localhost/dbname\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"transcribe.py\\\",\\n      \\\"content\\\": \\\"\\\\nimport google.generativeai as genai\\\\nfrom flask import current_app\\\\n\\\\n\\\\n#os.environ[\\\\\\\"GEMINI_API_KEY\\\\\\\"] = \\\\\\\"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\\\\\\\"\\\\n# genai.configure(api_key=os.environ[\\\\\\\"GEMINI_API_KEY\\\\\\\"])\\\\n\\\\n\\\\ndef transcribe_file(file_path: str) -> str:\\\\n    \\\\\\\"\\\\\\\"\\\\\\\"\\\\n    Transcribe the audio file at the given path.\\\\n\\\\n    :param file_path: Path to the audio file\\\\n    :return: Transcribed text\\\\n    \\\\\\\"\\\\\\\"\\\\\\\"\\\\n    # Placeholder implementation\\\\n    return \\\\\\\"Hello World! This is a placeholder transcription.\\\\\\\"\\\\n\\\\n\\\\n\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\nInstall the Google AI Python SDK\\\\n\\\\n$ pip install google-generativeai\\\\n\\\\nSee the getting started guide for more information:\\\\nhttps://ai.google.dev/gemini-api/docs/get-started/python\\\\n\\\\\\\"\\\\\\\"\\\\\\\"\\\\n\\\\n\\\\n\\\\n\\\\ndef upload_to_gemini(path, mime_type=\\\\\\\"audio/wav\\\\\\\"):\\\\n  \\\\\\\"\\\\\\\"\\\\\\\"Uploads the given file to Gemini.\\\\n\\\\n  See https://ai.google.dev/gemini-api/docs/prompting_with_media\\\\n  \\\\\\\"\\\\\\\"\\\\\\\"\\\\n  file = genai.upload_file(path, mime_type=mime_type)\\\\n  print(f\\\\\\\"Uploaded file '{file.display_name}' as: {file.uri}\\\\\\\")\\\\n  return file\\\\n\\\\ndef transcribe_audio(audio_path: str, mime_type=\\\\\\\"audio/wav\\\\\\\") -> str:\\\\n  genai.configure(api_key=current_app.config['GEMINI_API_KEY'])\\\\n  # See https://ai.google.dev/api/python/google/generativeai/GenerativeModel\\\\n  generation_config = {\\\\n    \\\\\\\"temperature\\\\\\\": 1,\\\\n    \\\\\\\"top_p\\\\\\\": 0.95,\\\\n    \\\\\\\"top_k\\\\\\\": 64,\\\\n    \\\\\\\"max_output_tokens\\\\\\\": 8192,\\\\n    \\\\\\\"response_mime_type\\\\\\\": \\\\\\\"text/plain\\\\\\\",\\\\n  }\\\\n\\\\n  model = genai.GenerativeModel(\\\\n    model_name=\\\\\\\"gemini-1.5-flash\\\\\\\",\\\\n    generation_config=generation_config,\\\\n    # safety_settings = Adjust safety settings\\\\n    # See https://ai.google.dev/gemini-api/docs/safety-settings\\\\n  )\\\\n\\\\n  # TODO Make these files available on the local file system\\\\n  # You may need to update the file paths\\\\n  # files = [\\\\n  #   upload_to_gemini(audio_path, mime_type=mime_type),\\\\n  # ]\\\\n  file = upload_to_gemini(audio_path, mime_type=mime_type)\\\\n\\\\n  chat_session = model.start_chat(\\\\n    history=[\\\\n      {\\\\n        \\\\\\\"role\\\\\\\": \\\\\\\"user\\\\\\\",\\\\n        \\\\\\\"parts\\\\\\\": [file],\\\\n      },\\\\n    ]\\\\n  )\\\\n\\\\n  response = chat_session.send_message(\\\\\\\"give a short summary of the file\\\\\\\")\\\\n\\\\n  print(response.text)\\\\n  return response.text\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"create_structure.py\\\",\\n      \\\"content\\\": \\\"import os\\\\n\\\\n\\\\ndef create_directory_structure():\\\\n    base_dir = '.'\\\\n\\\\n    # Create main directory structure\\\\n    directories = [\\\\n        '',\\\\n        'app',\\\\n        'app/main',\\\\n        'app/auth',\\\\n        'app/quiz',\\\\n        'app/models',\\\\n        'app/static',\\\\n        'app/templates',\\\\n        'tests'\\\\n    ]\\\\n\\\\n    for directory in directories:\\\\n        os.makedirs(os.path.join(base_dir, directory), exist_ok=True)\\\\n\\\\n    # Create files\\\\n    files = [\\\\n        'app/__init__.py',\\\\n        'app/main/__init__.py',\\\\n        'app/main/routes.py',\\\\n        'app/main/errors.py',\\\\n        'app/auth/__init__.py',\\\\n        'app/auth/routes.py',\\\\n        'app/quiz/__init__.py',\\\\n        'app/quiz/routes.py',\\\\n        'app/models/__init__.py',\\\\n        'app/utils.py',\\\\n        'tests/__init__.py',\\\\n        'tests/test_main.py',\\\\n        'tests/test_auth.py',\\\\n        'tests/test_quiz.py',\\\\n        'config.py',\\\\n        'run.py',\\\\n        'requirements.txt'\\\\n    ]\\\\n\\\\n    for file in files:\\\\n        open(os.path.join(base_dir, file), 'a').close()\\\\n\\\\n    print(\\\\\\\"Directory structure created successfully!\\\\\\\")\\\\n\\\\n\\\\nif __name__ == \\\\\\\"__main__\\\\\\\":\\\\n    create_directory_structure()\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"export_structure.py\\\",\\n      \\\"content\\\": \\\"import os\\\\nimport json\\\\n\\\\n\\\\ndef should_exclude(path):\\\\n    exclude_dirs = {'.venv', 'venv', '__pycache__', 'node_modules', '.git'}\\\\n    exclude_extensions = {'.pyc', '.pyo', '.pyd', '.db', '.sqlite3'}\\\\n\\\\n    parts = path.split(os.sep)\\\\n    if any(part in exclude_dirs for part in parts):\\\\n        return True\\\\n\\\\n    _, ext = os.path.splitext(path)\\\\n    return ext.lower() in exclude_extensions\\\\n\\\\n\\\\ndef read_file_content(file_path):\\\\n    try:\\\\n        with open(file_path, 'r', encoding='utf-8') as file:\\\\n            return file.read()\\\\n    except Exception as e:\\\\n        return f\\\\\\\"Error reading file: {str(e)}\\\\\\\"\\\\n\\\\n\\\\ndef explore_directory(directory):\\\\n    structure = []\\\\n    for root, dirs, files in os.walk(directory):\\\\n        for file in files:\\\\n            file_path = os.path.join(root, file)\\\\n            if not should_exclude(file_path):\\\\n                relative_path = os.path.relpath(file_path, directory)\\\\n                structure.append({\\\\n                    'path': relative_path,\\\\n                    'content': read_file_content(file_path)\\\\n                })\\\\n    return structure\\\\n\\\\n\\\\ndef export_project_structure(root_dir='.'):\\\\n    project_structure = explore_directory(root_dir)\\\\n    output = {\\\\n        'project_structure': project_structure\\\\n    }\\\\n\\\\n    with open('project_structure.json', 'w', encoding='utf-8') as f:\\\\n        json.dump(output, f, indent=2)\\\\n\\\\n\\\\nif __name__ == \\\\\\\"__main__\\\\\\\":\\\\n    export_project_structure()\\\\n    print(\\\\\\\"Project structure exported to project_structure.json\\\\\\\")\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/__init__.py\\\",\\n      \\\"content\\\": \\\"import logging\\\\nimport os\\\\n\\\\nfrom flask import Flask\\\\nfrom flask_login import LoginManager\\\\nfrom flask_sqlalchemy import SQLAlchemy\\\\n\\\\nfrom config import config\\\\nfrom .utils import init_oauth, oauth\\\\n\\\\ndb = SQLAlchemy()\\\\nlogin_manager = LoginManager()\\\\n\\\\n\\\\ndef create_app(config_name=None):\\\\n    app = Flask(__name__)\\\\n\\\\n    if config_name is None:\\\\n        config_name = os.getenv('FLASK_CONFIG', 'default')\\\\n\\\\n    app.config.from_object(config[config_name])\\\\n    config[config_name].init_app(app)\\\\n\\\\n    db.init_app(app)\\\\n\\\\n    if app.config['SQLALCHEMY_ECHO']:\\\\n        # Set up SQLAlchemy query logging\\\\n        logging.basicConfig()\\\\n        logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\\\\n\\\\n    login_manager.init_app(app)\\\\n    init_oauth(app)\\\\n\\\\n    from .models.user import User\\\\n\\\\n    @login_manager.user_loader\\\\n    def load_user(user_id):\\\\n        return User.query.get(user_id)\\\\n\\\\n    # Register blueprints\\\\n    from .main import main as main_blueprint\\\\n    app.register_blueprint(main_blueprint)\\\\n\\\\n    from .auth import auth as auth_blueprint\\\\n    app.register_blueprint(auth_blueprint, url_prefix='/auth')\\\\n\\\\n    from .answer import answer as quiz_blueprint\\\\n    app.register_blueprint(quiz_blueprint, url_prefix='/answer')\\\\n\\\\n    from .quiz import quiz as quiz_blueprint\\\\n    app.register_blueprint(quiz_blueprint, url_prefix='/quiz')\\\\n\\\\n    # Import and register the init-db command\\\\n    from .cli import init_db_command\\\\n    app.cli.add_command(init_db_command)\\\\n\\\\n    return app\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/cli.py\\\",\\n      \\\"content\\\": \\\"import click\\\\nfrom flask.cli import with_appcontext\\\\nfrom flask import current_app\\\\nfrom . import db\\\\nimport os\\\\nfrom sqlalchemy import inspect\\\\n\\\\n\\\\n@click.command('init-db')\\\\n@with_appcontext\\\\ndef init_db_command():\\\\n    \\\\\\\"\\\\\\\"\\\\\\\"Clear the existing data and create new tables.\\\\\\\"\\\\\\\"\\\\\\\"\\\\n    db.create_all()\\\\n\\\\n    # Print all tables that SQLAlchemy is aware of\\\\n    inspector = inspect(db.engine)\\\\n    tables = inspector.get_table_names()\\\\n    click.echo(f\\\\\\\"Tables created: {', '.join(tables)}\\\\\\\")\\\\n\\\\n    db_uri = current_app.config['SQLALCHEMY_DATABASE_URI']\\\\n    if db_uri.startswith('sqlite:///'):\\\\n        db_path = db_uri.replace('sqlite:///', '')\\\\n        if not os.path.isabs(db_path):\\\\n            db_path = os.path.join(current_app.instance_path, db_path)\\\\n        click.echo(f\\\\\\\"SQLite database location: {os.path.abspath(db_path)}\\\\\\\")\\\\n    else:\\\\n        click.echo(f\\\\\\\"Database URI: {db_uri}\\\\\\\")\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/utils.py\\\",\\n      \\\"content\\\": \\\"from authlib.integrations.flask_client import OAuth\\\\n\\\\noauth = OAuth()\\\\n\\\\n\\\\ndef init_oauth(app):\\\\n    oauth.init_app(app)\\\\n    oauth.register(\\\\n        name='google',\\\\n        client_id=app.config['GOOGLE_CLIENT_ID'],\\\\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\\\\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\\\\n        #client_kwargs={'scope': 'email'},\\\\n        client_kwargs={'scope': 'openid email profile'}\\\\n    )\\\\n\\\\n\\\\n\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/answer/__init__.py\\\",\\n      \\\"content\\\": \\\"from flask import Blueprint\\\\n\\\\nanswer = Blueprint('answer', __name__)\\\\n\\\\nfrom . import routes\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/answer/routes.py\\\",\\n      \\\"content\\\": \\\"from flask import render_template, request, jsonify, current_app\\\\nfrom werkzeug.utils import secure_filename\\\\nfrom datetime import datetime\\\\nfrom transcribe import transcribe_audio\\\\nfrom . import answer\\\\nimport os\\\\n\\\\n@answer.route('/')\\\\ndef index():\\\\n    return render_template('answer/index.html')\\\\n\\\\ndef generate_timestamp_filename(original_filename):\\\\n    # Get current timestamp with milliseconds\\\\n    timestamp = datetime.now().strftime(\\\\\\\"%Y%m%d-%H%M%S-%f\\\\\\\")\\\\n    # Get the file extension\\\\n    _, file_extension = os.path.splitext(original_filename)\\\\n    # Create new filename\\\\n    return f\\\\\\\"{timestamp}{file_extension}\\\\\\\"\\\\n\\\\n\\\\n@answer.route('/evaluate_audio', methods=['POST'])\\\\ndef evaluate_audio():\\\\n    try:\\\\n        if 'audio' not in request.files:\\\\n            return jsonify({'error': 'No audio file provided'}), 400\\\\n\\\\n        audio_file = request.files['audio']\\\\n\\\\n        if audio_file.filename == '':\\\\n            return jsonify({'error': 'No selected file'}), 400\\\\n\\\\n        if audio_file:\\\\n            # Generate a new filename based on current timestamp\\\\n            new_filename = generate_timestamp_filename(audio_file.filename)\\\\n\\\\n            # Secure the filename\\\\n            secure_name = secure_filename(new_filename)\\\\n\\\\n            # Define the path where you want to save the file\\\\n            save_path = os.path.join(current_app.config['UPLOAD_FOLDER'], secure_name)\\\\n\\\\n            # Save the file\\\\n            audio_file.save(save_path)\\\\n\\\\n            # Now pass the saved file path to your transcribe_audio function\\\\n            result = transcribe_audio(save_path)\\\\n\\\\n            # You might want to store the filename in your database here\\\\n\\\\n            return jsonify({'result': result, 'filename': secure_name})\\\\n        else:\\\\n            return jsonify({'error': 'Invalid file'}), 400\\\\n\\\\n    except Exception as e:\\\\n        current_app.logger.error(f\\\\\\\"Error in evaluate_audio: {str(e)}\\\\\\\")\\\\n        return jsonify({'error': f'An error occurred while processing the audio: {str(e)}'}), 500\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/auth/__init__.py\\\",\\n      \\\"content\\\": \\\"from flask import Blueprint\\\\n\\\\nauth = Blueprint('auth', __name__)\\\\n\\\\nfrom . import routes\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/auth/routes.py\\\",\\n      \\\"content\\\": \\\"from flask import redirect, url_for, flash, session\\\\nfrom flask_login import login_user, logout_user, current_user\\\\n\\\\nfrom . import auth\\\\nfrom ..models import User\\\\nfrom ..utils import oauth\\\\n\\\\n\\\\n@auth.route('/login')\\\\ndef login():\\\\n    return oauth.google.authorize_redirect(url_for('auth.authorized', _external=True))\\\\n\\\\n\\\\n@auth.route('/logout')\\\\ndef logout():\\\\n    if current_user.is_authenticated:\\\\n        logout_user()\\\\n    session.clear()  # This clears all session data\\\\n    flash('You have been logged out.', 'danger')\\\\n    return redirect(url_for('main.home'))\\\\n\\\\n\\\\n@auth.route('/login/authorized')\\\\ndef authorized():\\\\n    try:\\\\n        token = oauth.google.authorize_access_token()\\\\n        user_info = token.get('userinfo')\\\\n\\\\n        if user_info:\\\\n            user = User.get_or_create(\\\\n                email=user_info['email'],\\\\n                first_name=user_info.get('given_name'),\\\\n                last_name=user_info.get('family_name'),\\\\n                picture=user_info.get('picture')\\\\n            )\\\\n            login_user(user)\\\\n            session['user'] = user.to_dict()  # Store all user info in session\\\\n            flash('Logged in successfully.', 'success')\\\\n        else:\\\\n            flash('Failed to get user info from Google.', 'danger')\\\\n\\\\n        return redirect(url_for('main.home'))\\\\n    except Exception as e:\\\\n        flash(f'An error occurred: {str(e)}', 'danger')\\\\n        return redirect(url_for('main.home'))\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/quiz/__init__.py\\\",\\n      \\\"content\\\": \\\"from flask import Blueprint\\\\n\\\\nquiz = Blueprint('quiz', __name__)\\\\n\\\\nfrom . import routes\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/quiz/forms.py\\\",\\n      \\\"content\\\": \\\"from flask_wtf import FlaskForm\\\\nfrom wtforms import StringField, SubmitField, MultipleFileField, IntegerField\\\\nfrom wtforms.validators import DataRequired , NumberRange\\\\nfrom flask_wtf.file import FileAllowed\\\\n\\\\nclass CreateQuizForm(FlaskForm):\\\\n    title = StringField('Quiz Title', validators=[DataRequired()])\\\\n    images = MultipleFileField('Upload Images', validators=[\\\\n        FileAllowed(['jpg', 'png'], 'Images only!')\\\\n    ])\\\\n    submit = SubmitField('Create Quiz')\\\\n\\\\nclass EditQuestionForm(FlaskForm):\\\\n    # Add fields for editing questions\\\\n    pass\\\\n\\\\nclass QuestionForm(FlaskForm):\\\\n    question_text = StringField('Question', validators=[DataRequired()])\\\\n    answer = StringField('Answer', validators=[DataRequired()])\\\\n    difficulty_level = IntegerField('Difficulty Level', validators=[NumberRange(min=1, max=10)])\\\\n    submit = SubmitField('Save Question')\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/quiz/routes.py\\\",\\n      \\\"content\\\": \\\"from flask import render_template, redirect, url_for, flash, request, abort, current_app\\\\nfrom flask_login import login_required, current_user\\\\nfrom . import quiz\\\\nfrom .forms import CreateQuizForm, QuestionForm, EditQuestionForm\\\\nfrom .. import db\\\\nfrom ..models import Quiz, Question, PageScan\\\\nfrom werkzeug.utils import secure_filename\\\\nimport os\\\\n\\\\n\\\\n@quiz.route('/')\\\\n@login_required\\\\ndef index():\\\\n    user_quizzes = Quiz.query.filter_by(user_owner_id=current_user.id).all()\\\\n    return render_template('quiz/index.html', quizzes=user_quizzes)\\\\n\\\\n\\\\n@quiz.route('/create', methods=['GET', 'POST'])\\\\n@login_required\\\\ndef create():\\\\n    form = CreateQuizForm()\\\\n    if form.validate_on_submit():\\\\n        quiz = Quiz(title=form.title.data, user_owner_id=current_user.id)\\\\n        db.session.add(quiz)\\\\n        db.session.flush()  # To get the quiz id\\\\n\\\\n        for image in request.files.getlist('images'):\\\\n            if image:\\\\n                filename = secure_filename(image.filename)\\\\n                image.save(os.path.join(current_app.config['UPLOAD_FOLDER'], filename))\\\\n                page_scan = PageScan(quiz_id=quiz.id, file_name=filename)\\\\n                db.session.add(page_scan)\\\\n\\\\n        db.session.commit()\\\\n        flash('Quiz created successfully!', 'success')\\\\n        return redirect(url_for('quiz.index'))\\\\n    return render_template('quiz/create.html', form=form)\\\\n\\\\n\\\\n@quiz.route('/<quiz_id>/edit', methods=['GET', 'POST'])\\\\n@login_required\\\\ndef edit(quiz_id):\\\\n    quiz = Quiz.query.get_or_404(quiz_id)\\\\n    if quiz.user_owner_id != current_user.id:\\\\n        flash('You do not have permission to edit this quiz.', 'danger')\\\\n        return redirect(url_for('quiz.index'))\\\\n\\\\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\\\\n    form = EditQuestionForm()\\\\n\\\\n    if form.validate_on_submit():\\\\n        # Logic to save edited questions\\\\n        pass\\\\n\\\\n    return render_template('quiz/edit.html', quiz=quiz, questions=questions, form=form)\\\\n\\\\n\\\\n@quiz.route('/<quiz_id>/answer')\\\\n@login_required\\\\ndef answer(quiz_id):\\\\n    quiz = Quiz.query.get_or_404(quiz_id)\\\\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\\\\n    return render_template('quiz/answer.html', quiz=quiz, questions=questions)\\\\n\\\\n\\\\n@quiz.route('/<quiz_id>/add_question', methods=['GET', 'POST'])\\\\n@login_required\\\\ndef add_question(quiz_id):\\\\n    quiz = Quiz.query.get_or_404(quiz_id)\\\\n    if quiz.user_owner_id != current_user.id:\\\\n        abort(403)\\\\n\\\\n    form = QuestionForm()\\\\n    if form.validate_on_submit():\\\\n        question = Question(\\\\n            quiz_id=quiz_id,\\\\n            question_text=form.question_text.data,\\\\n            answer=form.answer.data,\\\\n            difficulty_level=form.difficulty_level.data\\\\n        )\\\\n        db.session.add(question)\\\\n        db.session.commit()\\\\n        flash('Question added successfully!', 'success')\\\\n        return redirect(url_for('quiz.edit', quiz_id=quiz_id))\\\\n\\\\n    return render_template('quiz/add_question.html', form=form, quiz=quiz)\\\\n\\\\n\\\\n@quiz.route('/<quiz_id>/edit_question/<question_id>', methods=['GET', 'POST'])\\\\n@login_required\\\\ndef edit_question(quiz_id, question_id):\\\\n    quiz = Quiz.query.get_or_404(quiz_id)\\\\n    question = Question.query.get_or_404(question_id)\\\\n    if quiz.user_owner_id != current_user.id or question.quiz_id != quiz_id:\\\\n        abort(403)\\\\n\\\\n    form = QuestionForm(obj=question)\\\\n    if form.validate_on_submit():\\\\n        form.populate_obj(question)\\\\n        db.session.commit()\\\\n        flash('Question updated successfully!', 'success')\\\\n        return redirect(url_for('quiz.edit', quiz_id=quiz_id))\\\\n\\\\n    return render_template('quiz/edit_question.html', form=form, quiz=quiz, question=question)\\\\n\\\\n\\\\n@quiz.route('/<quiz_id>/delete_question/<question_id>', methods=['POST'])\\\\n@login_required\\\\ndef delete_question(quiz_id, question_id):\\\\n    quiz = Quiz.query.get_or_404(quiz_id)\\\\n    question = Question.query.get_or_404(question_id)\\\\n    if quiz.user_owner_id != current_user.id or question.quiz_id != quiz_id:\\\\n        abort(403)\\\\n\\\\n    db.session.delete(question)\\\\n    db.session.commit()\\\\n    flash('Question deleted successfully!', 'success')\\\\n    return redirect(url_for('quiz.edit', quiz_id=quiz_id))\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/models/user.py\\\",\\n      \\\"content\\\": \\\"import logging\\\\nimport uuid\\\\n\\\\nfrom flask_login import UserMixin\\\\nfrom sqlalchemy import Column, String\\\\n\\\\nfrom .. import db\\\\n\\\\n\\\\nclass User(UserMixin, db.Model):\\\\n    __tablename__ = 'user'\\\\n\\\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\\\n    email = Column(String(255), unique=True, nullable=False)\\\\n    first_name = Column(String(255))\\\\n    last_name = Column(String(255))\\\\n    picture = Column(String(255))\\\\n\\\\n    quizzes = db.relationship(\\\\\\\"Quiz\\\\\\\", back_populates=\\\\\\\"owner\\\\\\\")\\\\n    answers = db.relationship(\\\\\\\"Answer\\\\\\\", back_populates=\\\\\\\"user\\\\\\\")\\\\n\\\\n    def __init__(self, email, first_name=None, last_name=None, picture=None):\\\\n        self.email = email\\\\n        self.first_name = first_name\\\\n        self.last_name = last_name\\\\n        self.picture = picture\\\\n\\\\n    @staticmethod\\\\n    def get(email):\\\\n        return User.query.filter_by(email=email).first()\\\\n\\\\n    @staticmethod\\\\n    def create(email, first_name=None, last_name=None, picture=None):\\\\n        user = User(email=email, first_name=first_name, last_name=last_name, picture=picture)\\\\n        db.session.add(user)\\\\n        db.session.commit()\\\\n        logging.info(f\\\\\\\"Created new user with email: {email}\\\\\\\")\\\\n        return user\\\\n\\\\n    @staticmethod\\\\n    def get_or_create(email, first_name=None, last_name=None, picture=None):\\\\n        user = User.get(email)\\\\n        if user is None:\\\\n            user = User.create(email, first_name, last_name, picture)\\\\n        else:\\\\n            user.update(first_name, last_name, picture)\\\\n        return user\\\\n\\\\n    def update(self, first_name=None, last_name=None, picture=None):\\\\n        if first_name is not None:\\\\n            self.first_name = first_name\\\\n        if last_name is not None:\\\\n            self.last_name = last_name\\\\n        if picture is not None:\\\\n            self.picture = picture\\\\n        db.session.commit()\\\\n        logging.info(f\\\\\\\"Updated user information for email: {self.email}\\\\\\\")\\\\n\\\\n    def to_dict(self):\\\\n        return {\\\\n            'id': self.id,\\\\n            'email': self.email,\\\\n            'first_name': self.first_name,\\\\n            'last_name': self.last_name,\\\\n            'picture': self.picture\\\\n        }\\\\n\\\\n    @staticmethod\\\\n    def from_dict(data):\\\\n        return User.get_or_create(\\\\n            email=data.get('email'),\\\\n            first_name=data.get('first_name'),\\\\n            last_name=data.get('last_name'),\\\\n            picture=data.get('picture')\\\\n        )\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/models/models.py\\\",\\n      \\\"content\\\": \\\"import uuid\\\\n\\\\nfrom sqlalchemy import Column, String, DateTime, ForeignKey, func\\\\nfrom sqlalchemy.orm import relationship\\\\n\\\\nfrom .. import db\\\\n\\\\n\\\\nclass Quiz(db.Model):\\\\n    __tablename__ = 'quiz'\\\\n\\\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\\\n    user_owner_id = Column(String(36), ForeignKey('user.id'))\\\\n    title = Column(String(255))\\\\n    created_date = Column(DateTime, default=func.now())\\\\n\\\\n    owner = relationship(\\\\\\\"User\\\\\\\", back_populates=\\\\\\\"quizzes\\\\\\\")\\\\n    questions = relationship(\\\\\\\"Question\\\\\\\", back_populates=\\\\\\\"quiz\\\\\\\")\\\\n    page_scans = relationship(\\\\\\\"PageScan\\\\\\\", back_populates=\\\\\\\"quiz\\\\\\\")\\\\n\\\\n\\\\nclass Question(db.Model):\\\\n    __tablename__ = 'question'\\\\n\\\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\\\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\\\\n    page_scan_id = Column(String(36), ForeignKey('page_scan.id'))\\\\n    question_text = Column(String(1000))\\\\n    answer = Column(String(1000))\\\\n    difficulty_level = Column(db.Integer)\\\\n\\\\n    quiz = relationship(\\\\\\\"Quiz\\\\\\\", back_populates=\\\\\\\"questions\\\\\\\")\\\\n    page_scan = relationship(\\\\\\\"PageScan\\\\\\\", back_populates=\\\\\\\"questions\\\\\\\")\\\\n\\\\n\\\\nclass Answer(db.Model):\\\\n    __tablename__ = 'answer'\\\\n\\\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\\\n    user_id = Column(String(36), ForeignKey('user.id'))\\\\n    answer_text = Column(String(1000))\\\\n    audio_file_name = Column(String(255))\\\\n    date = Column(DateTime, default=func.now())\\\\n    feedback = Column(String(1000))\\\\n    correctness = Column(db.Float)\\\\n    completeness = Column(db.Float)\\\\n\\\\n    user = relationship(\\\\\\\"User\\\\\\\", back_populates=\\\\\\\"answers\\\\\\\")\\\\n\\\\n\\\\nclass PageScan(db.Model):\\\\n    __tablename__ = 'page_scan'\\\\n\\\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\\\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\\\\n    page_position = Column(db.Integer)\\\\n    file_name = Column(String(255))\\\\n    created_date = Column(DateTime, default=func.now())\\\\n\\\\n    quiz = relationship(\\\\\\\"Quiz\\\\\\\", back_populates=\\\\\\\"page_scans\\\\\\\")\\\\n    questions = relationship(\\\\\\\"Question\\\\\\\", back_populates=\\\\\\\"page_scan\\\\\\\")\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/models/__init__.py\\\",\\n      \\\"content\\\": \\\"from .user import User\\\\nfrom .models import Quiz, Question, Answer, PageScan\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/navbar.html\\\",\\n      \\\"content\\\": \\\"<nav class=\\\\\\\"navbar navbar-expand-lg navbar-light bg-light fixed-top\\\\\\\">\\\\n    <div class=\\\\\\\"container-fluid\\\\\\\">\\\\n        <a class=\\\\\\\"navbar-brand\\\\\\\" href=\\\\\\\"{{ url_for('main.home') }}\\\\\\\">My Website</a>\\\\n        <button class=\\\\\\\"navbar-toggler\\\\\\\" type=\\\\\\\"button\\\\\\\" data-bs-toggle=\\\\\\\"collapse\\\\\\\" data-bs-target=\\\\\\\"#navbarNav\\\\\\\"\\\\n                aria-controls=\\\\\\\"navbarNav\\\\\\\" aria-expanded=\\\\\\\"false\\\\\\\" aria-label=\\\\\\\"Toggle navigation\\\\\\\">\\\\n            <span class=\\\\\\\"navbar-toggler-icon\\\\\\\"></span>\\\\n        </button>\\\\n        <div class=\\\\\\\"collapse navbar-collapse\\\\\\\" id=\\\\\\\"navbarNav\\\\\\\">\\\\n            <ul class=\\\\\\\"navbar-nav me-auto\\\\\\\">\\\\n                <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                    <a class=\\\\\\\"nav-link {% if active_page == 'home' %}active{% endif %}\\\\\\\"\\\\n                       href=\\\\\\\"{{ url_for('main.home') }}\\\\\\\">Home</a>\\\\n                </li>\\\\n                <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                    <a class=\\\\\\\"nav-link {% if active_page == 'about' %}active{% endif %}\\\\\\\"\\\\n                       href=\\\\\\\"{{ url_for('main.about') }}\\\\\\\">About</a>\\\\n                </li>\\\\n                <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                    <a class=\\\\\\\"nav-link {% if active_page == 'quiz.index' %}active{% endif %}\\\\\\\"\\\\n                       href=\\\\\\\"{{ url_for('quiz.index') }}\\\\\\\">Quiz</a>\\\\n                </li>\\\\n                <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                    <a class=\\\\\\\"nav-link {% if active_page == 'services' %}active{% endif %}\\\\\\\"\\\\n                       href=\\\\\\\"{{ url_for('answer.index') }}\\\\\\\">Answer</a>\\\\n                </li>\\\\n                <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                    <a class=\\\\\\\"nav-link {% if active_page == 'contact' %}active{% endif %}\\\\\\\"\\\\n                       href=\\\\\\\"{{ url_for('main.contact') }}\\\\\\\">Contact</a>\\\\n                </li>\\\\n            </ul>\\\\n            <ul class=\\\\\\\"navbar-nav\\\\\\\">\\\\n                {% if current_user.is_authenticated %}\\\\n                    <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                        {% if current_user.picture %}\\\\n                            <img src=\\\\\\\"{{ current_user.picture }}\\\\\\\" alt=\\\\\\\"Profile\\\\\\\" class=\\\\\\\"rounded-circle\\\\\\\"\\\\n                                 style=\\\\\\\"width: 24px; height: 24px; object-fit: cover;\\\\\\\">\\\\n                        {% endif %}\\\\n                        <span class=\\\\\\\"navbar-text me-3\\\\\\\">{{ session['user']['first_name'] }}</span>\\\\n                    </li>\\\\n                    <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                        <a class=\\\\\\\"nav-link\\\\\\\" href=\\\\\\\"{{ url_for('auth.logout') }}\\\\\\\">Logout</a>\\\\n                    </li>\\\\n                {% else %}\\\\n                    <li class=\\\\\\\"nav-item\\\\\\\">\\\\n                        <a class=\\\\\\\"nav-link\\\\\\\" href=\\\\\\\"{{ url_for('auth.login') }}\\\\\\\">Login</a>\\\\n                    </li>\\\\n                {% endif %}\\\\n            </ul>\\\\n        </div>\\\\n    </div>\\\\n</nav>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/base.html\\\",\\n      \\\"content\\\": \\\"<!DOCTYPE html>\\\\n<html lang=\\\\\\\"en\\\\\\\">\\\\n<head>\\\\n    <meta charset=\\\\\\\"UTF-8\\\\\\\">\\\\n    <meta name=\\\\\\\"viewport\\\\\\\" content=\\\\\\\"width=device-width, initial-scale=1.0\\\\\\\">\\\\n    <title>{% block title %}Book-Scan-Quizz{% endblock %}</title>\\\\n    <!-- Bootstrap CSS -->\\\\n    <link href=\\\\\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\\\\\\\" rel=\\\\\\\"stylesheet\\\\\\\">\\\\n    <style>\\\\n        body {\\\\n            padding-top: 56px;\\\\n        }\\\\n        .alert-danger {\\\\n            color: #721c24;\\\\n            background-color: #f8d7da;\\\\n            border-color: #f5c6cb;\\\\n        }\\\\n    </style>\\\\n    {% block extra_css %}{% endblock %}\\\\n</head>\\\\n<body>\\\\n    {% include 'navbar.html' %}\\\\n\\\\n    <div class=\\\\\\\"container mt-4\\\\\\\">\\\\n        {% with messages = get_flashed_messages(with_categories=true) %}\\\\n            {% if messages %}\\\\n                {% for category, message in messages %}\\\\n                    <div class=\\\\\\\"alert alert-{{ category }} alert-dismissible fade show\\\\\\\" role=\\\\\\\"alert\\\\\\\">\\\\n                        {{ message }}\\\\n                        <button type=\\\\\\\"button\\\\\\\" class=\\\\\\\"btn-close\\\\\\\" data-bs-dismiss=\\\\\\\"alert\\\\\\\" aria-label=\\\\\\\"Close\\\\\\\"></button>\\\\n                    </div>\\\\n                {% endfor %}\\\\n            {% endif %}\\\\n        {% endwith %}\\\\n\\\\n        {% block content %}\\\\n        {% endblock %}\\\\n    </div>\\\\n\\\\n    <!-- Bootstrap Bundle with Popper -->\\\\n    <script src=\\\\\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\\\\\\\"></script>\\\\n    {% block extra_js %}{% endblock %}\\\\n</body>\\\\n</html>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/answer/index.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n\\\\n{% block title %}Quiz - My Website{% endblock %}\\\\n\\\\n{% block content %}\\\\n<h1>Welcome to the Quiz Page</h1>\\\\n<p>Press and hold the button to record your answer.</p>\\\\n\\\\n<div class=\\\\\\\"text-center my-4\\\\\\\">\\\\n    <button id=\\\\\\\"recordButton\\\\\\\" class=\\\\\\\"btn btn-lg btn-success rounded-circle\\\\\\\" style=\\\\\\\"width: 100px; height: 100px;\\\\\\\">\\\\n        Record\\\\n    </button>\\\\n</div>\\\\n\\\\n<div id=\\\\\\\"recordingFeedback\\\\\\\" class=\\\\\\\"text-center my-2\\\\\\\" style=\\\\\\\"display: none;\\\\\\\">\\\\n    Recording... <span id=\\\\\\\"recordingDuration\\\\\\\">0</span>s\\\\n</div>\\\\n\\\\n<div id=\\\\\\\"processingFeedback\\\\\\\" class=\\\\\\\"text-center my-2\\\\\\\" style=\\\\\\\"display: none;\\\\\\\">\\\\n    Processing your audio...\\\\n</div>\\\\n\\\\n<div id=\\\\\\\"resultContainer\\\\\\\" class=\\\\\\\"mt-4\\\\\\\">\\\\n    <h3>Result:</h3>\\\\n    <p id=\\\\\\\"resultText\\\\\\\"></p>\\\\n</div>\\\\n\\\\n<div id=\\\\\\\"audioVisualization\\\\\\\" class=\\\\\\\"mt-3\\\\\\\" style=\\\\\\\"display: none;\\\\\\\">\\\\n    <div id=\\\\\\\"audioMeter\\\\\\\" style=\\\\\\\"width: 0%; height: 20px; background-color: #4CAF50; transition: width 0.1s;\\\\\\\"></div>\\\\n</div>\\\\n\\\\n{% endblock %}\\\\n\\\\n{% block extra_js %}\\\\n<script>\\\\nlet mediaRecorder;\\\\nlet audioChunks = [];\\\\nlet startTime;\\\\nlet durationInterval;\\\\nlet audioContext;\\\\nlet analyser;\\\\nlet dataArray;\\\\nlet animationId;\\\\n\\\\nconst recordButton = document.getElementById('recordButton');\\\\nconst recordingFeedback = document.getElementById('recordingFeedback');\\\\nconst recordingDuration = document.getElementById('recordingDuration');\\\\nconst resultText = document.getElementById('resultText');\\\\nconst processingFeedback = document.getElementById('processingFeedback');\\\\nconst audioVisualization = document.getElementById('audioVisualization');\\\\nconst audioMeter = document.getElementById('audioMeter');\\\\n\\\\nrecordButton.addEventListener('mousedown', startRecording);\\\\nrecordButton.addEventListener('mouseup', stopRecording);\\\\nrecordButton.addEventListener('mouseleave', stopRecording);\\\\n\\\\nfunction disableButton() {\\\\n    recordButton.disabled = true;\\\\n    recordButton.classList.remove('btn-success', 'btn-danger');\\\\n    recordButton.classList.add('btn-secondary');\\\\n    recordButton.style.cursor = 'not-allowed';\\\\n}\\\\n\\\\nfunction enableButton() {\\\\n    recordButton.disabled = false;\\\\n    recordButton.classList.remove('btn-secondary');\\\\n    recordButton.classList.add('btn-success');\\\\n    recordButton.style.cursor = 'pointer';\\\\n}\\\\n\\\\nfunction startRecording() {\\\\n    if (recordButton.disabled) return;\\\\n\\\\n    audioChunks = [];\\\\n    navigator.mediaDevices.getUserMedia({ audio: true })\\\\n        .then(stream => {\\\\n            mediaRecorder = new MediaRecorder(stream);\\\\n            mediaRecorder.start();\\\\n            startTime = Date.now();\\\\n\\\\n            mediaRecorder.addEventListener(\\\\\\\"dataavailable\\\\\\\", event => {\\\\n                audioChunks.push(event.data);\\\\n            });\\\\n\\\\n            recordButton.classList.remove('btn-success');\\\\n            recordButton.classList.add('btn-danger');\\\\n            recordingFeedback.style.display = 'block';\\\\n            audioVisualization.style.display = 'block';\\\\n            startDurationCounter();\\\\n            startAudioVisualization(stream);\\\\n        });\\\\n}\\\\n\\\\nfunction stopRecording() {\\\\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\\\\n        mediaRecorder.stop();\\\\n        recordButton.classList.remove('btn-danger');\\\\n        recordButton.classList.add('btn-success');\\\\n        recordingFeedback.style.display = 'none';\\\\n        audioVisualization.style.display = 'none';\\\\n        stopDurationCounter();\\\\n        stopAudioVisualization();\\\\n\\\\n        mediaRecorder.addEventListener(\\\\\\\"stop\\\\\\\", () => {\\\\n            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\\\\n            sendAudioToServer(audioBlob);\\\\n        });\\\\n    }\\\\n}\\\\n\\\\nfunction startDurationCounter() {\\\\n    recordingDuration.textContent = '0';\\\\n    durationInterval = setInterval(() => {\\\\n        const duration = Math.floor((Date.now() - startTime) / 1000);\\\\n        recordingDuration.textContent = duration;\\\\n    }, 1000);\\\\n}\\\\n\\\\nfunction stopDurationCounter() {\\\\n    clearInterval(durationInterval);\\\\n}\\\\n\\\\nfunction startAudioVisualization(stream) {\\\\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\\\\n    analyser = audioContext.createAnalyser();\\\\n    const source = audioContext.createMediaStreamSource(stream);\\\\n    source.connect(analyser);\\\\n    analyser.fftSize = 256;\\\\n    const bufferLength = analyser.frequencyBinCount;\\\\n    dataArray = new Uint8Array(bufferLength);\\\\n\\\\n    function updateAudioMeter() {\\\\n        analyser.getByteFrequencyData(dataArray);\\\\n        const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\\\\n        const volume = Math.min(100, Math.max(0, average * 2));\\\\n        audioMeter.style.width = `${volume}%`;\\\\n        animationId = requestAnimationFrame(updateAudioMeter);\\\\n    }\\\\n\\\\n    updateAudioMeter();\\\\n}\\\\n\\\\nfunction stopAudioVisualization() {\\\\n    if (audioContext) {\\\\n        audioContext.close();\\\\n    }\\\\n    if (animationId) {\\\\n        cancelAnimationFrame(animationId);\\\\n    }\\\\n}\\\\n\\\\nfunction sendAudioToServer(audioBlob) {\\\\n    const formData = new FormData();\\\\n    formData.append(\\\\\\\"audio\\\\\\\", audioBlob, \\\\\\\"recording.wav\\\\\\\");\\\\n\\\\n    resultText.textContent = '';\\\\n    processingFeedback.style.display = 'block';\\\\n    disableButton();\\\\n\\\\n    fetch('/answer/evaluate_audio', {\\\\n        method: 'POST',\\\\n        body: formData\\\\n    })\\\\n    .then(response => response.json())\\\\n    .then(data => {\\\\n        processingFeedback.style.display = 'none';\\\\n        if (data.error) {\\\\n            resultText.textContent = data.error;\\\\n            resultText.style.color = 'red';\\\\n        } else {\\\\n            resultText.textContent = data.result;\\\\n            resultText.style.color = 'initial';\\\\n        }\\\\n        enableButton();\\\\n    })\\\\n    .catch(error => {\\\\n        console.error('Error:', error);\\\\n        processingFeedback.style.display = 'none';\\\\n        resultText.textContent = 'An error occurred while processing the audio.';\\\\n        resultText.style.color = 'red';\\\\n        enableButton();\\\\n    });\\\\n}\\\\n</script>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/quiz/answer.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n{% block content %}\\\\n    <h1>Answer Quiz: {{ quiz.title }}</h1>\\\\n    <form method=\\\\\\\"POST\\\\\\\">\\\\n        {% for question in questions %}\\\\n            <div>\\\\n                <h3>Question {{ loop.index }}</h3>\\\\n                <p>{{ question.question_text }}</p>\\\\n                <input type=\\\\\\\"text\\\\\\\" name=\\\\\\\"answer_{{ question.id }}\\\\\\\" required>\\\\n            </div>\\\\n        {% endfor %}\\\\n        <button type=\\\\\\\"submit\\\\\\\">Submit Answers</button>\\\\n    </form>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/quiz/index.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n{% block content %}\\\\n    <h1>My Quizzes</h1>\\\\n    <a href=\\\\\\\"{{ url_for('quiz.create') }}\\\\\\\" class=\\\\\\\"btn btn-primary\\\\\\\">Create New Quiz</a>\\\\n    <ul>\\\\n    {% for quiz in quizzes %}\\\\n        <li>\\\\n            {{ quiz.title }}\\\\n            <a href=\\\\\\\"{{ url_for('quiz.edit', quiz_id=quiz.id) }}\\\\\\\">Edit</a>\\\\n            <a href=\\\\\\\"{{ url_for('quiz.answer', quiz_id=quiz.id) }}\\\\\\\">Answer</a>\\\\n        </li>\\\\n    {% endfor %}\\\\n    </ul>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/quiz/create.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n{% block content %}\\\\n    <h1>Create New Quiz</h1>\\\\n    <form method=\\\\\\\"POST\\\\\\\" enctype=\\\\\\\"multipart/form-data\\\\\\\">\\\\n        {{ form.hidden_tag() }}\\\\n        <div>\\\\n            {{ form.title.label }}\\\\n            {{ form.title() }}\\\\n        </div>\\\\n        <div>\\\\n            {{ form.images.label }}\\\\n            {{ form.images() }}\\\\n        </div>\\\\n        {{ form.submit() }}\\\\n    </form>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/quiz/add_question.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n{% block content %}\\\\n    <h1>Add Question to Quiz: {{ quiz.title }}</h1>\\\\n    <form method=\\\\\\\"POST\\\\\\\">\\\\n        {{ form.hidden_tag() }}\\\\n        <div>\\\\n            {{ form.question_text.label }}\\\\n            {{ form.question_text() }}\\\\n        </div>\\\\n        <div>\\\\n            {{ form.answer.label }}\\\\n            {{ form.answer() }}\\\\n        </div>\\\\n        <div>\\\\n            {{ form.difficulty_level.label }}\\\\n            {{ form.difficulty_level() }}\\\\n        </div>\\\\n        {{ form.submit() }}\\\\n    </form>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/quiz/edit_question.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n{% block content %}\\\\n    <h1>Edit Question for Quiz: {{ quiz.title }}</h1>\\\\n    <form method=\\\\\\\"POST\\\\\\\">\\\\n        {{ form.hidden_tag() }}\\\\n        <div>\\\\n            {{ form.question_text.label }}\\\\n            {{ form.question_text() }}\\\\n        </div>\\\\n        <div>\\\\n            {{ form.answer.label }}\\\\n            {{ form.answer() }}\\\\n        </div>\\\\n        <div>\\\\n            {{ form.difficulty_level.label }}\\\\n            {{ form.difficulty_level() }}\\\\n        </div>\\\\n        {{ form.submit() }}\\\\n    </form>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/quiz/edit.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n{% block content %}\\\\n    <h1>Edit Quiz: {{ quiz.title }}</h1>\\\\n    <a href=\\\\\\\"{{ url_for('quiz.add_question', quiz_id=quiz.id) }}\\\\\\\" class=\\\\\\\"btn btn-primary\\\\\\\">Add New Question</a>\\\\n    {% for question in questions %}\\\\n        <div>\\\\n            <h3>Question {{ loop.index }}</h3>\\\\n            <p>{{ question.question_text }}</p>\\\\n            <p>Answer: {{ question.answer }}</p>\\\\n            <p>Difficulty: {{ question.difficulty_level }}</p>\\\\n            <a href=\\\\\\\"{{ url_for('quiz.edit_question', quiz_id=quiz.id, question_id=question.id) }}\\\\\\\" class=\\\\\\\"btn btn-secondary\\\\\\\">Edit</a>\\\\n            <form action=\\\\\\\"{{ url_for('quiz.delete_question', quiz_id=quiz.id, question_id=question.id) }}\\\\\\\" method=\\\\\\\"POST\\\\\\\" style=\\\\\\\"display: inline;\\\\\\\">\\\\n                <input type=\\\\\\\"submit\\\\\\\" value=\\\\\\\"Delete\\\\\\\" class=\\\\\\\"btn btn-danger\\\\\\\" onclick=\\\\\\\"return confirm('Are you sure you want to delete this question?');\\\\\\\">\\\\n            </form>\\\\n        </div>\\\\n    {% endfor %}\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/main/home.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n\\\\n{% block content %}\\\\n<h1>Welcome to Book-Scan-Quizz</h1>\\\\n\\\\n{% if current_user.is_authenticated %}\\\\n    <p>Hello, {{ session['user']['first_name'] }}! Thanks for logging in with Google.</p>\\\\n    <p>Your email is: {{ session['user']['email'] }}</p>\\\\n    {% if session['user']['picture'] %}\\\\n        <img src=\\\\\\\"{{ session['user']['picture'] }}\\\\\\\" alt=\\\\\\\"Profile Picture\\\\\\\" style=\\\\\\\"width: 50px; height: 50px; border-radius: 50%;\\\\\\\">\\\\n    {% endif %}\\\\n{% else %}\\\\n    <p>This is the home page of our mobile-first website. Feel free to explore other pages using the navigation menu.</p>\\\\n    <p>You can log in using your Google account to access more features.</p>\\\\n{% endif %}\\\\n\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/main/about.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n\\\\n{% block title %}About - My Website{% endblock %}\\\\n\\\\n{% block content %}\\\\n<h1>About Us</h1>\\\\n<p>We are a company dedicated to creating amazing mobile-first websites. Our team of experts ensures that every project we undertake is responsive, user-friendly, and visually appealing.</p>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/templates/main/contact.html\\\",\\n      \\\"content\\\": \\\"{% extends \\\\\\\"base.html\\\\\\\" %}\\\\n\\\\n{% block title %}Contact - My Website{% endblock %}\\\\n\\\\n{% block content %}\\\\n<h1>Contact Us</h1>\\\\n<p>Get in touch with us for any inquiries or project discussions.</p>\\\\n<form>\\\\n    <div class=\\\\\\\"mb-3\\\\\\\">\\\\n        <label for=\\\\\\\"name\\\\\\\" class=\\\\\\\"form-label\\\\\\\">Name</label>\\\\n        <input type=\\\\\\\"text\\\\\\\" class=\\\\\\\"form-control\\\\\\\" id=\\\\\\\"name\\\\\\\" required>\\\\n    </div>\\\\n    <div class=\\\\\\\"mb-3\\\\\\\">\\\\n        <label for=\\\\\\\"email\\\\\\\" class=\\\\\\\"form-label\\\\\\\">Email</label>\\\\n        <input type=\\\\\\\"email\\\\\\\" class=\\\\\\\"form-control\\\\\\\" id=\\\\\\\"email\\\\\\\" required>\\\\n    </div>\\\\n    <div class=\\\\\\\"mb-3\\\\\\\">\\\\n        <label for=\\\\\\\"message\\\\\\\" class=\\\\\\\"form-label\\\\\\\">Message</label>\\\\n        <textarea class=\\\\\\\"form-control\\\\\\\" id=\\\\\\\"message\\\\\\\" rows=\\\\\\\"3\\\\\\\" required></textarea>\\\\n    </div>\\\\n    <button type=\\\\\\\"submit\\\\\\\" class=\\\\\\\"btn btn-primary\\\\\\\">Submit</button>\\\\n</form>\\\\n{% endblock %}\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/main/__init__.py\\\",\\n      \\\"content\\\": \\\"from flask import Blueprint\\\\n\\\\nmain = Blueprint('main', __name__)\\\\n\\\\nfrom . import routes, errors\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/main/errors.py\\\",\\n      \\\"content\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"app/main/routes.py\\\",\\n      \\\"content\\\": \\\"from flask import render_template\\\\nfrom . import main\\\\nfrom flask_login import current_user\\\\n\\\\n@main.route('/')\\\\ndef home():\\\\n    return render_template('main/home.html')\\\\n\\\\n@main.route('/about')\\\\ndef about():\\\\n    return render_template('main/about.html')\\\\n\\\\n@main.route('/contact')\\\\ndef contact():\\\\n    return render_template('main/contact.html')\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"tests/test_quiz.py\\\",\\n      \\\"content\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"tests/test_auth.py\\\",\\n      \\\"content\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"tests/__init__.py\\\",\\n      \\\"content\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"tests/test_transcribe.py\\\",\\n      \\\"content\\\": \\\"import unittest\\\\nimport os\\\\nfrom transcribe import transcribe_audio\\\\nfrom app import create_app\\\\nfrom config import config\\\\n\\\\n\\\\nclass TestTranscribe(unittest.TestCase):\\\\n    def setUp(self):\\\\n        self.app = create_app('testing')\\\\n        self.app_context = self.app.app_context()\\\\n        self.app_context.push()\\\\n\\\\n    def tearDown(self):\\\\n        self.app_context.pop()\\\\n\\\\n    def test_transcribe_file(self):\\\\n        # Get the absolute path to the test file using the app config\\\\n        test_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),\\\\n                                      \\\\\\\"..\\\\\\\",\\\\n                                      self.app.config['UPLOAD_FOLDER'],\\\\n                                      \\\\\\\"test_prompt.wav\\\\\\\")\\\\n\\\\n        # Ensure the test file exists\\\\n        self.assertTrue(os.path.exists(test_file_path), f\\\\\\\"Test file not found: {test_file_path}\\\\\\\")\\\\n\\\\n        result = transcribe_audio(test_file_path)\\\\n        print(result)\\\\n        self.assertIsInstance(result, str)\\\\n\\\\n\\\\nif __name__ == '__main__':\\\\n    unittest.main()\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"tests/test_main.py\\\",\\n      \\\"content\\\": \\\"\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"audio_uploads/test_prompt.wav\\\",\\n      \\\"content\\\": \\\"Error reading file: 'utf-8' codec can't decode byte 0x9f in position 4: invalid start byte\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"audio_uploads/test_german_1.wav\\\",\\n      \\\"content\\\": \\\"Error reading file: 'utf-8' codec can't decode byte 0x9f in position 4: invalid start byte\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\"instance/dev.sqlite\\\",\\n      \\\"content\\\": \\\"Error reading file: 'utf-8' codec can't decode byte 0xf8 in position 102: invalid start byte\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/dataSources.xml\\\",\\n      \\\"content\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n<project version=\\\\\\\"4\\\\\\\">\\\\n  <component name=\\\\\\\"DataSourceManagerImpl\\\\\\\" format=\\\\\\\"xml\\\\\\\" multifile-model=\\\\\\\"true\\\\\\\">\\\\n    <data-source source=\\\\\\\"LOCAL\\\\\\\" name=\\\\\\\"dev\\\\\\\" uuid=\\\\\\\"1fa8386b-743c-4a1c-bd62-c22020f5b709\\\\\\\">\\\\n      <driver-ref>sqlite.xerial</driver-ref>\\\\n      <synchronize>true</synchronize>\\\\n      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>\\\\n      <jdbc-url>jdbc:sqlite:E:\\\\\\\\source\\\\\\\\repos\\\\\\\\book-scan-quizz\\\\\\\\instance\\\\\\\\dev.sqlite</jdbc-url>\\\\n      <jdbc-additional-properties>\\\\n        <property name=\\\\\\\"com.intellij.clouds.kubernetes.db.enabled\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n      </jdbc-additional-properties>\\\\n      <working-dir>$ProjectFileDir$</working-dir>\\\\n      <libraries>\\\\n        <library>\\\\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/xerial/sqlite-jdbc/3.45.1.0/sqlite-jdbc-3.45.1.0.jar</url>\\\\n        </library>\\\\n        <library>\\\\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar</url>\\\\n        </library>\\\\n      </libraries>\\\\n    </data-source>\\\\n  </component>\\\\n</project>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/experiment-mobileweb.iml\\\",\\n      \\\"content\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n<module type=\\\\\\\"PYTHON_MODULE\\\\\\\" version=\\\\\\\"4\\\\\\\">\\\\n  <component name=\\\\\\\"Flask\\\\\\\">\\\\n    <option name=\\\\\\\"enabled\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"NewModuleRootManager\\\\\\\">\\\\n    <content url=\\\\\\\"file://$MODULE_DIR$\\\\\\\">\\\\n      <excludeFolder url=\\\\\\\"file://$MODULE_DIR$/.venv\\\\\\\" />\\\\n    </content>\\\\n    <orderEntry type=\\\\\\\"jdk\\\\\\\" jdkName=\\\\\\\"Python 3.12\\\\\\\" jdkType=\\\\\\\"Python SDK\\\\\\\" />\\\\n    <orderEntry type=\\\\\\\"sourceFolder\\\\\\\" forTests=\\\\\\\"false\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"TemplatesService\\\\\\\">\\\\n    <option name=\\\\\\\"TEMPLATE_CONFIGURATION\\\\\\\" value=\\\\\\\"Jinja2\\\\\\\" />\\\\n    <option name=\\\\\\\"TEMPLATE_FOLDERS\\\\\\\">\\\\n      <list>\\\\n        <option value=\\\\\\\"$MODULE_DIR$/templates\\\\\\\" />\\\\n      </list>\\\\n    </option>\\\\n  </component>\\\\n</module>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/dataSources.local.xml\\\",\\n      \\\"content\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n<project version=\\\\\\\"4\\\\\\\">\\\\n  <component name=\\\\\\\"dataSourceStorageLocal\\\\\\\" created-in=\\\\\\\"PY-233.14475.56\\\\\\\">\\\\n    <data-source name=\\\\\\\"dev\\\\\\\" uuid=\\\\\\\"1fa8386b-743c-4a1c-bd62-c22020f5b709\\\\\\\">\\\\n      <database-info product=\\\\\\\"\\\\\\\" version=\\\\\\\"\\\\\\\" jdbc-version=\\\\\\\"\\\\\\\" driver-name=\\\\\\\"\\\\\\\" driver-version=\\\\\\\"\\\\\\\" dbms=\\\\\\\"SQLITE\\\\\\\" />\\\\n      <schema-mapping />\\\\n    </data-source>\\\\n  </component>\\\\n</project>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/vcs.xml\\\",\\n      \\\"content\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n<project version=\\\\\\\"4\\\\\\\">\\\\n  <component name=\\\\\\\"VcsDirectoryMappings\\\\\\\">\\\\n    <mapping directory=\\\\\\\"$PROJECT_DIR$\\\\\\\" vcs=\\\\\\\"Git\\\\\\\" />\\\\n  </component>\\\\n</project>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/.gitignore\\\",\\n      \\\"content\\\": \\\"# Default ignored files\\\\n/shelf/\\\\n/workspace.xml\\\\n# Editor-based HTTP Client requests\\\\n/httpRequests/\\\\n# Datasource local storage ignored files\\\\n/dataSources/\\\\n/dataSources.local.xml\\\\n\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/workspace.xml\\\",\\n      \\\"content\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n<project version=\\\\\\\"4\\\\\\\">\\\\n  <component name=\\\\\\\"AutoImportSettings\\\\\\\">\\\\n    <option name=\\\\\\\"autoReloadType\\\\\\\" value=\\\\\\\"SELECTIVE\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"ChangeListManager\\\\\\\">\\\\n    <list default=\\\\\\\"true\\\\\\\" id=\\\\\\\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\\\\\\\" name=\\\\\\\"Changes\\\\\\\" comment=\\\\\\\"\\\\\\\">\\\\n      <change afterPath=\\\\\\\"$PROJECT_DIR$/export_structure.py\\\\\\\" afterDir=\\\\\\\"false\\\\\\\" />\\\\n    </list>\\\\n    <option name=\\\\\\\"SHOW_DIALOG\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n    <option name=\\\\\\\"HIGHLIGHT_CONFLICTS\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n    <option name=\\\\\\\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n    <option name=\\\\\\\"LAST_RESOLUTION\\\\\\\" value=\\\\\\\"IGNORE\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"FileTemplateManagerImpl\\\\\\\">\\\\n    <option name=\\\\\\\"RECENT_TEMPLATES\\\\\\\">\\\\n      <list>\\\\n        <option value=\\\\\\\"Python Script\\\\\\\" />\\\\n      </list>\\\\n    </option>\\\\n  </component>\\\\n  <component name=\\\\\\\"Git.Settings\\\\\\\">\\\\n    <option name=\\\\\\\"RECENT_GIT_ROOT_PATH\\\\\\\" value=\\\\\\\"$PROJECT_DIR$\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"MarkdownSettingsMigration\\\\\\\">\\\\n    <option name=\\\\\\\"stateVersion\\\\\\\" value=\\\\\\\"1\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"ProjectColorInfo\\\\\\\">{\\\\n  &quot;associatedIndex&quot;: 2\\\\n}</component>\\\\n  <component name=\\\\\\\"ProjectId\\\\\\\" id=\\\\\\\"2iIEhKaLBYBbFhtm0UxCg8yVGaW\\\\\\\" />\\\\n  <component name=\\\\\\\"ProjectViewState\\\\\\\">\\\\n    <option name=\\\\\\\"hideEmptyMiddlePackages\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n    <option name=\\\\\\\"showLibraryContents\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"PropertiesComponent\\\\\\\">{\\\\n  &quot;keyToString&quot;: {\\\\n    &quot;Flask server.Flask (app).executor&quot;: &quot;Run&quot;,\\\\n    &quot;Flask server.Flask.executor&quot;: &quot;Debug&quot;,\\\\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\\\\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\\\\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\\\\n    &quot;last_opened_file_path&quot;: &quot;/Users/almirkazazic/Documents/GitHub/book-scan-quizz&quot;,\\\\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\\\\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\\\\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\\\\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\\\\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\\\\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\\\\n  }\\\\n}</component>\\\\n  <component name=\\\\\\\"RunManager\\\\\\\">\\\\n    <configuration name=\\\\\\\"Flask (app)\\\\\\\" type=\\\\\\\"Python.FlaskServer\\\\\\\">\\\\n      <option name=\\\\\\\"flaskDebug\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n      <module name=\\\\\\\"experiment-mobileweb\\\\\\\" />\\\\n      <option name=\\\\\\\"target\\\\\\\" value=\\\\\\\"$PROJECT_DIR$/app\\\\\\\" />\\\\n      <option name=\\\\\\\"targetType\\\\\\\" value=\\\\\\\"PATH\\\\\\\" />\\\\n      <option name=\\\\\\\"ENV_FILES\\\\\\\" value=\\\\\\\"\\\\\\\" />\\\\n      <option name=\\\\\\\"INTERPRETER_OPTIONS\\\\\\\" value=\\\\\\\"\\\\\\\" />\\\\n      <option name=\\\\\\\"PARENT_ENVS\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n      <option name=\\\\\\\"SDK_HOME\\\\\\\" value=\\\\\\\"$USER_HOME$/PycharmProjects/first/.venv/bin/python\\\\\\\" />\\\\n      <option name=\\\\\\\"SDK_NAME\\\\\\\" value=\\\\\\\"Python 3.12 (first)\\\\\\\" />\\\\n      <option name=\\\\\\\"WORKING_DIRECTORY\\\\\\\" value=\\\\\\\"$PROJECT_DIR$\\\\\\\" />\\\\n      <option name=\\\\\\\"IS_MODULE_SDK\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n      <option name=\\\\\\\"ADD_CONTENT_ROOTS\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n      <option name=\\\\\\\"ADD_SOURCE_ROOTS\\\\\\\" value=\\\\\\\"true\\\\\\\" />\\\\n      <EXTENSION ID=\\\\\\\"PythonCoverageRunConfigurationExtension\\\\\\\" runner=\\\\\\\"coverage.py\\\\\\\" />\\\\n      <EXTENSION ID=\\\\\\\"net.ashald.envfile\\\\\\\">\\\\n        <option name=\\\\\\\"IS_ENABLED\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n        <option name=\\\\\\\"IS_SUBST\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n        <option name=\\\\\\\"IS_PATH_MACRO_SUPPORTED\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n        <option name=\\\\\\\"IS_IGNORE_MISSING_FILES\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n        <option name=\\\\\\\"IS_ENABLE_EXPERIMENTAL_INTEGRATIONS\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n        <ENTRIES>\\\\n          <ENTRY IS_ENABLED=\\\\\\\"true\\\\\\\" PARSER=\\\\\\\"runconfig\\\\\\\" IS_EXECUTABLE=\\\\\\\"false\\\\\\\" />\\\\n        </ENTRIES>\\\\n      </EXTENSION>\\\\n      <option name=\\\\\\\"launchJavascriptDebuger\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n      <method v=\\\\\\\"2\\\\\\\" />\\\\n    </configuration>\\\\n  </component>\\\\n  <component name=\\\\\\\"SharedIndexes\\\\\\\">\\\\n    <attachedChunks>\\\\n      <set>\\\\n        <option value=\\\\\\\"bundled-python-sdk-d68999036c7f-b11f5e8da5ad-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.14475.56\\\\\\\" />\\\\n      </set>\\\\n    </attachedChunks>\\\\n  </component>\\\\n  <component name=\\\\\\\"SpellCheckerSettings\\\\\\\" RuntimeDictionaries=\\\\\\\"0\\\\\\\" Folders=\\\\\\\"0\\\\\\\" CustomDictionaries=\\\\\\\"0\\\\\\\" DefaultDictionary=\\\\\\\"application-level\\\\\\\" UseSingleDictionary=\\\\\\\"true\\\\\\\" transferred=\\\\\\\"true\\\\\\\" />\\\\n  <component name=\\\\\\\"TaskManager\\\\\\\">\\\\n    <task active=\\\\\\\"true\\\\\\\" id=\\\\\\\"Default\\\\\\\" summary=\\\\\\\"Default task\\\\\\\">\\\\n      <changelist id=\\\\\\\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\\\\\\\" name=\\\\\\\"Changes\\\\\\\" comment=\\\\\\\"\\\\\\\" />\\\\n      <created>1719169808821</created>\\\\n      <option name=\\\\\\\"number\\\\\\\" value=\\\\\\\"Default\\\\\\\" />\\\\n      <option name=\\\\\\\"presentableId\\\\\\\" value=\\\\\\\"Default\\\\\\\" />\\\\n      <updated>1719169808821</updated>\\\\n      <workItem from=\\\\\\\"1719169810018\\\\\\\" duration=\\\\\\\"6133000\\\\\\\" />\\\\n      <workItem from=\\\\\\\"1719575605919\\\\\\\" duration=\\\\\\\"148000\\\\\\\" />\\\\n    </task>\\\\n    <servers />\\\\n  </component>\\\\n  <component name=\\\\\\\"TypeScriptGeneratedFilesManager\\\\\\\">\\\\n    <option name=\\\\\\\"version\\\\\\\" value=\\\\\\\"3\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"XDebuggerManager\\\\\\\">\\\\n    <breakpoint-manager>\\\\n      <breakpoints>\\\\n        <line-breakpoint enabled=\\\\\\\"true\\\\\\\" suspend=\\\\\\\"THREAD\\\\\\\" type=\\\\\\\"python-line\\\\\\\">\\\\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\\\\n          <line>25</line>\\\\n          <option name=\\\\\\\"timeStamp\\\\\\\" value=\\\\\\\"1\\\\\\\" />\\\\n        </line-breakpoint>\\\\n        <line-breakpoint enabled=\\\\\\\"true\\\\\\\" suspend=\\\\\\\"THREAD\\\\\\\" type=\\\\\\\"python-line\\\\\\\">\\\\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\\\\n          <line>15</line>\\\\n          <option name=\\\\\\\"timeStamp\\\\\\\" value=\\\\\\\"2\\\\\\\" />\\\\n        </line-breakpoint>\\\\n      </breakpoints>\\\\n    </breakpoint-manager>\\\\n  </component>\\\\n  <component name=\\\\\\\"com.intellij.coverage.CoverageDataManagerImpl\\\\\\\">\\\\n    <SUITE FILE_PATH=\\\\\\\"coverage/book_scan_quizz$Flask.coverage\\\\\\\" NAME=\\\\\\\"Flask (app) Coverage Results\\\\\\\" MODIFIED=\\\\\\\"1719178837235\\\\\\\" SOURCE_PROVIDER=\\\\\\\"com.intellij.coverage.DefaultCoverageFileProvider\\\\\\\" RUNNER=\\\\\\\"coverage.py\\\\\\\" COVERAGE_BY_TEST_ENABLED=\\\\\\\"true\\\\\\\" COVERAGE_TRACING_ENABLED=\\\\\\\"false\\\\\\\" WORKING_DIRECTORY=\\\\\\\"$PROJECT_DIR$\\\\\\\" />\\\\n  </component>\\\\n</project>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/modules.xml\\\",\\n      \\\"content\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n<project version=\\\\\\\"4\\\\\\\">\\\\n  <component name=\\\\\\\"ProjectModuleManager\\\\\\\">\\\\n    <modules>\\\\n      <module fileurl=\\\\\\\"file://$PROJECT_DIR$/.idea/experiment-mobileweb.iml\\\\\\\" filepath=\\\\\\\"$PROJECT_DIR$/.idea/experiment-mobileweb.iml\\\\\\\" />\\\\n    </modules>\\\\n  </component>\\\\n</project>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/misc.xml\\\",\\n      \\\"content\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n<project version=\\\\\\\"4\\\\\\\">\\\\n  <component name=\\\\\\\"Black\\\\\\\">\\\\n    <option name=\\\\\\\"sdkName\\\\\\\" value=\\\\\\\"Python 3.11 (experiment-mobileweb)\\\\\\\" />\\\\n  </component>\\\\n  <component name=\\\\\\\"ProjectRootManager\\\\\\\" version=\\\\\\\"2\\\\\\\" project-jdk-name=\\\\\\\"Python 3.12\\\\\\\" project-jdk-type=\\\\\\\"Python SDK\\\\\\\" />\\\\n</project>\\\"\\n    },\\n    {\\n      \\\"path\\\": \\\".idea/inspectionProfiles/profiles_settings.xml\\\",\\n      \\\"content\\\": \\\"<component name=\\\\\\\"InspectionProjectProfileManager\\\\\\\">\\\\n  <settings>\\\\n    <option name=\\\\\\\"USE_PROJECT_PROFILE\\\\\\\" value=\\\\\\\"false\\\\\\\" />\\\\n    <version value=\\\\\\\"1.0\\\\\\\" />\\\\n  </settings>\\\\n</component>\\\"\\n    }\\n  ]\\n}\"\n    },\n    {\n      \"path\": \".env\",\n      \"content\": \"GOOGLE_CLIENT_ID=792066325521-dgtt0c4cp36nace09o3fcslflh9m4s4h.apps.googleusercontent.com\\nGOOGLE_CLIENT_SECRET=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\\nFLASK_CONFIG=development\\nSECRET_KEY=your_secret_key_here\\nDEV_DATABASE_URL=sqlite:///dev.sqlite\\nTEST_DATABASE_URL=sqlite:///test.sqlite\\nDATABASE_URL=postgresql://user:password@localhost/dbname\"\n    },\n    {\n      \"path\": \"transcribe.py\",\n      \"content\": \"\\nimport google.generativeai as genai\\nfrom flask import current_app\\n\\n\\n#os.environ[\\\"GEMINI_API_KEY\\\"] = \\\"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\\\"\\n# genai.configure(api_key=os.environ[\\\"GEMINI_API_KEY\\\"])\\n\\n\\ndef transcribe_file(file_path: str) -> str:\\n    \\\"\\\"\\\"\\n    Transcribe the audio file at the given path.\\n\\n    :param file_path: Path to the audio file\\n    :return: Transcribed text\\n    \\\"\\\"\\\"\\n    # Placeholder implementation\\n    return \\\"Hello World! This is a placeholder transcription.\\\"\\n\\n\\n\\n\\\"\\\"\\\"\\nInstall the Google AI Python SDK\\n\\n$ pip install google-generativeai\\n\\nSee the getting started guide for more information:\\nhttps://ai.google.dev/gemini-api/docs/get-started/python\\n\\\"\\\"\\\"\\n\\n\\n\\n\\ndef upload_to_gemini(path, mime_type=\\\"audio/wav\\\"):\\n  \\\"\\\"\\\"Uploads the given file to Gemini.\\n\\n  See https://ai.google.dev/gemini-api/docs/prompting_with_media\\n  \\\"\\\"\\\"\\n  file = genai.upload_file(path, mime_type=mime_type)\\n  print(f\\\"Uploaded file '{file.display_name}' as: {file.uri}\\\")\\n  return file\\n\\ndef transcribe_audio(audio_path: str, mime_type=\\\"audio/wav\\\") -> str:\\n  genai.configure(api_key=current_app.config['GEMINI_API_KEY'])\\n  # See https://ai.google.dev/api/python/google/generativeai/GenerativeModel\\n  generation_config = {\\n    \\\"temperature\\\": 1,\\n    \\\"top_p\\\": 0.95,\\n    \\\"top_k\\\": 64,\\n    \\\"max_output_tokens\\\": 8192,\\n    \\\"response_mime_type\\\": \\\"text/plain\\\",\\n  }\\n\\n  model = genai.GenerativeModel(\\n    model_name=\\\"gemini-1.5-flash\\\",\\n    generation_config=generation_config,\\n    # safety_settings = Adjust safety settings\\n    # See https://ai.google.dev/gemini-api/docs/safety-settings\\n  )\\n\\n  # TODO Make these files available on the local file system\\n  # You may need to update the file paths\\n  # files = [\\n  #   upload_to_gemini(audio_path, mime_type=mime_type),\\n  # ]\\n  file = upload_to_gemini(audio_path, mime_type=mime_type)\\n\\n  chat_session = model.start_chat(\\n    history=[\\n      {\\n        \\\"role\\\": \\\"user\\\",\\n        \\\"parts\\\": [file],\\n      },\\n    ]\\n  )\\n\\n  response = chat_session.send_message(\\\"give a short summary of the file\\\")\\n\\n  print(response.text)\\n  return response.text\"\n    },\n    {\n      \"path\": \"create_structure.py\",\n      \"content\": \"import os\\n\\n\\ndef create_directory_structure():\\n    base_dir = '.'\\n\\n    # Create main directory structure\\n    directories = [\\n        '',\\n        'app',\\n        'app/main',\\n        'app/auth',\\n        'app/quiz',\\n        'app/models',\\n        'app/static',\\n        'app/templates',\\n        'tests'\\n    ]\\n\\n    for directory in directories:\\n        os.makedirs(os.path.join(base_dir, directory), exist_ok=True)\\n\\n    # Create files\\n    files = [\\n        'app/__init__.py',\\n        'app/main/__init__.py',\\n        'app/main/routes.py',\\n        'app/main/errors.py',\\n        'app/auth/__init__.py',\\n        'app/auth/routes.py',\\n        'app/quiz/__init__.py',\\n        'app/quiz/routes.py',\\n        'app/models/__init__.py',\\n        'app/utils.py',\\n        'tests/__init__.py',\\n        'tests/test_main.py',\\n        'tests/test_auth.py',\\n        'tests/test_quiz.py',\\n        'config.py',\\n        'run.py',\\n        'requirements.txt'\\n    ]\\n\\n    for file in files:\\n        open(os.path.join(base_dir, file), 'a').close()\\n\\n    print(\\\"Directory structure created successfully!\\\")\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    create_directory_structure()\"\n    },\n    {\n      \"path\": \"export_structure.py\",\n      \"content\": \"import os\\nimport json\\n\\n\\ndef should_exclude(path):\\n    exclude_dirs = {'.venv', 'venv', '__pycache__', 'node_modules', '.git', 'audio_uploads'}\\n    exclude_extensions = {'.pyc', '.pyo', '.pyd', '.db', '.sqlite3'}\\n\\n    parts = path.split(os.sep)\\n    if any(part in exclude_dirs for part in parts):\\n        return True\\n\\n    _, ext = os.path.splitext(path)\\n    return ext.lower() in exclude_extensions\\n\\n\\ndef read_file_content(file_path):\\n    try:\\n        with open(file_path, 'r', encoding='utf-8') as file:\\n            return file.read()\\n    except Exception as e:\\n        return f\\\"Error reading file: {str(e)}\\\"\\n\\n\\ndef explore_directory(directory):\\n    structure = []\\n    for root, dirs, files in os.walk(directory):\\n        for file in files:\\n            file_path = os.path.join(root, file)\\n            if not should_exclude(file_path):\\n                relative_path = os.path.relpath(file_path, directory)\\n                structure.append({\\n                    'path': relative_path,\\n                    'content': read_file_content(file_path)\\n                })\\n    return structure\\n\\n\\ndef export_project_structure(root_dir='.'):\\n    project_structure = explore_directory(root_dir)\\n    output = {\\n        'project_structure': project_structure\\n    }\\n\\n    with open('project_structure.json', 'w', encoding='utf-8') as f:\\n        json.dump(output, f, indent=2)\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    export_project_structure()\\n    print(\\\"Project structure exported to project_structure.json\\\")\"\n    },\n    {\n      \"path\": \"app/__init__.py\",\n      \"content\": \"import logging\\nimport os\\n\\nfrom flask import Flask\\nfrom flask_login import LoginManager\\nfrom flask_sqlalchemy import SQLAlchemy\\n\\nfrom config import config\\nfrom .utils import init_oauth, oauth\\n\\ndb = SQLAlchemy()\\nlogin_manager = LoginManager()\\n\\n\\ndef create_app(config_name=None):\\n    app = Flask(__name__)\\n\\n    if config_name is None:\\n        config_name = os.getenv('FLASK_CONFIG', 'default')\\n\\n    app.config.from_object(config[config_name])\\n    config[config_name].init_app(app)\\n\\n    db.init_app(app)\\n\\n    if app.config['SQLALCHEMY_ECHO']:\\n        # Set up SQLAlchemy query logging\\n        logging.basicConfig()\\n        logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\\n\\n    login_manager.init_app(app)\\n    init_oauth(app)\\n\\n    from .models.user import User\\n\\n    @login_manager.user_loader\\n    def load_user(user_id):\\n        return User.query.get(user_id)\\n\\n    # Register blueprints\\n    from .main import main as main_blueprint\\n    app.register_blueprint(main_blueprint)\\n\\n    from .auth import auth as auth_blueprint\\n    app.register_blueprint(auth_blueprint, url_prefix='/auth')\\n\\n    from .answer import answer as quiz_blueprint\\n    app.register_blueprint(quiz_blueprint, url_prefix='/answer')\\n\\n    from .quiz import quiz as quiz_blueprint\\n    app.register_blueprint(quiz_blueprint, url_prefix='/quiz')\\n\\n    # Import and register the init-db command\\n    from .cli import init_db_command\\n    app.cli.add_command(init_db_command)\\n\\n    return app\\n\"\n    },\n    {\n      \"path\": \"app/cli.py\",\n      \"content\": \"import click\\nfrom flask.cli import with_appcontext\\nfrom flask import current_app\\nfrom . import db\\nimport os\\nfrom sqlalchemy import inspect\\n\\n\\n@click.command('init-db')\\n@with_appcontext\\ndef init_db_command():\\n    \\\"\\\"\\\"Clear the existing data and create new tables.\\\"\\\"\\\"\\n    db.create_all()\\n\\n    # Print all tables that SQLAlchemy is aware of\\n    inspector = inspect(db.engine)\\n    tables = inspector.get_table_names()\\n    click.echo(f\\\"Tables created: {', '.join(tables)}\\\")\\n\\n    db_uri = current_app.config['SQLALCHEMY_DATABASE_URI']\\n    if db_uri.startswith('sqlite:///'):\\n        db_path = db_uri.replace('sqlite:///', '')\\n        if not os.path.isabs(db_path):\\n            db_path = os.path.join(current_app.instance_path, db_path)\\n        click.echo(f\\\"SQLite database location: {os.path.abspath(db_path)}\\\")\\n    else:\\n        click.echo(f\\\"Database URI: {db_uri}\\\")\"\n    },\n    {\n      \"path\": \"app/utils.py\",\n      \"content\": \"from authlib.integrations.flask_client import OAuth\\n\\noauth = OAuth()\\n\\n\\ndef init_oauth(app):\\n    oauth.init_app(app)\\n    oauth.register(\\n        name='google',\\n        client_id=app.config['GOOGLE_CLIENT_ID'],\\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\\n        #client_kwargs={'scope': 'email'},\\n        client_kwargs={'scope': 'openid email profile'}\\n    )\\n\\n\\n\\n\"\n    },\n    {\n      \"path\": \"app/answer/__init__.py\",\n      \"content\": \"from flask import Blueprint\\n\\nanswer = Blueprint('answer', __name__)\\n\\nfrom . import routes\"\n    },\n    {\n      \"path\": \"app/answer/routes.py\",\n      \"content\": \"from flask import render_template, request, jsonify, current_app\\nfrom werkzeug.utils import secure_filename\\nfrom datetime import datetime\\nfrom transcribe import transcribe_audio\\nfrom . import answer\\nimport os\\n\\n@answer.route('/')\\ndef index():\\n    return render_template('answer/index.html')\\n\\ndef generate_timestamp_filename(original_filename):\\n    # Get current timestamp with milliseconds\\n    timestamp = datetime.now().strftime(\\\"%Y%m%d-%H%M%S-%f\\\")\\n    # Get the file extension\\n    _, file_extension = os.path.splitext(original_filename)\\n    # Create new filename\\n    return f\\\"{timestamp}{file_extension}\\\"\\n\\n\\n@answer.route('/evaluate_audio', methods=['POST'])\\ndef evaluate_audio():\\n    try:\\n        if 'audio' not in request.files:\\n            return jsonify({'error': 'No audio file provided'}), 400\\n\\n        audio_file = request.files['audio']\\n\\n        if audio_file.filename == '':\\n            return jsonify({'error': 'No selected file'}), 400\\n\\n        if audio_file:\\n            # Generate a new filename based on current timestamp\\n            new_filename = generate_timestamp_filename(audio_file.filename)\\n\\n            # Secure the filename\\n            secure_name = secure_filename(new_filename)\\n\\n            # Define the path where you want to save the file\\n            save_path = os.path.join(current_app.config['UPLOAD_FOLDER'], secure_name)\\n\\n            # Save the file\\n            audio_file.save(save_path)\\n\\n            # Now pass the saved file path to your transcribe_audio function\\n            result = transcribe_audio(save_path)\\n\\n            # You might want to store the filename in your database here\\n\\n            return jsonify({'result': result, 'filename': secure_name})\\n        else:\\n            return jsonify({'error': 'Invalid file'}), 400\\n\\n    except Exception as e:\\n        current_app.logger.error(f\\\"Error in evaluate_audio: {str(e)}\\\")\\n        return jsonify({'error': f'An error occurred while processing the audio: {str(e)}'}), 500\"\n    },\n    {\n      \"path\": \"app/auth/__init__.py\",\n      \"content\": \"from flask import Blueprint\\n\\nauth = Blueprint('auth', __name__)\\n\\nfrom . import routes\"\n    },\n    {\n      \"path\": \"app/auth/routes.py\",\n      \"content\": \"from flask import redirect, url_for, flash, session\\nfrom flask_login import login_user, logout_user, current_user\\n\\nfrom . import auth\\nfrom ..models import User\\nfrom ..utils import oauth\\n\\n\\n@auth.route('/login')\\ndef login():\\n    return oauth.google.authorize_redirect(url_for('auth.authorized', _external=True))\\n\\n\\n@auth.route('/logout')\\ndef logout():\\n    if current_user.is_authenticated:\\n        logout_user()\\n    session.clear()  # This clears all session data\\n    flash('You have been logged out.', 'danger')\\n    return redirect(url_for('main.home'))\\n\\n\\n@auth.route('/login/authorized')\\ndef authorized():\\n    try:\\n        token = oauth.google.authorize_access_token()\\n        user_info = token.get('userinfo')\\n\\n        if user_info:\\n            user = User.get_or_create(\\n                email=user_info['email'],\\n                first_name=user_info.get('given_name'),\\n                last_name=user_info.get('family_name'),\\n                picture=user_info.get('picture')\\n            )\\n            login_user(user)\\n            session['user'] = user.to_dict()  # Store all user info in session\\n            flash('Logged in successfully.', 'success')\\n        else:\\n            flash('Failed to get user info from Google.', 'danger')\\n\\n        return redirect(url_for('main.home'))\\n    except Exception as e:\\n        flash(f'An error occurred: {str(e)}', 'danger')\\n        return redirect(url_for('main.home'))\\n\"\n    },\n    {\n      \"path\": \"app/quiz/__init__.py\",\n      \"content\": \"from flask import Blueprint\\n\\nquiz = Blueprint('quiz', __name__)\\n\\nfrom . import routes\"\n    },\n    {\n      \"path\": \"app/quiz/forms.py\",\n      \"content\": \"from flask_wtf import FlaskForm\\nfrom wtforms import StringField, SubmitField, MultipleFileField, IntegerField\\nfrom wtforms.validators import DataRequired , NumberRange\\nfrom flask_wtf.file import FileAllowed\\n\\nclass CreateQuizForm(FlaskForm):\\n    title = StringField('Quiz Title', validators=[DataRequired()])\\n    images = MultipleFileField('Upload Images', validators=[\\n        FileAllowed(['jpg', 'png'], 'Images only!')\\n    ])\\n    submit = SubmitField('Create Quiz')\\n\\nclass EditQuestionForm(FlaskForm):\\n    # Add fields for editing questions\\n    pass\\n\\nclass QuestionForm(FlaskForm):\\n    question_text = StringField('Question', validators=[DataRequired()])\\n    answer = StringField('Answer', validators=[DataRequired()])\\n    difficulty_level = IntegerField('Difficulty Level', validators=[NumberRange(min=1, max=10)])\\n    submit = SubmitField('Save Question')\"\n    },\n    {\n      \"path\": \"app/quiz/routes.py\",\n      \"content\": \"from flask import render_template, redirect, url_for, flash, request, abort, current_app\\nfrom flask_login import login_required, current_user\\nfrom . import quiz\\nfrom .forms import CreateQuizForm, QuestionForm, EditQuestionForm\\nfrom .. import db\\nfrom ..models import Quiz, Question, PageScan\\nfrom werkzeug.utils import secure_filename\\nimport os\\n\\n\\n@quiz.route('/')\\n@login_required\\ndef index():\\n    user_quizzes = Quiz.query.filter_by(user_owner_id=current_user.id).all()\\n    return render_template('quiz/index.html', quizzes=user_quizzes)\\n\\n\\n@quiz.route('/create', methods=['GET', 'POST'])\\n@login_required\\ndef create():\\n    form = CreateQuizForm()\\n    if form.validate_on_submit():\\n        quiz = Quiz(title=form.title.data, user_owner_id=current_user.id)\\n        db.session.add(quiz)\\n        db.session.flush()  # To get the quiz id\\n\\n        for image in request.files.getlist('images'):\\n            if image:\\n                filename = secure_filename(image.filename)\\n                image.save(os.path.join(current_app.config['UPLOAD_FOLDER'], filename))\\n                page_scan = PageScan(quiz_id=quiz.id, file_name=filename)\\n                db.session.add(page_scan)\\n\\n        db.session.commit()\\n        flash('Quiz created successfully!', 'success')\\n        return redirect(url_for('quiz.index'))\\n    return render_template('quiz/create.html', form=form)\\n\\n\\n@quiz.route('/<quiz_id>/edit', methods=['GET', 'POST'])\\n@login_required\\ndef edit(quiz_id):\\n    quiz = Quiz.query.get_or_404(quiz_id)\\n    if quiz.user_owner_id != current_user.id:\\n        flash('You do not have permission to edit this quiz.', 'danger')\\n        return redirect(url_for('quiz.index'))\\n\\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\\n    form = EditQuestionForm()\\n\\n    if form.validate_on_submit():\\n        # Logic to save edited questions\\n        pass\\n\\n    return render_template('quiz/edit.html', quiz=quiz, questions=questions, form=form)\\n\\n\\n@quiz.route('/<quiz_id>/answer')\\n@login_required\\ndef answer(quiz_id):\\n    quiz = Quiz.query.get_or_404(quiz_id)\\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\\n    return render_template('quiz/answer.html', quiz=quiz, questions=questions)\\n\\n\\n@quiz.route('/<quiz_id>/add_question', methods=['GET', 'POST'])\\n@login_required\\ndef add_question(quiz_id):\\n    quiz = Quiz.query.get_or_404(quiz_id)\\n    if quiz.user_owner_id != current_user.id:\\n        abort(403)\\n\\n    form = QuestionForm()\\n    if form.validate_on_submit():\\n        question = Question(\\n            quiz_id=quiz_id,\\n            question_text=form.question_text.data,\\n            answer=form.answer.data,\\n            difficulty_level=form.difficulty_level.data\\n        )\\n        db.session.add(question)\\n        db.session.commit()\\n        flash('Question added successfully!', 'success')\\n        return redirect(url_for('quiz.edit', quiz_id=quiz_id))\\n\\n    return render_template('quiz/add_question.html', form=form, quiz=quiz)\\n\\n\\n@quiz.route('/<quiz_id>/edit_question/<question_id>', methods=['GET', 'POST'])\\n@login_required\\ndef edit_question(quiz_id, question_id):\\n    quiz = Quiz.query.get_or_404(quiz_id)\\n    question = Question.query.get_or_404(question_id)\\n    if quiz.user_owner_id != current_user.id or question.quiz_id != quiz_id:\\n        abort(403)\\n\\n    form = QuestionForm(obj=question)\\n    if form.validate_on_submit():\\n        form.populate_obj(question)\\n        db.session.commit()\\n        flash('Question updated successfully!', 'success')\\n        return redirect(url_for('quiz.edit', quiz_id=quiz_id))\\n\\n    return render_template('quiz/edit_question.html', form=form, quiz=quiz, question=question)\\n\\n\\n@quiz.route('/<quiz_id>/delete_question/<question_id>', methods=['POST'])\\n@login_required\\ndef delete_question(quiz_id, question_id):\\n    quiz = Quiz.query.get_or_404(quiz_id)\\n    question = Question.query.get_or_404(question_id)\\n    if quiz.user_owner_id != current_user.id or question.quiz_id != quiz_id:\\n        abort(403)\\n\\n    db.session.delete(question)\\n    db.session.commit()\\n    flash('Question deleted successfully!', 'success')\\n    return redirect(url_for('quiz.edit', quiz_id=quiz_id))\"\n    },\n    {\n      \"path\": \"app/models/user.py\",\n      \"content\": \"import logging\\nimport uuid\\n\\nfrom flask_login import UserMixin\\nfrom sqlalchemy import Column, String\\n\\nfrom .. import db\\n\\n\\nclass User(UserMixin, db.Model):\\n    __tablename__ = 'user'\\n\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\n    email = Column(String(255), unique=True, nullable=False)\\n    first_name = Column(String(255))\\n    last_name = Column(String(255))\\n    picture = Column(String(255))\\n\\n    quizzes = db.relationship(\\\"Quiz\\\", back_populates=\\\"owner\\\")\\n    answers = db.relationship(\\\"Answer\\\", back_populates=\\\"user\\\")\\n\\n    def __init__(self, email, first_name=None, last_name=None, picture=None):\\n        self.email = email\\n        self.first_name = first_name\\n        self.last_name = last_name\\n        self.picture = picture\\n\\n    @staticmethod\\n    def get(email):\\n        return User.query.filter_by(email=email).first()\\n\\n    @staticmethod\\n    def create(email, first_name=None, last_name=None, picture=None):\\n        user = User(email=email, first_name=first_name, last_name=last_name, picture=picture)\\n        db.session.add(user)\\n        db.session.commit()\\n        logging.info(f\\\"Created new user with email: {email}\\\")\\n        return user\\n\\n    @staticmethod\\n    def get_or_create(email, first_name=None, last_name=None, picture=None):\\n        user = User.get(email)\\n        if user is None:\\n            user = User.create(email, first_name, last_name, picture)\\n        else:\\n            user.update(first_name, last_name, picture)\\n        return user\\n\\n    def update(self, first_name=None, last_name=None, picture=None):\\n        if first_name is not None:\\n            self.first_name = first_name\\n        if last_name is not None:\\n            self.last_name = last_name\\n        if picture is not None:\\n            self.picture = picture\\n        db.session.commit()\\n        logging.info(f\\\"Updated user information for email: {self.email}\\\")\\n\\n    def to_dict(self):\\n        return {\\n            'id': self.id,\\n            'email': self.email,\\n            'first_name': self.first_name,\\n            'last_name': self.last_name,\\n            'picture': self.picture\\n        }\\n\\n    @staticmethod\\n    def from_dict(data):\\n        return User.get_or_create(\\n            email=data.get('email'),\\n            first_name=data.get('first_name'),\\n            last_name=data.get('last_name'),\\n            picture=data.get('picture')\\n        )\\n\"\n    },\n    {\n      \"path\": \"app/models/models.py\",\n      \"content\": \"import uuid\\n\\nfrom sqlalchemy import Column, String, DateTime, ForeignKey, func\\nfrom sqlalchemy.orm import relationship\\n\\nfrom .. import db\\n\\n\\nclass Quiz(db.Model):\\n    __tablename__ = 'quiz'\\n\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\n    user_owner_id = Column(String(36), ForeignKey('user.id'))\\n    title = Column(String(255))\\n    created_date = Column(DateTime, default=func.now())\\n\\n    owner = relationship(\\\"User\\\", back_populates=\\\"quizzes\\\")\\n    questions = relationship(\\\"Question\\\", back_populates=\\\"quiz\\\")\\n    page_scans = relationship(\\\"PageScan\\\", back_populates=\\\"quiz\\\")\\n\\n\\nclass Question(db.Model):\\n    __tablename__ = 'question'\\n\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\\n    page_scan_id = Column(String(36), ForeignKey('page_scan.id'))\\n    question_text = Column(String(1000))\\n    answer = Column(String(1000))\\n    difficulty_level = Column(db.Integer)\\n\\n    quiz = relationship(\\\"Quiz\\\", back_populates=\\\"questions\\\")\\n    page_scan = relationship(\\\"PageScan\\\", back_populates=\\\"questions\\\")\\n\\n\\nclass Answer(db.Model):\\n    __tablename__ = 'answer'\\n\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\n    user_id = Column(String(36), ForeignKey('user.id'))\\n    answer_text = Column(String(1000))\\n    audio_file_name = Column(String(255))\\n    date = Column(DateTime, default=func.now())\\n    feedback = Column(String(1000))\\n    correctness = Column(db.Float)\\n    completeness = Column(db.Float)\\n\\n    user = relationship(\\\"User\\\", back_populates=\\\"answers\\\")\\n\\n\\nclass PageScan(db.Model):\\n    __tablename__ = 'page_scan'\\n\\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\\n    page_position = Column(db.Integer)\\n    file_name = Column(String(255))\\n    created_date = Column(DateTime, default=func.now())\\n\\n    quiz = relationship(\\\"Quiz\\\", back_populates=\\\"page_scans\\\")\\n    questions = relationship(\\\"Question\\\", back_populates=\\\"page_scan\\\")\\n\"\n    },\n    {\n      \"path\": \"app/models/__init__.py\",\n      \"content\": \"from .user import User\\nfrom .models import Quiz, Question, Answer, PageScan\"\n    },\n    {\n      \"path\": \"app/templates/navbar.html\",\n      \"content\": \"<nav class=\\\"navbar navbar-expand-lg navbar-light bg-light fixed-top\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <a class=\\\"navbar-brand\\\" href=\\\"{{ url_for('main.home') }}\\\">My Website</a>\\n        <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-bs-toggle=\\\"collapse\\\" data-bs-target=\\\"#navbarNav\\\"\\n                aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n            <span class=\\\"navbar-toggler-icon\\\"></span>\\n        </button>\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\n            <ul class=\\\"navbar-nav me-auto\\\">\\n                <li class=\\\"nav-item\\\">\\n                    <a class=\\\"nav-link {% if active_page == 'home' %}active{% endif %}\\\"\\n                       href=\\\"{{ url_for('main.home') }}\\\">Home</a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a class=\\\"nav-link {% if active_page == 'about' %}active{% endif %}\\\"\\n                       href=\\\"{{ url_for('main.about') }}\\\">About</a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a class=\\\"nav-link {% if active_page == 'quiz.index' %}active{% endif %}\\\"\\n                       href=\\\"{{ url_for('quiz.index') }}\\\">Quiz</a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a class=\\\"nav-link {% if active_page == 'services' %}active{% endif %}\\\"\\n                       href=\\\"{{ url_for('answer.index') }}\\\">Answer</a>\\n                </li>\\n                <li class=\\\"nav-item\\\">\\n                    <a class=\\\"nav-link {% if active_page == 'contact' %}active{% endif %}\\\"\\n                       href=\\\"{{ url_for('main.contact') }}\\\">Contact</a>\\n                </li>\\n            </ul>\\n            <ul class=\\\"navbar-nav\\\">\\n                {% if current_user.is_authenticated %}\\n                    <li class=\\\"nav-item\\\">\\n                        {% if current_user.picture %}\\n                            <img src=\\\"{{ current_user.picture }}\\\" alt=\\\"Profile\\\" class=\\\"rounded-circle\\\"\\n                                 style=\\\"width: 24px; height: 24px; object-fit: cover;\\\">\\n                        {% endif %}\\n                        <span class=\\\"navbar-text me-3\\\">{{ session['user']['first_name'] }}</span>\\n                    </li>\\n                    <li class=\\\"nav-item\\\">\\n                        <a class=\\\"nav-link\\\" href=\\\"{{ url_for('auth.logout') }}\\\">Logout</a>\\n                    </li>\\n                {% else %}\\n                    <li class=\\\"nav-item\\\">\\n                        <a class=\\\"nav-link\\\" href=\\\"{{ url_for('auth.login') }}\\\">Login</a>\\n                    </li>\\n                {% endif %}\\n            </ul>\\n        </div>\\n    </div>\\n</nav>\"\n    },\n    {\n      \"path\": \"app/templates/base.html\",\n      \"content\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>{% block title %}Book-Scan-Quizz{% endblock %}</title>\\n    <!-- Bootstrap CSS -->\\n    <link href=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\n    <style>\\n        body {\\n            padding-top: 56px;\\n        }\\n        .alert-danger {\\n            color: #721c24;\\n            background-color: #f8d7da;\\n            border-color: #f5c6cb;\\n        }\\n    </style>\\n    {% block extra_css %}{% endblock %}\\n</head>\\n<body>\\n    {% include 'navbar.html' %}\\n\\n    <div class=\\\"container mt-4\\\">\\n        {% with messages = get_flashed_messages(with_categories=true) %}\\n            {% if messages %}\\n                {% for category, message in messages %}\\n                    <div class=\\\"alert alert-{{ category }} alert-dismissible fade show\\\" role=\\\"alert\\\">\\n                        {{ message }}\\n                        <button type=\\\"button\\\" class=\\\"btn-close\\\" data-bs-dismiss=\\\"alert\\\" aria-label=\\\"Close\\\"></button>\\n                    </div>\\n                {% endfor %}\\n            {% endif %}\\n        {% endwith %}\\n\\n        {% block content %}\\n        {% endblock %}\\n    </div>\\n\\n    <!-- Bootstrap Bundle with Popper -->\\n    <script src=\\\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\\\"></script>\\n    {% block extra_js %}{% endblock %}\\n</body>\\n</html>\"\n    },\n    {\n      \"path\": \"app/templates/answer/index.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n\\n{% block title %}Quiz - My Website{% endblock %}\\n\\n{% block content %}\\n<h1>Welcome to the Quiz Page</h1>\\n<p>Press and hold the button to record your answer.</p>\\n\\n<div class=\\\"text-center my-4\\\">\\n    <button id=\\\"recordButton\\\" class=\\\"btn btn-lg btn-success rounded-circle\\\" style=\\\"width: 100px; height: 100px;\\\">\\n        Record\\n    </button>\\n</div>\\n\\n<div id=\\\"recordingFeedback\\\" class=\\\"text-center my-2\\\" style=\\\"display: none;\\\">\\n    Recording... <span id=\\\"recordingDuration\\\">0</span>s\\n</div>\\n\\n<div id=\\\"processingFeedback\\\" class=\\\"text-center my-2\\\" style=\\\"display: none;\\\">\\n    Processing your audio...\\n</div>\\n\\n<div id=\\\"resultContainer\\\" class=\\\"mt-4\\\">\\n    <h3>Result:</h3>\\n    <p id=\\\"resultText\\\"></p>\\n</div>\\n\\n<div id=\\\"audioVisualization\\\" class=\\\"mt-3\\\" style=\\\"display: none;\\\">\\n    <div id=\\\"audioMeter\\\" style=\\\"width: 0%; height: 20px; background-color: #4CAF50; transition: width 0.1s;\\\"></div>\\n</div>\\n\\n{% endblock %}\\n\\n{% block extra_js %}\\n<script>\\nlet mediaRecorder;\\nlet audioChunks = [];\\nlet startTime;\\nlet durationInterval;\\nlet audioContext;\\nlet analyser;\\nlet dataArray;\\nlet animationId;\\n\\nconst recordButton = document.getElementById('recordButton');\\nconst recordingFeedback = document.getElementById('recordingFeedback');\\nconst recordingDuration = document.getElementById('recordingDuration');\\nconst resultText = document.getElementById('resultText');\\nconst processingFeedback = document.getElementById('processingFeedback');\\nconst audioVisualization = document.getElementById('audioVisualization');\\nconst audioMeter = document.getElementById('audioMeter');\\n\\nrecordButton.addEventListener('mousedown', startRecording);\\nrecordButton.addEventListener('mouseup', stopRecording);\\nrecordButton.addEventListener('mouseleave', stopRecording);\\n\\nfunction disableButton() {\\n    recordButton.disabled = true;\\n    recordButton.classList.remove('btn-success', 'btn-danger');\\n    recordButton.classList.add('btn-secondary');\\n    recordButton.style.cursor = 'not-allowed';\\n}\\n\\nfunction enableButton() {\\n    recordButton.disabled = false;\\n    recordButton.classList.remove('btn-secondary');\\n    recordButton.classList.add('btn-success');\\n    recordButton.style.cursor = 'pointer';\\n}\\n\\nfunction startRecording() {\\n    if (recordButton.disabled) return;\\n\\n    audioChunks = [];\\n    navigator.mediaDevices.getUserMedia({ audio: true })\\n        .then(stream => {\\n            mediaRecorder = new MediaRecorder(stream);\\n            mediaRecorder.start();\\n            startTime = Date.now();\\n\\n            mediaRecorder.addEventListener(\\\"dataavailable\\\", event => {\\n                audioChunks.push(event.data);\\n            });\\n\\n            recordButton.classList.remove('btn-success');\\n            recordButton.classList.add('btn-danger');\\n            recordingFeedback.style.display = 'block';\\n            audioVisualization.style.display = 'block';\\n            startDurationCounter();\\n            startAudioVisualization(stream);\\n        });\\n}\\n\\nfunction stopRecording() {\\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\\n        mediaRecorder.stop();\\n        recordButton.classList.remove('btn-danger');\\n        recordButton.classList.add('btn-success');\\n        recordingFeedback.style.display = 'none';\\n        audioVisualization.style.display = 'none';\\n        stopDurationCounter();\\n        stopAudioVisualization();\\n\\n        mediaRecorder.addEventListener(\\\"stop\\\", () => {\\n            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\\n            sendAudioToServer(audioBlob);\\n        });\\n    }\\n}\\n\\nfunction startDurationCounter() {\\n    recordingDuration.textContent = '0';\\n    durationInterval = setInterval(() => {\\n        const duration = Math.floor((Date.now() - startTime) / 1000);\\n        recordingDuration.textContent = duration;\\n    }, 1000);\\n}\\n\\nfunction stopDurationCounter() {\\n    clearInterval(durationInterval);\\n}\\n\\nfunction startAudioVisualization(stream) {\\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\\n    analyser = audioContext.createAnalyser();\\n    const source = audioContext.createMediaStreamSource(stream);\\n    source.connect(analyser);\\n    analyser.fftSize = 256;\\n    const bufferLength = analyser.frequencyBinCount;\\n    dataArray = new Uint8Array(bufferLength);\\n\\n    function updateAudioMeter() {\\n        analyser.getByteFrequencyData(dataArray);\\n        const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\\n        const volume = Math.min(100, Math.max(0, average * 2));\\n        audioMeter.style.width = `${volume}%`;\\n        animationId = requestAnimationFrame(updateAudioMeter);\\n    }\\n\\n    updateAudioMeter();\\n}\\n\\nfunction stopAudioVisualization() {\\n    if (audioContext) {\\n        audioContext.close();\\n    }\\n    if (animationId) {\\n        cancelAnimationFrame(animationId);\\n    }\\n}\\n\\nfunction sendAudioToServer(audioBlob) {\\n    const formData = new FormData();\\n    formData.append(\\\"audio\\\", audioBlob, \\\"recording.wav\\\");\\n\\n    resultText.textContent = '';\\n    processingFeedback.style.display = 'block';\\n    disableButton();\\n\\n    fetch('/answer/evaluate_audio', {\\n        method: 'POST',\\n        body: formData\\n    })\\n    .then(response => response.json())\\n    .then(data => {\\n        processingFeedback.style.display = 'none';\\n        if (data.error) {\\n            resultText.textContent = data.error;\\n            resultText.style.color = 'red';\\n        } else {\\n            resultText.textContent = data.result;\\n            resultText.style.color = 'initial';\\n        }\\n        enableButton();\\n    })\\n    .catch(error => {\\n        console.error('Error:', error);\\n        processingFeedback.style.display = 'none';\\n        resultText.textContent = 'An error occurred while processing the audio.';\\n        resultText.style.color = 'red';\\n        enableButton();\\n    });\\n}\\n</script>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/quiz/answer.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n{% block content %}\\n    <h1>Answer Quiz: {{ quiz.title }}</h1>\\n    <form method=\\\"POST\\\">\\n        {% for question in questions %}\\n            <div>\\n                <h3>Question {{ loop.index }}</h3>\\n                <p>{{ question.question_text }}</p>\\n                <input type=\\\"text\\\" name=\\\"answer_{{ question.id }}\\\" required>\\n            </div>\\n        {% endfor %}\\n        <button type=\\\"submit\\\">Submit Answers</button>\\n    </form>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/quiz/index.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n{% block content %}\\n    <h1>My Quizzes</h1>\\n    <a href=\\\"{{ url_for('quiz.create') }}\\\" class=\\\"btn btn-primary\\\">Create New Quiz</a>\\n    <ul>\\n    {% for quiz in quizzes %}\\n        <li>\\n            {{ quiz.title }}\\n            <a href=\\\"{{ url_for('quiz.edit', quiz_id=quiz.id) }}\\\">Edit</a>\\n            <a href=\\\"{{ url_for('quiz.answer', quiz_id=quiz.id) }}\\\">Answer</a>\\n        </li>\\n    {% endfor %}\\n    </ul>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/quiz/create.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n{% block content %}\\n    <h1>Create New Quiz</h1>\\n    <form method=\\\"POST\\\" enctype=\\\"multipart/form-data\\\">\\n        {{ form.hidden_tag() }}\\n        <div>\\n            {{ form.title.label }}\\n            {{ form.title() }}\\n        </div>\\n        <div>\\n            {{ form.images.label }}\\n            {{ form.images() }}\\n        </div>\\n        {{ form.submit() }}\\n    </form>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/quiz/add_question.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n{% block content %}\\n    <h1>Add Question to Quiz: {{ quiz.title }}</h1>\\n    <form method=\\\"POST\\\">\\n        {{ form.hidden_tag() }}\\n        <div>\\n            {{ form.question_text.label }}\\n            {{ form.question_text() }}\\n        </div>\\n        <div>\\n            {{ form.answer.label }}\\n            {{ form.answer() }}\\n        </div>\\n        <div>\\n            {{ form.difficulty_level.label }}\\n            {{ form.difficulty_level() }}\\n        </div>\\n        {{ form.submit() }}\\n    </form>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/quiz/edit_question.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n{% block content %}\\n    <h1>Edit Question for Quiz: {{ quiz.title }}</h1>\\n    <form method=\\\"POST\\\">\\n        {{ form.hidden_tag() }}\\n        <div>\\n            {{ form.question_text.label }}\\n            {{ form.question_text() }}\\n        </div>\\n        <div>\\n            {{ form.answer.label }}\\n            {{ form.answer() }}\\n        </div>\\n        <div>\\n            {{ form.difficulty_level.label }}\\n            {{ form.difficulty_level() }}\\n        </div>\\n        {{ form.submit() }}\\n    </form>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/quiz/edit.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n{% block content %}\\n    <h1>Edit Quiz: {{ quiz.title }}</h1>\\n    <a href=\\\"{{ url_for('quiz.add_question', quiz_id=quiz.id) }}\\\" class=\\\"btn btn-primary\\\">Add New Question</a>\\n    {% for question in questions %}\\n        <div>\\n            <h3>Question {{ loop.index }}</h3>\\n            <p>{{ question.question_text }}</p>\\n            <p>Answer: {{ question.answer }}</p>\\n            <p>Difficulty: {{ question.difficulty_level }}</p>\\n            <a href=\\\"{{ url_for('quiz.edit_question', quiz_id=quiz.id, question_id=question.id) }}\\\" class=\\\"btn btn-secondary\\\">Edit</a>\\n            <form action=\\\"{{ url_for('quiz.delete_question', quiz_id=quiz.id, question_id=question.id) }}\\\" method=\\\"POST\\\" style=\\\"display: inline;\\\">\\n                <input type=\\\"submit\\\" value=\\\"Delete\\\" class=\\\"btn btn-danger\\\" onclick=\\\"return confirm('Are you sure you want to delete this question?');\\\">\\n            </form>\\n        </div>\\n    {% endfor %}\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/main/home.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n\\n{% block content %}\\n<h1>Welcome to Book-Scan-Quizz</h1>\\n\\n{% if current_user.is_authenticated %}\\n    <p>Hello, {{ session['user']['first_name'] }}! Thanks for logging in with Google.</p>\\n    <p>Your email is: {{ session['user']['email'] }}</p>\\n    {% if session['user']['picture'] %}\\n        <img src=\\\"{{ session['user']['picture'] }}\\\" alt=\\\"Profile Picture\\\" style=\\\"width: 50px; height: 50px; border-radius: 50%;\\\">\\n    {% endif %}\\n{% else %}\\n    <p>This is the home page of our mobile-first website. Feel free to explore other pages using the navigation menu.</p>\\n    <p>You can log in using your Google account to access more features.</p>\\n{% endif %}\\n\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/main/about.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n\\n{% block title %}About - My Website{% endblock %}\\n\\n{% block content %}\\n<h1>About Us</h1>\\n<p>We are a company dedicated to creating amazing mobile-first websites. Our team of experts ensures that every project we undertake is responsive, user-friendly, and visually appealing.</p>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/templates/main/contact.html\",\n      \"content\": \"{% extends \\\"base.html\\\" %}\\n\\n{% block title %}Contact - My Website{% endblock %}\\n\\n{% block content %}\\n<h1>Contact Us</h1>\\n<p>Get in touch with us for any inquiries or project discussions.</p>\\n<form>\\n    <div class=\\\"mb-3\\\">\\n        <label for=\\\"name\\\" class=\\\"form-label\\\">Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" required>\\n    </div>\\n    <div class=\\\"mb-3\\\">\\n        <label for=\\\"email\\\" class=\\\"form-label\\\">Email</label>\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" required>\\n    </div>\\n    <div class=\\\"mb-3\\\">\\n        <label for=\\\"message\\\" class=\\\"form-label\\\">Message</label>\\n        <textarea class=\\\"form-control\\\" id=\\\"message\\\" rows=\\\"3\\\" required></textarea>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\\n{% endblock %}\"\n    },\n    {\n      \"path\": \"app/main/__init__.py\",\n      \"content\": \"from flask import Blueprint\\n\\nmain = Blueprint('main', __name__)\\n\\nfrom . import routes, errors\"\n    },\n    {\n      \"path\": \"app/main/errors.py\",\n      \"content\": \"\"\n    },\n    {\n      \"path\": \"app/main/routes.py\",\n      \"content\": \"from flask import render_template\\nfrom . import main\\nfrom flask_login import current_user\\n\\n@main.route('/')\\ndef home():\\n    return render_template('main/home.html')\\n\\n@main.route('/about')\\ndef about():\\n    return render_template('main/about.html')\\n\\n@main.route('/contact')\\ndef contact():\\n    return render_template('main/contact.html')\"\n    },\n    {\n      \"path\": \"tests/test_quiz.py\",\n      \"content\": \"\"\n    },\n    {\n      \"path\": \"tests/test_auth.py\",\n      \"content\": \"\"\n    },\n    {\n      \"path\": \"tests/__init__.py\",\n      \"content\": \"\"\n    },\n    {\n      \"path\": \"tests/test_transcribe.py\",\n      \"content\": \"import unittest\\nimport os\\nfrom transcribe import transcribe_audio\\nfrom app import create_app\\nfrom config import config\\n\\n\\nclass TestTranscribe(unittest.TestCase):\\n    def setUp(self):\\n        self.app = create_app('testing')\\n        self.app_context = self.app.app_context()\\n        self.app_context.push()\\n\\n    def tearDown(self):\\n        self.app_context.pop()\\n\\n    def test_transcribe_file(self):\\n        # Get the absolute path to the test file using the app config\\n        test_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),\\n                                      \\\"..\\\",\\n                                      self.app.config['UPLOAD_FOLDER'],\\n                                      \\\"test_prompt.wav\\\")\\n\\n        # Ensure the test file exists\\n        self.assertTrue(os.path.exists(test_file_path), f\\\"Test file not found: {test_file_path}\\\")\\n\\n        result = transcribe_audio(test_file_path)\\n        print(result)\\n        self.assertIsInstance(result, str)\\n\\n\\nif __name__ == '__main__':\\n    unittest.main()\"\n    },\n    {\n      \"path\": \"tests/test_main.py\",\n      \"content\": \"\"\n    },\n    {\n      \"path\": \"instance/dev.sqlite\",\n      \"content\": \"Error reading file: 'utf-8' codec can't decode byte 0xf8 in position 102: invalid start byte\"\n    },\n    {\n      \"path\": \".idea/dataSources.xml\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project version=\\\"4\\\">\\n  <component name=\\\"DataSourceManagerImpl\\\" format=\\\"xml\\\" multifile-model=\\\"true\\\">\\n    <data-source source=\\\"LOCAL\\\" name=\\\"dev\\\" uuid=\\\"1fa8386b-743c-4a1c-bd62-c22020f5b709\\\">\\n      <driver-ref>sqlite.xerial</driver-ref>\\n      <synchronize>true</synchronize>\\n      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>\\n      <jdbc-url>jdbc:sqlite:E:\\\\source\\\\repos\\\\book-scan-quizz\\\\instance\\\\dev.sqlite</jdbc-url>\\n      <jdbc-additional-properties>\\n        <property name=\\\"com.intellij.clouds.kubernetes.db.enabled\\\" value=\\\"false\\\" />\\n      </jdbc-additional-properties>\\n      <working-dir>$ProjectFileDir$</working-dir>\\n      <libraries>\\n        <library>\\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/xerial/sqlite-jdbc/3.45.1.0/sqlite-jdbc-3.45.1.0.jar</url>\\n        </library>\\n        <library>\\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar</url>\\n        </library>\\n      </libraries>\\n    </data-source>\\n  </component>\\n</project>\"\n    },\n    {\n      \"path\": \".idea/experiment-mobileweb.iml\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<module type=\\\"PYTHON_MODULE\\\" version=\\\"4\\\">\\n  <component name=\\\"Flask\\\">\\n    <option name=\\\"enabled\\\" value=\\\"true\\\" />\\n  </component>\\n  <component name=\\\"NewModuleRootManager\\\">\\n    <content url=\\\"file://$MODULE_DIR$\\\">\\n      <excludeFolder url=\\\"file://$MODULE_DIR$/.venv\\\" />\\n    </content>\\n    <orderEntry type=\\\"jdk\\\" jdkName=\\\"Python 3.12\\\" jdkType=\\\"Python SDK\\\" />\\n    <orderEntry type=\\\"sourceFolder\\\" forTests=\\\"false\\\" />\\n  </component>\\n  <component name=\\\"TemplatesService\\\">\\n    <option name=\\\"TEMPLATE_CONFIGURATION\\\" value=\\\"Jinja2\\\" />\\n    <option name=\\\"TEMPLATE_FOLDERS\\\">\\n      <list>\\n        <option value=\\\"$MODULE_DIR$/templates\\\" />\\n      </list>\\n    </option>\\n  </component>\\n</module>\"\n    },\n    {\n      \"path\": \".idea/dataSources.local.xml\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project version=\\\"4\\\">\\n  <component name=\\\"dataSourceStorageLocal\\\" created-in=\\\"PY-233.14475.56\\\">\\n    <data-source name=\\\"dev\\\" uuid=\\\"1fa8386b-743c-4a1c-bd62-c22020f5b709\\\">\\n      <database-info product=\\\"\\\" version=\\\"\\\" jdbc-version=\\\"\\\" driver-name=\\\"\\\" driver-version=\\\"\\\" dbms=\\\"SQLITE\\\" />\\n      <schema-mapping />\\n    </data-source>\\n  </component>\\n</project>\"\n    },\n    {\n      \"path\": \".idea/vcs.xml\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project version=\\\"4\\\">\\n  <component name=\\\"VcsDirectoryMappings\\\">\\n    <mapping directory=\\\"$PROJECT_DIR$\\\" vcs=\\\"Git\\\" />\\n  </component>\\n</project>\"\n    },\n    {\n      \"path\": \".idea/.gitignore\",\n      \"content\": \"# Default ignored files\\n/shelf/\\n/workspace.xml\\n# Editor-based HTTP Client requests\\n/httpRequests/\\n# Datasource local storage ignored files\\n/dataSources/\\n/dataSources.local.xml\\n\"\n    },\n    {\n      \"path\": \".idea/workspace.xml\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project version=\\\"4\\\">\\n  <component name=\\\"AutoImportSettings\\\">\\n    <option name=\\\"autoReloadType\\\" value=\\\"SELECTIVE\\\" />\\n  </component>\\n  <component name=\\\"ChangeListManager\\\">\\n    <list default=\\\"true\\\" id=\\\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\\\" name=\\\"Changes\\\" comment=\\\"\\\">\\n      <change afterPath=\\\"$PROJECT_DIR$/export_structure.py\\\" afterDir=\\\"false\\\" />\\n    </list>\\n    <option name=\\\"SHOW_DIALOG\\\" value=\\\"false\\\" />\\n    <option name=\\\"HIGHLIGHT_CONFLICTS\\\" value=\\\"true\\\" />\\n    <option name=\\\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\\\" value=\\\"false\\\" />\\n    <option name=\\\"LAST_RESOLUTION\\\" value=\\\"IGNORE\\\" />\\n  </component>\\n  <component name=\\\"FileTemplateManagerImpl\\\">\\n    <option name=\\\"RECENT_TEMPLATES\\\">\\n      <list>\\n        <option value=\\\"Python Script\\\" />\\n      </list>\\n    </option>\\n  </component>\\n  <component name=\\\"Git.Settings\\\">\\n    <option name=\\\"RECENT_GIT_ROOT_PATH\\\" value=\\\"$PROJECT_DIR$\\\" />\\n  </component>\\n  <component name=\\\"MarkdownSettingsMigration\\\">\\n    <option name=\\\"stateVersion\\\" value=\\\"1\\\" />\\n  </component>\\n  <component name=\\\"ProjectColorInfo\\\">{\\n  &quot;associatedIndex&quot;: 2\\n}</component>\\n  <component name=\\\"ProjectId\\\" id=\\\"2iIEhKaLBYBbFhtm0UxCg8yVGaW\\\" />\\n  <component name=\\\"ProjectViewState\\\">\\n    <option name=\\\"hideEmptyMiddlePackages\\\" value=\\\"true\\\" />\\n    <option name=\\\"showLibraryContents\\\" value=\\\"true\\\" />\\n  </component>\\n  <component name=\\\"PropertiesComponent\\\">{\\n  &quot;keyToString&quot;: {\\n    &quot;Flask server.Flask (app).executor&quot;: &quot;Run&quot;,\\n    &quot;Flask server.Flask.executor&quot;: &quot;Debug&quot;,\\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\\n    &quot;last_opened_file_path&quot;: &quot;/Users/almirkazazic/Documents/GitHub/book-scan-quizz&quot;,\\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\\n  }\\n}</component>\\n  <component name=\\\"RunManager\\\">\\n    <configuration name=\\\"Flask (app)\\\" type=\\\"Python.FlaskServer\\\">\\n      <option name=\\\"flaskDebug\\\" value=\\\"true\\\" />\\n      <module name=\\\"experiment-mobileweb\\\" />\\n      <option name=\\\"target\\\" value=\\\"$PROJECT_DIR$/app\\\" />\\n      <option name=\\\"targetType\\\" value=\\\"PATH\\\" />\\n      <option name=\\\"ENV_FILES\\\" value=\\\"\\\" />\\n      <option name=\\\"INTERPRETER_OPTIONS\\\" value=\\\"\\\" />\\n      <option name=\\\"PARENT_ENVS\\\" value=\\\"true\\\" />\\n      <option name=\\\"SDK_HOME\\\" value=\\\"$USER_HOME$/PycharmProjects/first/.venv/bin/python\\\" />\\n      <option name=\\\"SDK_NAME\\\" value=\\\"Python 3.12 (first)\\\" />\\n      <option name=\\\"WORKING_DIRECTORY\\\" value=\\\"$PROJECT_DIR$\\\" />\\n      <option name=\\\"IS_MODULE_SDK\\\" value=\\\"false\\\" />\\n      <option name=\\\"ADD_CONTENT_ROOTS\\\" value=\\\"true\\\" />\\n      <option name=\\\"ADD_SOURCE_ROOTS\\\" value=\\\"true\\\" />\\n      <EXTENSION ID=\\\"PythonCoverageRunConfigurationExtension\\\" runner=\\\"coverage.py\\\" />\\n      <EXTENSION ID=\\\"net.ashald.envfile\\\">\\n        <option name=\\\"IS_ENABLED\\\" value=\\\"false\\\" />\\n        <option name=\\\"IS_SUBST\\\" value=\\\"false\\\" />\\n        <option name=\\\"IS_PATH_MACRO_SUPPORTED\\\" value=\\\"false\\\" />\\n        <option name=\\\"IS_IGNORE_MISSING_FILES\\\" value=\\\"false\\\" />\\n        <option name=\\\"IS_ENABLE_EXPERIMENTAL_INTEGRATIONS\\\" value=\\\"false\\\" />\\n        <ENTRIES>\\n          <ENTRY IS_ENABLED=\\\"true\\\" PARSER=\\\"runconfig\\\" IS_EXECUTABLE=\\\"false\\\" />\\n        </ENTRIES>\\n      </EXTENSION>\\n      <option name=\\\"launchJavascriptDebuger\\\" value=\\\"false\\\" />\\n      <method v=\\\"2\\\" />\\n    </configuration>\\n  </component>\\n  <component name=\\\"SharedIndexes\\\">\\n    <attachedChunks>\\n      <set>\\n        <option value=\\\"bundled-python-sdk-d68999036c7f-b11f5e8da5ad-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.14475.56\\\" />\\n      </set>\\n    </attachedChunks>\\n  </component>\\n  <component name=\\\"SpellCheckerSettings\\\" RuntimeDictionaries=\\\"0\\\" Folders=\\\"0\\\" CustomDictionaries=\\\"0\\\" DefaultDictionary=\\\"application-level\\\" UseSingleDictionary=\\\"true\\\" transferred=\\\"true\\\" />\\n  <component name=\\\"TaskManager\\\">\\n    <task active=\\\"true\\\" id=\\\"Default\\\" summary=\\\"Default task\\\">\\n      <changelist id=\\\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\\\" name=\\\"Changes\\\" comment=\\\"\\\" />\\n      <created>1719169808821</created>\\n      <option name=\\\"number\\\" value=\\\"Default\\\" />\\n      <option name=\\\"presentableId\\\" value=\\\"Default\\\" />\\n      <updated>1719169808821</updated>\\n      <workItem from=\\\"1719169810018\\\" duration=\\\"6133000\\\" />\\n      <workItem from=\\\"1719575605919\\\" duration=\\\"148000\\\" />\\n    </task>\\n    <servers />\\n  </component>\\n  <component name=\\\"TypeScriptGeneratedFilesManager\\\">\\n    <option name=\\\"version\\\" value=\\\"3\\\" />\\n  </component>\\n  <component name=\\\"XDebuggerManager\\\">\\n    <breakpoint-manager>\\n      <breakpoints>\\n        <line-breakpoint enabled=\\\"true\\\" suspend=\\\"THREAD\\\" type=\\\"python-line\\\">\\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\\n          <line>25</line>\\n          <option name=\\\"timeStamp\\\" value=\\\"1\\\" />\\n        </line-breakpoint>\\n        <line-breakpoint enabled=\\\"true\\\" suspend=\\\"THREAD\\\" type=\\\"python-line\\\">\\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\\n          <line>15</line>\\n          <option name=\\\"timeStamp\\\" value=\\\"2\\\" />\\n        </line-breakpoint>\\n      </breakpoints>\\n    </breakpoint-manager>\\n  </component>\\n  <component name=\\\"com.intellij.coverage.CoverageDataManagerImpl\\\">\\n    <SUITE FILE_PATH=\\\"coverage/book_scan_quizz$Flask.coverage\\\" NAME=\\\"Flask (app) Coverage Results\\\" MODIFIED=\\\"1719178837235\\\" SOURCE_PROVIDER=\\\"com.intellij.coverage.DefaultCoverageFileProvider\\\" RUNNER=\\\"coverage.py\\\" COVERAGE_BY_TEST_ENABLED=\\\"true\\\" COVERAGE_TRACING_ENABLED=\\\"false\\\" WORKING_DIRECTORY=\\\"$PROJECT_DIR$\\\" />\\n  </component>\\n</project>\"\n    },\n    {\n      \"path\": \".idea/modules.xml\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project version=\\\"4\\\">\\n  <component name=\\\"ProjectModuleManager\\\">\\n    <modules>\\n      <module fileurl=\\\"file://$PROJECT_DIR$/.idea/experiment-mobileweb.iml\\\" filepath=\\\"$PROJECT_DIR$/.idea/experiment-mobileweb.iml\\\" />\\n    </modules>\\n  </component>\\n</project>\"\n    },\n    {\n      \"path\": \".idea/misc.xml\",\n      \"content\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<project version=\\\"4\\\">\\n  <component name=\\\"Black\\\">\\n    <option name=\\\"sdkName\\\" value=\\\"Python 3.11 (experiment-mobileweb)\\\" />\\n  </component>\\n  <component name=\\\"ProjectRootManager\\\" version=\\\"2\\\" project-jdk-name=\\\"Python 3.12\\\" project-jdk-type=\\\"Python SDK\\\" />\\n</project>\"\n    },\n    {\n      \"path\": \".idea/inspectionProfiles/profiles_settings.xml\",\n      \"content\": \"<component name=\\\"InspectionProjectProfileManager\\\">\\n  <settings>\\n    <option name=\\\"USE_PROJECT_PROFILE\\\" value=\\\"false\\\" />\\n    <version value=\\\"1.0\\\" />\\n  </settings>\\n</component>\"\n    }\n  ]\n}"
    },
    {
      "path": ".env",
      "content": "GOOGLE_CLIENT_ID=792066325521-dgtt0c4cp36nace09o3fcslflh9m4s4h.apps.googleusercontent.com\nGOOGLE_CLIENT_SECRET=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\nFLASK_CONFIG=development\nSECRET_KEY=your_secret_key_here\nDEV_DATABASE_URL=sqlite:///dev.sqlite\nTEST_DATABASE_URL=sqlite:///test.sqlite\nDATABASE_URL=postgresql://user:password@localhost/dbname"
    },
    {
      "path": "transcribe.py",
      "content": "\nimport google.generativeai as genai\nfrom flask import current_app\n\n\n#os.environ[\"GEMINI_API_KEY\"] = \"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\"\n# genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n\n\ndef transcribe_file(file_path: str) -> str:\n    \"\"\"\n    Transcribe the audio file at the given path.\n\n    :param file_path: Path to the audio file\n    :return: Transcribed text\n    \"\"\"\n    # Placeholder implementation\n    return \"Hello World! This is a placeholder transcription.\"\n\n\n\n\"\"\"\nInstall the Google AI Python SDK\n\n$ pip install google-generativeai\n\nSee the getting started guide for more information:\nhttps://ai.google.dev/gemini-api/docs/get-started/python\n\"\"\"\n\n\n\n\ndef upload_to_gemini(path, mime_type=\"audio/wav\"):\n  \"\"\"Uploads the given file to Gemini.\n\n  See https://ai.google.dev/gemini-api/docs/prompting_with_media\n  \"\"\"\n  file = genai.upload_file(path, mime_type=mime_type)\n  print(f\"Uploaded file '{file.display_name}' as: {file.uri}\")\n  return file\n\ndef transcribe_audio(audio_path: str, mime_type=\"audio/wav\") -> str:\n  genai.configure(api_key=current_app.config['GEMINI_API_KEY'])\n  # See https://ai.google.dev/api/python/google/generativeai/GenerativeModel\n  generation_config = {\n    \"temperature\": 1,\n    \"top_p\": 0.95,\n    \"top_k\": 64,\n    \"max_output_tokens\": 8192,\n    \"response_mime_type\": \"text/plain\",\n  }\n\n  model = genai.GenerativeModel(\n    model_name=\"gemini-1.5-flash\",\n    generation_config=generation_config,\n    # safety_settings = Adjust safety settings\n    # See https://ai.google.dev/gemini-api/docs/safety-settings\n  )\n\n  # TODO Make these files available on the local file system\n  # You may need to update the file paths\n  # files = [\n  #   upload_to_gemini(audio_path, mime_type=mime_type),\n  # ]\n  file = upload_to_gemini(audio_path, mime_type=mime_type)\n\n  chat_session = model.start_chat(\n    history=[\n      {\n        \"role\": \"user\",\n        \"parts\": [file],\n      },\n    ]\n  )\n\n  response = chat_session.send_message(\"give a short summary of the file\")\n\n  print(response.text)\n  return response.text"
    },
    {
      "path": "create_structure.py",
      "content": "import os\n\ndef create_directory(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n        print(f\"Created directory: {path}\")\n\ndef create_file(path):\n    if not os.path.exists(path):\n        with open(path, 'w') as f:\n            f.write(\"# This file is intentionally left empty\")\n        print(f\"Created file: {path}\")\n\ndef generate_structure():\n    # Define the base directories\n    base_dir = os.path.dirname(os.path.abspath(__file__))\n    google_ai_dir = os.path.join(base_dir, 'google_ai')\n    tests_dir = os.path.join(base_dir, 'tests')\n    tests_google_ai_dir = os.path.join(tests_dir, 'google_ai')\n\n    # Create directories\n    create_directory(google_ai_dir)\n    create_directory(tests_dir)\n    create_directory(tests_google_ai_dir)\n\n    # Create files in google_ai directory\n    create_file(os.path.join(google_ai_dir, '__init__.py'))\n    create_file(os.path.join(google_ai_dir, 'transcription.py'))\n    create_file(os.path.join(google_ai_dir, 'question_generator.py'))\n    create_file(os.path.join(google_ai_dir, 'file_utils.py'))\n\n    # Create files in tests/google_ai directory\n    create_file(os.path.join(tests_google_ai_dir, '__init__.py'))\n    create_file(os.path.join(tests_google_ai_dir, 'test_transcription.py'))\n    create_file(os.path.join(tests_google_ai_dir, 'test_question_generator.py'))\n    create_file(os.path.join(tests_google_ai_dir, 'test_file_utils.py'))\n\n    print(\"File structure generated successfully!\")\n\nif __name__ == \"__main__\":\n    generate_structure()"
    },
    {
      "path": "export_structure.py",
      "content": "import os\nimport json\n\n\ndef should_exclude(path):\n    exclude_dirs = {'.venv', 'venv', '__pycache__', 'node_modules', '.git', 'audio_uploads'}\n    exclude_extensions = {'.pyc', '.pyo', '.pyd', '.db', '.sqlite3', 'wav', 'pdf'}\n\n    parts = path.split(os.sep)\n    if any(part in exclude_dirs for part in parts):\n        return True\n\n    _, ext = os.path.splitext(path)\n    return ext.lower() in exclude_extensions\n\n\ndef read_file_content(file_path):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return file.read()\n    except Exception as e:\n        return f\"Error reading file: {str(e)}\"\n\n\ndef explore_directory(directory):\n    structure = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if not should_exclude(file_path):\n                relative_path = os.path.relpath(file_path, directory)\n                structure.append({\n                    'path': relative_path,\n                    'content': read_file_content(file_path)\n                })\n    return structure\n\n\ndef export_project_structure(root_dir='.'):\n    project_structure = explore_directory(root_dir)\n    output = {\n        'project_structure': project_structure\n    }\n\n    with open('project_structure.json', 'w', encoding='utf-8') as f:\n        json.dump(output, f, indent=2)\n\n\nif __name__ == \"__main__\":\n    export_project_structure()\n    print(\"Project structure exported to project_structure.json\")"
    },
    {
      "path": "app/__init__.py",
      "content": "import logging\nimport os\n\nfrom flask import Flask\nfrom flask_login import LoginManager\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom config import config\nfrom .utils import init_oauth, oauth\n\ndb = SQLAlchemy()\nlogin_manager = LoginManager()\n\n\ndef create_app(config_name=None):\n    app = Flask(__name__)\n\n    if config_name is None:\n        config_name = os.getenv('FLASK_CONFIG', 'default')\n\n    app.config.from_object(config[config_name])\n    config[config_name].init_app(app)\n\n    db.init_app(app)\n\n    if app.config['SQLALCHEMY_ECHO']:\n        # Set up SQLAlchemy query logging\n        logging.basicConfig()\n        logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\n    login_manager.init_app(app)\n    init_oauth(app)\n\n    from .models.user import User\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.query.get(user_id)\n\n    # Register blueprints\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint)\n\n    from .auth import auth as auth_blueprint\n    app.register_blueprint(auth_blueprint, url_prefix='/auth')\n\n    from .answer import answer as quiz_blueprint\n    app.register_blueprint(quiz_blueprint, url_prefix='/answer')\n\n    from .quiz import quiz as quiz_blueprint\n    app.register_blueprint(quiz_blueprint, url_prefix='/quiz')\n\n    # Import and register the init-db command\n    from .cli import init_db_command\n    app.cli.add_command(init_db_command)\n\n    return app\n"
    },
    {
      "path": "app/cli.py",
      "content": "import click\nfrom flask.cli import with_appcontext\nfrom flask import current_app\nfrom . import db\nimport os\nfrom sqlalchemy import inspect\n\n\n@click.command('init-db')\n@with_appcontext\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    db.create_all()\n\n    # Print all tables that SQLAlchemy is aware of\n    inspector = inspect(db.engine)\n    tables = inspector.get_table_names()\n    click.echo(f\"Tables created: {', '.join(tables)}\")\n\n    db_uri = current_app.config['SQLALCHEMY_DATABASE_URI']\n    if db_uri.startswith('sqlite:///'):\n        db_path = db_uri.replace('sqlite:///', '')\n        if not os.path.isabs(db_path):\n            db_path = os.path.join(current_app.instance_path, db_path)\n        click.echo(f\"SQLite database location: {os.path.abspath(db_path)}\")\n    else:\n        click.echo(f\"Database URI: {db_uri}\")"
    },
    {
      "path": "app/utils.py",
      "content": "from authlib.integrations.flask_client import OAuth\n\noauth = OAuth()\n\n\ndef init_oauth(app):\n    oauth.init_app(app)\n    oauth.register(\n        name='google',\n        client_id=app.config['GOOGLE_CLIENT_ID'],\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n        #client_kwargs={'scope': 'email'},\n        client_kwargs={'scope': 'openid email profile'}\n    )\n\n\n\n"
    },
    {
      "path": "app/answer/__init__.py",
      "content": "from flask import Blueprint\n\nanswer = Blueprint('answer', __name__)\n\nfrom . import routes"
    },
    {
      "path": "app/answer/routes.py",
      "content": "from flask import render_template, request, jsonify, current_app\nfrom werkzeug.utils import secure_filename\nfrom datetime import datetime\nfrom transcribe import transcribe_audio\nfrom . import answer\nimport os\n\n@answer.route('/')\ndef index():\n    return render_template('answer/index.html')\n\ndef generate_timestamp_filename(original_filename):\n    # Get current timestamp with milliseconds\n    timestamp = datetime.now().strftime(\"%Y%m%d-%H%M%S-%f\")\n    # Get the file extension\n    _, file_extension = os.path.splitext(original_filename)\n    # Create new filename\n    return f\"{timestamp}{file_extension}\"\n\n\n@answer.route('/evaluate_audio', methods=['POST'])\ndef evaluate_audio():\n    try:\n        if 'audio' not in request.files:\n            return jsonify({'error': 'No audio file provided'}), 400\n\n        audio_file = request.files['audio']\n\n        if audio_file.filename == '':\n            return jsonify({'error': 'No selected file'}), 400\n\n        if audio_file:\n            # Generate a new filename based on current timestamp\n            new_filename = generate_timestamp_filename(audio_file.filename)\n\n            # Secure the filename\n            secure_name = secure_filename(new_filename)\n\n            # Define the path where you want to save the file\n            save_path = os.path.join(current_app.config['UPLOAD_FOLDER'], secure_name)\n\n            # Save the file\n            audio_file.save(save_path)\n\n            # Now pass the saved file path to your transcribe_audio function\n            result = transcribe_audio(save_path)\n\n            # You might want to store the filename in your database here\n\n            return jsonify({'result': result, 'filename': secure_name})\n        else:\n            return jsonify({'error': 'Invalid file'}), 400\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in evaluate_audio: {str(e)}\")\n        return jsonify({'error': f'An error occurred while processing the audio: {str(e)}'}), 500"
    },
    {
      "path": "app/auth/__init__.py",
      "content": "from flask import Blueprint\n\nauth = Blueprint('auth', __name__)\n\nfrom . import routes"
    },
    {
      "path": "app/auth/routes.py",
      "content": "from flask import redirect, url_for, flash, session\nfrom flask_login import login_user, logout_user, current_user\n\nfrom . import auth\nfrom ..models import User\nfrom ..utils import oauth\n\n\n@auth.route('/login')\ndef login():\n    return oauth.google.authorize_redirect(url_for('auth.authorized', _external=True))\n\n\n@auth.route('/logout')\ndef logout():\n    if current_user.is_authenticated:\n        logout_user()\n    session.clear()  # This clears all session data\n    flash('You have been logged out.', 'danger')\n    return redirect(url_for('main.home'))\n\n\n@auth.route('/login/authorized')\ndef authorized():\n    try:\n        token = oauth.google.authorize_access_token()\n        user_info = token.get('userinfo')\n\n        if user_info:\n            user = User.get_or_create(\n                email=user_info['email'],\n                first_name=user_info.get('given_name'),\n                last_name=user_info.get('family_name'),\n                picture=user_info.get('picture')\n            )\n            login_user(user)\n            session['user'] = user.to_dict()  # Store all user info in session\n            flash('Logged in successfully.', 'success')\n        else:\n            flash('Failed to get user info from Google.', 'danger')\n\n        return redirect(url_for('main.home'))\n    except Exception as e:\n        flash(f'An error occurred: {str(e)}', 'danger')\n        return redirect(url_for('main.home'))\n"
    },
    {
      "path": "app/quiz/__init__.py",
      "content": "from flask import Blueprint\n\nquiz = Blueprint('quiz', __name__)\n\nfrom . import routes"
    },
    {
      "path": "app/quiz/forms.py",
      "content": "from flask_wtf import FlaskForm\nfrom wtforms import StringField, SubmitField, MultipleFileField, IntegerField\nfrom wtforms.validators import DataRequired , NumberRange\nfrom flask_wtf.file import FileAllowed\n\nclass CreateQuizForm(FlaskForm):\n    title = StringField('Quiz Title', validators=[DataRequired()])\n    images = MultipleFileField('Upload Images', validators=[\n        FileAllowed(['jpg', 'png'], 'Images only!')\n    ])\n    submit = SubmitField('Create Quiz')\n\nclass EditQuestionForm(FlaskForm):\n    # Add fields for editing questions\n    pass\n\nclass QuestionForm(FlaskForm):\n    question_text = StringField('Question', validators=[DataRequired()])\n    answer = StringField('Answer', validators=[DataRequired()])\n    difficulty_level = IntegerField('Difficulty Level', validators=[NumberRange(min=1, max=10)])\n    submit = SubmitField('Save Question')"
    },
    {
      "path": "app/quiz/routes.py",
      "content": "from flask import render_template, redirect, url_for, flash, request, abort, current_app\nfrom flask_login import login_required, current_user\nfrom . import quiz\nfrom .forms import CreateQuizForm, QuestionForm, EditQuestionForm\nfrom .. import db\nfrom ..models import Quiz, Question, PageScan\nfrom werkzeug.utils import secure_filename\nimport os\n\n\n@quiz.route('/')\n@login_required\ndef index():\n    user_quizzes = Quiz.query.filter_by(user_owner_id=current_user.id).all()\n    return render_template('quiz/index.html', quizzes=user_quizzes)\n\n\n@quiz.route('/create', methods=['GET', 'POST'])\n@login_required\ndef create():\n    form = CreateQuizForm()\n    if form.validate_on_submit():\n        quiz = Quiz(title=form.title.data, user_owner_id=current_user.id)\n        db.session.add(quiz)\n        db.session.flush()  # To get the quiz id\n\n        for image in request.files.getlist('images'):\n            if image:\n                filename = secure_filename(image.filename)\n                image.save(os.path.join(current_app.config['UPLOAD_FOLDER'], filename))\n                page_scan = PageScan(quiz_id=quiz.id, file_name=filename)\n                db.session.add(page_scan)\n\n        db.session.commit()\n        flash('Quiz created successfully!', 'success')\n        return redirect(url_for('quiz.index'))\n    return render_template('quiz/create.html', form=form)\n\n\n@quiz.route('/<quiz_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit(quiz_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    if quiz.user_owner_id != current_user.id:\n        flash('You do not have permission to edit this quiz.', 'danger')\n        return redirect(url_for('quiz.index'))\n\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\n    form = EditQuestionForm()\n\n    if form.validate_on_submit():\n        # Logic to save edited questions\n        pass\n\n    return render_template('quiz/edit.html', quiz=quiz, questions=questions, form=form)\n\n\n@quiz.route('/<quiz_id>/answer')\n@login_required\ndef answer(quiz_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\n    return render_template('quiz/answer.html', quiz=quiz, questions=questions)\n\n\n@quiz.route('/<quiz_id>/add_question', methods=['GET', 'POST'])\n@login_required\ndef add_question(quiz_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    if quiz.user_owner_id != current_user.id:\n        abort(403)\n\n    form = QuestionForm()\n    if form.validate_on_submit():\n        question = Question(\n            quiz_id=quiz_id,\n            question_text=form.question_text.data,\n            answer=form.answer.data,\n            difficulty_level=form.difficulty_level.data\n        )\n        db.session.add(question)\n        db.session.commit()\n        flash('Question added successfully!', 'success')\n        return redirect(url_for('quiz.edit', quiz_id=quiz_id))\n\n    return render_template('quiz/add_question.html', form=form, quiz=quiz)\n\n\n@quiz.route('/<quiz_id>/edit_question/<question_id>', methods=['GET', 'POST'])\n@login_required\ndef edit_question(quiz_id, question_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    question = Question.query.get_or_404(question_id)\n    if quiz.user_owner_id != current_user.id or question.quiz_id != quiz_id:\n        abort(403)\n\n    form = QuestionForm(obj=question)\n    if form.validate_on_submit():\n        form.populate_obj(question)\n        db.session.commit()\n        flash('Question updated successfully!', 'success')\n        return redirect(url_for('quiz.edit', quiz_id=quiz_id))\n\n    return render_template('quiz/edit_question.html', form=form, quiz=quiz, question=question)\n\n\n@quiz.route('/<quiz_id>/delete_question/<question_id>', methods=['POST'])\n@login_required\ndef delete_question(quiz_id, question_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    question = Question.query.get_or_404(question_id)\n    if quiz.user_owner_id != current_user.id or question.quiz_id != quiz_id:\n        abort(403)\n\n    db.session.delete(question)\n    db.session.commit()\n    flash('Question deleted successfully!', 'success')\n    return redirect(url_for('quiz.edit', quiz_id=quiz_id))"
    },
    {
      "path": "app/models/user.py",
      "content": "import logging\nimport uuid\n\nfrom flask_login import UserMixin\nfrom sqlalchemy import Column, String\n\nfrom .. import db\n\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'user'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    email = Column(String(255), unique=True, nullable=False)\n    first_name = Column(String(255))\n    last_name = Column(String(255))\n    picture = Column(String(255))\n\n    quizzes = db.relationship(\"Quiz\", back_populates=\"owner\")\n    answers = db.relationship(\"Answer\", back_populates=\"user\")\n\n    def __init__(self, email, first_name=None, last_name=None, picture=None):\n        self.email = email\n        self.first_name = first_name\n        self.last_name = last_name\n        self.picture = picture\n\n    @staticmethod\n    def get(email):\n        return User.query.filter_by(email=email).first()\n\n    @staticmethod\n    def create(email, first_name=None, last_name=None, picture=None):\n        user = User(email=email, first_name=first_name, last_name=last_name, picture=picture)\n        db.session.add(user)\n        db.session.commit()\n        logging.info(f\"Created new user with email: {email}\")\n        return user\n\n    @staticmethod\n    def get_or_create(email, first_name=None, last_name=None, picture=None):\n        user = User.get(email)\n        if user is None:\n            user = User.create(email, first_name, last_name, picture)\n        else:\n            user.update(first_name, last_name, picture)\n        return user\n\n    def update(self, first_name=None, last_name=None, picture=None):\n        if first_name is not None:\n            self.first_name = first_name\n        if last_name is not None:\n            self.last_name = last_name\n        if picture is not None:\n            self.picture = picture\n        db.session.commit()\n        logging.info(f\"Updated user information for email: {self.email}\")\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'email': self.email,\n            'first_name': self.first_name,\n            'last_name': self.last_name,\n            'picture': self.picture\n        }\n\n    @staticmethod\n    def from_dict(data):\n        return User.get_or_create(\n            email=data.get('email'),\n            first_name=data.get('first_name'),\n            last_name=data.get('last_name'),\n            picture=data.get('picture')\n        )\n"
    },
    {
      "path": "app/models/models.py",
      "content": "import uuid\n\nfrom sqlalchemy import Column, String, DateTime, ForeignKey, func\nfrom sqlalchemy.orm import relationship\n\nfrom .. import db\n\n\nclass Quiz(db.Model):\n    __tablename__ = 'quiz'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_owner_id = Column(String(36), ForeignKey('user.id'))\n    title = Column(String(255))\n    created_date = Column(DateTime, default=func.now())\n\n    owner = relationship(\"User\", back_populates=\"quizzes\")\n    questions = relationship(\"Question\", back_populates=\"quiz\")\n    page_scans = relationship(\"PageScan\", back_populates=\"quiz\")\n\n\nclass Question(db.Model):\n    __tablename__ = 'question'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\n    page_scan_id = Column(String(36), ForeignKey('page_scan.id'))\n    question_text = Column(String(1000))\n    answer = Column(String(1000))\n    difficulty_level = Column(db.Integer)\n\n    quiz = relationship(\"Quiz\", back_populates=\"questions\")\n    page_scan = relationship(\"PageScan\", back_populates=\"questions\")\n\n\nclass Answer(db.Model):\n    __tablename__ = 'answer'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String(36), ForeignKey('user.id'))\n    answer_text = Column(String(1000))\n    audio_file_name = Column(String(255))\n    date = Column(DateTime, default=func.now())\n    feedback = Column(String(1000))\n    correctness = Column(db.Float)\n    completeness = Column(db.Float)\n\n    user = relationship(\"User\", back_populates=\"answers\")\n\n\nclass PageScan(db.Model):\n    __tablename__ = 'page_scan'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\n    page_position = Column(db.Integer)\n    file_name = Column(String(255))\n    created_date = Column(DateTime, default=func.now())\n\n    quiz = relationship(\"Quiz\", back_populates=\"page_scans\")\n    questions = relationship(\"Question\", back_populates=\"page_scan\")\n"
    },
    {
      "path": "app/models/__init__.py",
      "content": "from .user import User\nfrom .models import Quiz, Question, Answer, PageScan"
    },
    {
      "path": "app/templates/navbar.html",
      "content": "<nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\n    <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"{{ url_for('main.home') }}\">My Website</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\"\n                aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav me-auto\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'home' %}active{% endif %}\"\n                       href=\"{{ url_for('main.home') }}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'about' %}active{% endif %}\"\n                       href=\"{{ url_for('main.about') }}\">About</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'quiz.index' %}active{% endif %}\"\n                       href=\"{{ url_for('quiz.index') }}\">Quiz</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'services' %}active{% endif %}\"\n                       href=\"{{ url_for('answer.index') }}\">Answer</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'contact' %}active{% endif %}\"\n                       href=\"{{ url_for('main.contact') }}\">Contact</a>\n                </li>\n            </ul>\n            <ul class=\"navbar-nav\">\n                {% if current_user.is_authenticated %}\n                    <li class=\"nav-item\">\n                        {% if current_user.picture %}\n                            <img src=\"{{ current_user.picture }}\" alt=\"Profile\" class=\"rounded-circle\"\n                                 style=\"width: 24px; height: 24px; object-fit: cover;\">\n                        {% endif %}\n                        <span class=\"navbar-text me-3\">{{ session['user']['first_name'] }}</span>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{{ url_for('auth.logout') }}\">Logout</a>\n                    </li>\n                {% else %}\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{{ url_for('auth.login') }}\">Login</a>\n                    </li>\n                {% endif %}\n            </ul>\n        </div>\n    </div>\n</nav>"
    },
    {
      "path": "app/templates/base.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Book-Scan-Quizz{% endblock %}</title>\n    <!-- Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            padding-top: 56px;\n        }\n        .alert-danger {\n            color: #721c24;\n            background-color: #f8d7da;\n            border-color: #f5c6cb;\n        }\n    </style>\n    {% block extra_css %}{% endblock %}\n</head>\n<body>\n    {% include 'navbar.html' %}\n\n    <div class=\"container mt-4\">\n        {% with messages = get_flashed_messages(with_categories=true) %}\n            {% if messages %}\n                {% for category, message in messages %}\n                    <div class=\"alert alert-{{ category }} alert-dismissible fade show\" role=\"alert\">\n                        {{ message }}\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n                    </div>\n                {% endfor %}\n            {% endif %}\n        {% endwith %}\n\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <!-- Bootstrap Bundle with Popper -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n    {% block extra_js %}{% endblock %}\n</body>\n</html>"
    },
    {
      "path": "app/templates/answer/index.html",
      "content": "{% extends \"base.html\" %}\n\n{% block title %}Quiz - My Website{% endblock %}\n\n{% block content %}\n<h1>Welcome to the Quiz Page</h1>\n<p>Press and hold the button to record your answer.</p>\n\n<div class=\"text-center my-4\">\n    <button id=\"recordButton\" class=\"btn btn-lg btn-success rounded-circle\" style=\"width: 100px; height: 100px;\">\n        Record\n    </button>\n</div>\n\n<div id=\"recordingFeedback\" class=\"text-center my-2\" style=\"display: none;\">\n    Recording... <span id=\"recordingDuration\">0</span>s\n</div>\n\n<div id=\"processingFeedback\" class=\"text-center my-2\" style=\"display: none;\">\n    Processing your audio...\n</div>\n\n<div id=\"resultContainer\" class=\"mt-4\">\n    <h3>Result:</h3>\n    <p id=\"resultText\"></p>\n</div>\n\n<div id=\"audioVisualization\" class=\"mt-3\" style=\"display: none;\">\n    <div id=\"audioMeter\" style=\"width: 0%; height: 20px; background-color: #4CAF50; transition: width 0.1s;\"></div>\n</div>\n\n{% endblock %}\n\n{% block extra_js %}\n<script>\nlet mediaRecorder;\nlet audioChunks = [];\nlet startTime;\nlet durationInterval;\nlet audioContext;\nlet analyser;\nlet dataArray;\nlet animationId;\n\nconst recordButton = document.getElementById('recordButton');\nconst recordingFeedback = document.getElementById('recordingFeedback');\nconst recordingDuration = document.getElementById('recordingDuration');\nconst resultText = document.getElementById('resultText');\nconst processingFeedback = document.getElementById('processingFeedback');\nconst audioVisualization = document.getElementById('audioVisualization');\nconst audioMeter = document.getElementById('audioMeter');\n\nrecordButton.addEventListener('mousedown', startRecording);\nrecordButton.addEventListener('mouseup', stopRecording);\nrecordButton.addEventListener('mouseleave', stopRecording);\n\nfunction disableButton() {\n    recordButton.disabled = true;\n    recordButton.classList.remove('btn-success', 'btn-danger');\n    recordButton.classList.add('btn-secondary');\n    recordButton.style.cursor = 'not-allowed';\n}\n\nfunction enableButton() {\n    recordButton.disabled = false;\n    recordButton.classList.remove('btn-secondary');\n    recordButton.classList.add('btn-success');\n    recordButton.style.cursor = 'pointer';\n}\n\nfunction startRecording() {\n    if (recordButton.disabled) return;\n\n    audioChunks = [];\n    navigator.mediaDevices.getUserMedia({ audio: true })\n        .then(stream => {\n            mediaRecorder = new MediaRecorder(stream);\n            mediaRecorder.start();\n            startTime = Date.now();\n\n            mediaRecorder.addEventListener(\"dataavailable\", event => {\n                audioChunks.push(event.data);\n            });\n\n            recordButton.classList.remove('btn-success');\n            recordButton.classList.add('btn-danger');\n            recordingFeedback.style.display = 'block';\n            audioVisualization.style.display = 'block';\n            startDurationCounter();\n            startAudioVisualization(stream);\n        });\n}\n\nfunction stopRecording() {\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n        recordButton.classList.remove('btn-danger');\n        recordButton.classList.add('btn-success');\n        recordingFeedback.style.display = 'none';\n        audioVisualization.style.display = 'none';\n        stopDurationCounter();\n        stopAudioVisualization();\n\n        mediaRecorder.addEventListener(\"stop\", () => {\n            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n            sendAudioToServer(audioBlob);\n        });\n    }\n}\n\nfunction startDurationCounter() {\n    recordingDuration.textContent = '0';\n    durationInterval = setInterval(() => {\n        const duration = Math.floor((Date.now() - startTime) / 1000);\n        recordingDuration.textContent = duration;\n    }, 1000);\n}\n\nfunction stopDurationCounter() {\n    clearInterval(durationInterval);\n}\n\nfunction startAudioVisualization(stream) {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = audioContext.createAnalyser();\n    const source = audioContext.createMediaStreamSource(stream);\n    source.connect(analyser);\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n\n    function updateAudioMeter() {\n        analyser.getByteFrequencyData(dataArray);\n        const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n        const volume = Math.min(100, Math.max(0, average * 2));\n        audioMeter.style.width = `${volume}%`;\n        animationId = requestAnimationFrame(updateAudioMeter);\n    }\n\n    updateAudioMeter();\n}\n\nfunction stopAudioVisualization() {\n    if (audioContext) {\n        audioContext.close();\n    }\n    if (animationId) {\n        cancelAnimationFrame(animationId);\n    }\n}\n\nfunction sendAudioToServer(audioBlob) {\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"recording.wav\");\n\n    resultText.textContent = '';\n    processingFeedback.style.display = 'block';\n    disableButton();\n\n    fetch('/answer/evaluate_audio', {\n        method: 'POST',\n        body: formData\n    })\n    .then(response => response.json())\n    .then(data => {\n        processingFeedback.style.display = 'none';\n        if (data.error) {\n            resultText.textContent = data.error;\n            resultText.style.color = 'red';\n        } else {\n            resultText.textContent = data.result;\n            resultText.style.color = 'initial';\n        }\n        enableButton();\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        processingFeedback.style.display = 'none';\n        resultText.textContent = 'An error occurred while processing the audio.';\n        resultText.style.color = 'red';\n        enableButton();\n    });\n}\n</script>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/answer.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Answer Quiz: {{ quiz.title }}</h1>\n    <form method=\"POST\">\n        {% for question in questions %}\n            <div>\n                <h3>Question {{ loop.index }}</h3>\n                <p>{{ question.question_text }}</p>\n                <input type=\"text\" name=\"answer_{{ question.id }}\" required>\n            </div>\n        {% endfor %}\n        <button type=\"submit\">Submit Answers</button>\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/index.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>My Quizzes</h1>\n    <a href=\"{{ url_for('quiz.create') }}\" class=\"btn btn-primary\">Create New Quiz</a>\n    <ul>\n    {% for quiz in quizzes %}\n        <li>\n            {{ quiz.title }}\n            <a href=\"{{ url_for('quiz.edit', quiz_id=quiz.id) }}\">Edit</a>\n            <a href=\"{{ url_for('quiz.answer', quiz_id=quiz.id) }}\">Answer</a>\n        </li>\n    {% endfor %}\n    </ul>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/create.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Create New Quiz</h1>\n    <form method=\"POST\" enctype=\"multipart/form-data\">\n        {{ form.hidden_tag() }}\n        <div>\n            {{ form.title.label }}\n            {{ form.title() }}\n        </div>\n        <div>\n            {{ form.images.label }}\n            {{ form.images() }}\n        </div>\n        {{ form.submit() }}\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/add_question.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Add Question to Quiz: {{ quiz.title }}</h1>\n    <form method=\"POST\">\n        {{ form.hidden_tag() }}\n        <div>\n            {{ form.question_text.label }}\n            {{ form.question_text() }}\n        </div>\n        <div>\n            {{ form.answer.label }}\n            {{ form.answer() }}\n        </div>\n        <div>\n            {{ form.difficulty_level.label }}\n            {{ form.difficulty_level() }}\n        </div>\n        {{ form.submit() }}\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/edit_question.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Edit Question for Quiz: {{ quiz.title }}</h1>\n    <form method=\"POST\">\n        {{ form.hidden_tag() }}\n        <div>\n            {{ form.question_text.label }}\n            {{ form.question_text() }}\n        </div>\n        <div>\n            {{ form.answer.label }}\n            {{ form.answer() }}\n        </div>\n        <div>\n            {{ form.difficulty_level.label }}\n            {{ form.difficulty_level() }}\n        </div>\n        {{ form.submit() }}\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/edit.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Edit Quiz: {{ quiz.title }}</h1>\n    <a href=\"{{ url_for('quiz.add_question', quiz_id=quiz.id) }}\" class=\"btn btn-primary\">Add New Question</a>\n    {% for question in questions %}\n        <div>\n            <h3>Question {{ loop.index }}</h3>\n            <p>{{ question.question_text }}</p>\n            <p>Answer: {{ question.answer }}</p>\n            <p>Difficulty: {{ question.difficulty_level }}</p>\n            <a href=\"{{ url_for('quiz.edit_question', quiz_id=quiz.id, question_id=question.id) }}\" class=\"btn btn-secondary\">Edit</a>\n            <form action=\"{{ url_for('quiz.delete_question', quiz_id=quiz.id, question_id=question.id) }}\" method=\"POST\" style=\"display: inline;\">\n                <input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" onclick=\"return confirm('Are you sure you want to delete this question?');\">\n            </form>\n        </div>\n    {% endfor %}\n{% endblock %}"
    },
    {
      "path": "app/templates/main/home.html",
      "content": "{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Welcome to Book-Scan-Quizz</h1>\n\n{% if current_user.is_authenticated %}\n    <p>Hello, {{ session['user']['first_name'] }}! Thanks for logging in with Google.</p>\n    <p>Your email is: {{ session['user']['email'] }}</p>\n    {% if session['user']['picture'] %}\n        <img src=\"{{ session['user']['picture'] }}\" alt=\"Profile Picture\" style=\"width: 50px; height: 50px; border-radius: 50%;\">\n    {% endif %}\n{% else %}\n    <p>This is the home page of our mobile-first website. Feel free to explore other pages using the navigation menu.</p>\n    <p>You can log in using your Google account to access more features.</p>\n{% endif %}\n\n{% endblock %}"
    },
    {
      "path": "app/templates/main/about.html",
      "content": "{% extends \"base.html\" %}\n\n{% block title %}About - My Website{% endblock %}\n\n{% block content %}\n<h1>About Us</h1>\n<p>We are a company dedicated to creating amazing mobile-first websites. Our team of experts ensures that every project we undertake is responsive, user-friendly, and visually appealing.</p>\n{% endblock %}"
    },
    {
      "path": "app/templates/main/contact.html",
      "content": "{% extends \"base.html\" %}\n\n{% block title %}Contact - My Website{% endblock %}\n\n{% block content %}\n<h1>Contact Us</h1>\n<p>Get in touch with us for any inquiries or project discussions.</p>\n<form>\n    <div class=\"mb-3\">\n        <label for=\"name\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" required>\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"email\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" required>\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"message\" class=\"form-label\">Message</label>\n        <textarea class=\"form-control\" id=\"message\" rows=\"3\" required></textarea>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n{% endblock %}"
    },
    {
      "path": "app/main/__init__.py",
      "content": "from flask import Blueprint\n\nmain = Blueprint('main', __name__)\n\nfrom . import routes, errors"
    },
    {
      "path": "app/main/errors.py",
      "content": ""
    },
    {
      "path": "app/main/routes.py",
      "content": "from flask import render_template\nfrom . import main\nfrom flask_login import current_user\n\n@main.route('/')\ndef home():\n    return render_template('main/home.html')\n\n@main.route('/about')\ndef about():\n    return render_template('main/about.html')\n\n@main.route('/contact')\ndef contact():\n    return render_template('main/contact.html')"
    },
    {
      "path": "tests/.DS_Store",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x86 in position 23: invalid start byte"
    },
    {
      "path": "tests/test_quiz.py",
      "content": ""
    },
    {
      "path": "tests/test_auth.py",
      "content": ""
    },
    {
      "path": "tests/__init__.py",
      "content": ""
    },
    {
      "path": "tests/test_transcribe.py",
      "content": "import unittest\nimport os\nfrom transcribe import transcribe_audio\nfrom app import create_app\nfrom config import config\n\n\nclass TestTranscribe(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app('testing')\n        self.app_context = self.app.app_context()\n        self.app_context.push()\n\n    def tearDown(self):\n        self.app_context.pop()\n\n    def test_transcribe_file(self):\n        # Get the absolute path to the test file using the app config\n        test_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                      \"..\",\n                                      self.app.config['UPLOAD_FOLDER'],\n                                      \"test_prompt.wav\")\n\n        # Ensure the test file exists\n        self.assertTrue(os.path.exists(test_file_path), f\"Test file not found: {test_file_path}\")\n\n        result = transcribe_audio(test_file_path)\n        print(result)\n        self.assertIsInstance(result, str)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "path": "tests/test_config.py",
      "content": "import os\n\n# Get the absolute path to the test directory\nTEST_DIR = os.path.dirname(os.path.abspath(__file__))\n\n# Define paths to test files\nTEST_FILES_DIR = os.path.join(TEST_DIR, 'files')\nTEST_AUDIO_DIR = os.path.join(TEST_FILES_DIR, 'audio')\nTEST_IMAGES_DIR = os.path.join(TEST_FILES_DIR, 'images')\n\n# Define specific test file paths\nTEST_AUDIO_FILE_1 = os.path.join(TEST_AUDIO_DIR, 'test_audio_1.wav')\nTEST_AUDIO_FILE_2 = os.path.join(TEST_AUDIO_DIR, 'test_audio_2.mp3')\nTEST_IMAGE_FILE_1 = os.path.join(TEST_IMAGES_DIR, 'test_image_1.jpg')\nTEST_IMAGE_FILE_2 = os.path.join(TEST_IMAGES_DIR, 'test_image_2.png')\n\n# You can add more configurations here as needed"
    },
    {
      "path": "tests/test_main.py",
      "content": ""
    },
    {
      "path": "tests/google_ai/test_transcription.py",
      "content": "# This file is intentionally left empty"
    },
    {
      "path": "tests/google_ai/test_file_utils.py",
      "content": "# This file is intentionally left empty"
    },
    {
      "path": "tests/google_ai/__init__.py",
      "content": "# This file is intentionally left empty"
    },
    {
      "path": "tests/google_ai/test_question_generator.py",
      "content": "# This file is intentionally left empty"
    },
    {
      "path": "tests/files/audio/german_wrong_sentence.wav",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x9f in position 4: invalid start byte"
    },
    {
      "path": "tests/files/audio/dummy_serbian.wav",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x9f in position 4: invalid start byte"
    },
    {
      "path": "google_ai/transcription.py",
      "content": "from typing import Optional\nimport google.generativeai as genai\nfrom flask import current_app\nfrom .config import *\n\n\ndef transcribe_audio(audio_path: str, mime_type: str = \"audio/wav\", model_name: str = DEFAULT_TRANSCRIPTION_MODEL) -> \\\nOptional[str]:\n    \"\"\"\n    Transcribes the audio file at the given path using Google's Generative AI.\n\n    Args:\n    audio_path (str): Path to the audio file.\n    mime_type (str): MIME type of the audio file. Defaults to \"audio/wav\".\n    model_name (str): Name of the Gemini model to use. Defaults to the value in config.py.\n\n    Returns:\n    Optional[str]: The transcribed text, or None if transcription failed.\n    \"\"\"\n    try:\n        genai.configure(api_key=current_app.config['GEMINI_API_KEY'])\n\n        model = genai.GenerativeModel(\n            model_name=model_name,\n            generation_config=GENERATION_CONFIG,\n            safety_settings=SAFETY_SETTINGS\n        )\n\n        file = genai.upload_file(audio_path, mime_type=mime_type)\n\n        chat_session = model.start_chat(\n            history=[\n                {\n                    \"role\": \"user\",\n                    \"parts\": [file],\n                }\n            ]\n        )\n\n        response = chat_session.send_message(\"Transcribe the audio file and provide a summary.\")\n\n        return response.text\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in transcribe_audio: {str(e)}\")\n        return None"
    },
    {
      "path": "google_ai/config.py",
      "content": "\"\"\"\nShared configuration settings for Google AI services.\n\"\"\"\n\n# Default model names\nDEFAULT_TRANSCRIPTION_MODEL = \"gemini-1.5-flash\"\nDEFAULT_QUESTION_GENERATOR_MODEL = \"gemini-1.5-pro-latest\"\n\n# Generation configuration\nGENERATION_CONFIG = {\n    \"temperature\": 0,\n    \"top_p\": 0.95,\n    \"top_k\": 64,\n    \"max_output_tokens\": 8192,\n}\n\n# Safety settings\nSAFETY_SETTINGS = [\n    {\n        \"category\": \"HARM_CATEGORY_HARASSMENT\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n    {\n        \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n    {\n        \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n    {\n        \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n]"
    },
    {
      "path": "google_ai/__init__.py",
      "content": "\"\"\"\nGoogle AI Module\n\nThis module provides functionality for transcription and question generation\nusing Google's AI services.\n\"\"\"\n\nfrom .transcription import transcribe_audio\nfrom .question_generator import generate_questions\nfrom . import config\n\n__all__ = ['transcribe_audio', 'generate_questions', 'config']\n\n# Version of the google_ai module\n__version__ = \"0.2.0\""
    },
    {
      "path": "google_ai/question_generator.py",
      "content": "from typing import List, Dict, Any, Optional\nimport google.generativeai as genai\nfrom flask import current_app\nfrom .config import *\n\ndef generate_questions(image_paths: List[str], model_name: str = DEFAULT_QUESTION_GENERATOR_MODEL) -> Optional[List[Dict[str, Any]]]:\n    \"\"\"\n    Generate questions based on the provided images using Google's Generative AI.\n\n    Args:\n    image_paths (List[str]): List of paths to image files.\n    model_name (str): Name of the Gemini model to use. Defaults to the value in config.py.\n\n    Returns:\n    Optional[List[Dict[str, Any]]]: List of generated questions with their details, or None if generation failed.\n    \"\"\"\n    try:\n        genai.configure(api_key=current_app.config['GEMINI_API_KEY'])\n\n        model = genai.GenerativeModel(\n            model_name=model_name,\n            generation_config=GENERATION_CONFIG,\n            safety_settings=SAFETY_SETTINGS\n        )\n\n        uploaded_files = [genai.upload_file(path) for path in image_paths]\n\n        prompt = \"\"\"\n        * make sure that you analyze all the uploaded images \n        * for each image find the relevant topics \n        * for each topic come up with one or more relevant questions\n        * questions and answers MUST come from uploaded images ONLY!\n        * if you can not analyze provide information on that \n        * do not stop until you have analyzed all images \n        * provide your results as JSON\n        * each json element MUST have the following structure: page_nr, question, answer, difficulty_level\n        * difficulty_level should be one of: easy, medium, hard\n        * be very careful to provide VALID JSON!\n        \"\"\"\n\n        conversation = model.start_chat(history=[\n            {\n                \"role\": \"user\",\n                \"parts\": uploaded_files + [prompt]\n            }\n        ])\n\n        response = conversation.send_message(prompt)\n\n        try:\n            return response.json()\n        except ValueError:\n            current_app.logger.error(\"Failed to parse JSON response from AI model.\")\n            return None\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in generate_questions: {str(e)}\")\n        return None"
    },
    {
      "path": "google_ai/file_utils.py",
      "content": "# This file is intentionally left empty"
    },
    {
      "path": "instance/dev.sqlite",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0xf8 in position 102: invalid start byte"
    },
    {
      "path": ".idea/dataSources.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"DataSourceManagerImpl\" format=\"xml\" multifile-model=\"true\">\n    <data-source source=\"LOCAL\" name=\"dev\" uuid=\"1fa8386b-743c-4a1c-bd62-c22020f5b709\">\n      <driver-ref>sqlite.xerial</driver-ref>\n      <synchronize>true</synchronize>\n      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>\n      <jdbc-url>jdbc:sqlite:E:\\source\\repos\\book-scan-quizz\\instance\\dev.sqlite</jdbc-url>\n      <jdbc-additional-properties>\n        <property name=\"com.intellij.clouds.kubernetes.db.enabled\" value=\"false\" />\n      </jdbc-additional-properties>\n      <working-dir>$ProjectFileDir$</working-dir>\n      <libraries>\n        <library>\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/xerial/sqlite-jdbc/3.45.1.0/sqlite-jdbc-3.45.1.0.jar</url>\n        </library>\n        <library>\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar</url>\n        </library>\n      </libraries>\n    </data-source>\n  </component>\n</project>"
    },
    {
      "path": ".idea/experiment-mobileweb.iml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"Flask\">\n    <option name=\"enabled\" value=\"true\" />\n  </component>\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.12\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"TemplatesService\">\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />\n    <option name=\"TEMPLATE_FOLDERS\">\n      <list>\n        <option value=\"$MODULE_DIR$/templates\" />\n      </list>\n    </option>\n  </component>\n</module>"
    },
    {
      "path": ".idea/dataSources.local.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"dataSourceStorageLocal\" created-in=\"PY-233.14475.56\">\n    <data-source name=\"dev\" uuid=\"1fa8386b-743c-4a1c-bd62-c22020f5b709\">\n      <database-info product=\"\" version=\"\" jdbc-version=\"\" driver-name=\"\" driver-version=\"\" dbms=\"SQLITE\" />\n      <schema-mapping />\n    </data-source>\n  </component>\n</project>"
    },
    {
      "path": ".idea/vcs.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"VcsDirectoryMappings\">\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n  </component>\n</project>"
    },
    {
      "path": ".idea/.gitignore",
      "content": "# Default ignored files\n/shelf/\n/workspace.xml\n# Editor-based HTTP Client requests\n/httpRequests/\n# Datasource local storage ignored files\n/dataSources/\n/dataSources.local.xml\n"
    },
    {
      "path": ".idea/workspace.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/export_structure.py\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/google_ai/config.py\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/tests/test_config.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/audio_uploads/test_german_1.wav\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/audio_uploads/test_prompt.wav\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/create_structure.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/create_structure.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2iIEhKaLBYBbFhtm0UxCg8yVGaW\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Flask server.Flask (app).executor\": \"Run\",\n    \"Flask server.Flask.executor\": \"Debug\",\n    \"Python.create_structure.executor\": \"Run\",\n    \"Python.export_structure.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"master\",\n    \"last_opened_file_path\": \"/Users/almirkazazic/Documents/GitHub/book-scan-quizz\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/tests/files/audio\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Python.create_structure\">\n    <configuration name=\"create_structure\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/create_structure.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"Flask (app)\" type=\"Python.FlaskServer\">\n      <option name=\"flaskDebug\" value=\"true\" />\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"target\" value=\"$PROJECT_DIR$/app\" />\n      <option name=\"targetType\" value=\"PATH\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"$USER_HOME$/PycharmProjects/first/.venv/bin/python\" />\n      <option name=\"SDK_NAME\" value=\"Python 3.12 (first)\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <EXTENSION ID=\"net.ashald.envfile\">\n        <option name=\"IS_ENABLED\" value=\"false\" />\n        <option name=\"IS_SUBST\" value=\"false\" />\n        <option name=\"IS_PATH_MACRO_SUPPORTED\" value=\"false\" />\n        <option name=\"IS_IGNORE_MISSING_FILES\" value=\"false\" />\n        <option name=\"IS_ENABLE_EXPERIMENTAL_INTEGRATIONS\" value=\"false\" />\n        <ENTRIES>\n          <ENTRY IS_ENABLED=\"true\" PARSER=\"runconfig\" IS_EXECUTABLE=\"false\" />\n        </ENTRIES>\n      </EXTENSION>\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.create_structure\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-d68999036c7f-b11f5e8da5ad-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.14475.56\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\" name=\"Changes\" comment=\"\" />\n      <created>1719169808821</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1719169808821</updated>\n      <workItem from=\"1719169810018\" duration=\"6133000\" />\n      <workItem from=\"1719575605919\" duration=\"2271000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\n          <line>25</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\n          <line>15</line>\n          <option name=\"timeStamp\" value=\"2\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$Flask__app_.coverage\" NAME=\"Flask (app) Coverage Results\" MODIFIED=\"1719575767744\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$create_structure.coverage\" NAME=\"create_structure Coverage Results\" MODIFIED=\"1719642799324\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$Flask.coverage\" NAME=\"Flask (app) Coverage Results\" MODIFIED=\"1719178837235\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$export_structure.coverage\" NAME=\"export_structure Coverage Results\" MODIFIED=\"1719575807717\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>"
    },
    {
      "path": ".idea/modules.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/experiment-mobileweb.iml\" filepath=\"$PROJECT_DIR$/.idea/experiment-mobileweb.iml\" />\n    </modules>\n  </component>\n</project>"
    },
    {
      "path": ".idea/misc.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Black\">\n    <option name=\"sdkName\" value=\"Python 3.11 (experiment-mobileweb)\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12\" project-jdk-type=\"Python SDK\" />\n</project>"
    },
    {
      "path": ".idea/inspectionProfiles/profiles_settings.xml",
      "content": "<component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>"
    }
  ]
}