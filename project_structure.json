{
  "project_structure": [
    {
      "path": "app-old.txt",
      "content": "from flask import Flask, render_template, redirect, url_for, session, request, flash, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom authlib.integrations.flask_client import OAuth\nfrom authlib.integrations.base_client.errors import OAuthError\nfrom config import config\nimport os\nfrom werkzeug.utils import secure_filename\nimport google.generativeai as genai\nfrom transcribe import transcribe_audio\n\ndb = SQLAlchemy()\noauth = OAuth()\n\ndef home():\n    return render_template('home.html', active_page='home')\n\ndef about():\n    return render_template('about.html', active_page='about')\n\ndef quizz():\n    return render_template('quizz.html', active_page='services')\n\ndef contact():\n    return render_template('contact.html', active_page='contact')\n\ndef login():\n    google = oauth.create_client('google')\n    redirect_uri = url_for('authorized', _external=True)\n    return google.authorize_redirect(redirect_uri)\n\ndef logout():\n    session.pop('google_token', None)\n    session.pop('user_email', None)\n    return redirect(url_for('home'))\n\ndef authorized():\n    try:\n        google = oauth.create_client('google')\n        token = google.authorize_access_token()\n        user_info = token.get('userinfo')\n        if user_info:\n            session['google_token'] = token\n            session['user_email'] = user_info['email']\n            flash('Successfully logged in!', 'success')\n        return redirect(url_for('home'))\n    except OAuthError as e:\n        flash('Failed to log in. Access was denied.', 'danger')\n        return redirect(url_for('home'))\n\n\ndef evaluate_audio():\n    if 'audio' not in request.files:\n        return jsonify({'error': 'No audio file provided'}), 400\n\n    audio_file = request.files['audio']\n\n    if audio_file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n\n    if audio_file:\n        filename = secure_filename(audio_file.filename)\n\n        # Ensure the upload folder exists\n        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n        audio_file.save(filepath)\n\n        try:\n            # Transcribe the audio using Gemini\n            transcription = transcribe_audio(filepath)\n\n            # Here you can add any additional processing or evaluation of the transcription\n\n            return jsonify({\n                'result':  transcription, # 'Audio processed successfully',\n                'transcription': transcription\n            })\n        except Exception as e:\n            return jsonify({'error': f'Error processing audio: {str(e)}'}), 500\n        finally:\n            # Optionally, remove the file after processing\n            os.remove(filepath)\n\n\ndef create_app(config_name=None):\n    app = Flask(__name__)\n\n    if config_name is None:\n        config_name = os.environ.get('FLASK_CONFIG', 'default')\n\n    config_name = config_name or os.getenv('FLASK_CONFIG', 'default')\n    app.config.from_object(config[config_name])\n\n    db.init_app(app)\n    oauth.init_app(app)\n\n    oauth.register(\n        name='google',\n        client_id=app.config['GOOGLE_CLIENT_ID'],\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n        client_kwargs={'scope': 'openid email profile'},\n    )\n\n    app.add_url_rule('/', 'home', home)\n    app.add_url_rule('/about', 'about', about)\n    app.add_url_rule('/quizz', 'quizz', quizz)\n    app.add_url_rule('/contact', 'contact', contact)\n    app.add_url_rule('/login', 'login', login)\n    app.add_url_rule('/logout', 'logout', logout)\n    app.add_url_rule('/login/authorized', 'authorized', authorized)\n    app.add_url_rule('/evaluate_audio', 'evaluate_audio', evaluate_audio, methods=['POST'])\n\n    return app\n\napp = create_app()\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
      "path": "run.py",
      "content": "import os\nfrom app import create_app, db\n#from app.models.user import User\n#from app.models.models import Quiz, Question, Answer, PageScan\n\napp = create_app(os.getenv('FLASK_CONFIG') or 'default')\n\n#\n# @app.cli.command(\"init-db\")\n# def init_db():\n#     db.create_all()\n#     print(\"Database tables created.\")\n\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n    app.run()"
    },
    {
      "path": ".DS_Store",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x80 in position 3131: invalid start byte"
    },
    {
      "path": "config.py",
      "content": "import os\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess string'\n    GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')\n    GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    UPLOAD_FOLDER = os.environ.get('UPLOAD_FOLDER') or 'audio_uploads'\n    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY') or \"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\"\n    SQLALCHEMY_ECHO = False  # Default to False, enable per environment as needed\n\n    @staticmethod\n    def init_app(app):\n        pass\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(os.path.abspath(os.path.dirname(__file__)), 'dev.sqlite')\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for development\n\n\nclass TestingConfig(Config):\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or 'sqlite:///:memory:'\n    SQLALCHEMY_ECHO = True  # Enable SQL query logging for testing\n\n\nclass ProductionConfig(Config):\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n\n    @classmethod\n    def init_app(cls, app):\n        Config.init_app(app)\n\n        # log to syslog\n        import logging\n        from logging.handlers import SysLogHandler\n        syslog_handler = SysLogHandler()\n        syslog_handler.setLevel(logging.WARNING)\n        app.logger.addHandler(syslog_handler)\n\nconfig = {\n    'development': DevelopmentConfig,\n    'testing': TestingConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}"
    },
    {
      "path": "requirements.txt",
      "content": "Flask~=3.0.3\n#flask-oauthlib\nauthlib~=1.3.1\nrequests\npython-dotenv~=1.0.1\nFlask-SQLAlchemy\n# google-cloud-speech\ngoogle-generativeai\n# psycopg2\n# mysqlclient\nflask-login\nWerkzeug~=3.0.3\nclick~=8.1.7\nSQLAlchemy~=2.0.31\nFlask-WTF\n"
    },
    {
      "path": ".gitignore",
      "content": "/__pycache__\n/audio_uploads\n__pycache__/\n*.pyc\n.pytest_cache/\n*.egg-info/\ndist/\nbuild/\n.env\nvenv\n/venv\n/instance\n"
    },
    {
      "path": ".env",
      "content": "GOOGLE_CLIENT_ID=792066325521-dgtt0c4cp36nace09o3fcslflh9m4s4h.apps.googleusercontent.com\nGOOGLE_CLIENT_SECRET=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\nFLASK_CONFIG=development\nSECRET_KEY=your_secret_key_here\nDEV_DATABASE_URL=sqlite:///dev.sqlite\nTEST_DATABASE_URL=sqlite:///test.sqlite\nDATABASE_URL=postgresql://user:password@localhost/dbname"
    },
    {
      "path": "transcribe.py",
      "content": "\nimport google.generativeai as genai\nfrom flask import current_app\n\n\n#os.environ[\"GEMINI_API_KEY\"] = \"AIzaSyDQyT_XQpie3uGPa2DbYGf6yaNie0CzyV0\"\n# genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n\n\ndef transcribe_file(file_path: str) -> str:\n    \"\"\"\n    Transcribe the audio file at the given path.\n\n    :param file_path: Path to the audio file\n    :return: Transcribed text\n    \"\"\"\n    # Placeholder implementation\n    return \"Hello World! This is a placeholder transcription.\"\n\n\n\n\"\"\"\nInstall the Google AI Python SDK\n\n$ pip install google-generativeai\n\nSee the getting started guide for more information:\nhttps://ai.google.dev/gemini-api/docs/get-started/python\n\"\"\"\n\n\n\n\ndef upload_to_gemini(path, mime_type=\"audio/wav\"):\n  \"\"\"Uploads the given file to Gemini.\n\n  See https://ai.google.dev/gemini-api/docs/prompting_with_media\n  \"\"\"\n  file = genai.upload_file(path, mime_type=mime_type)\n  print(f\"Uploaded file '{file.display_name}' as: {file.uri}\")\n  return file\n\ndef transcribe_audio(audio_path: str, mime_type=\"audio/wav\") -> str:\n  genai.configure(api_key=current_app.config['GEMINI_API_KEY'])\n  # See https://ai.google.dev/api/python/google/generativeai/GenerativeModel\n  generation_config = {\n    \"temperature\": 1,\n    \"top_p\": 0.95,\n    \"top_k\": 64,\n    \"max_output_tokens\": 8192,\n    \"response_mime_type\": \"text/plain\",\n  }\n\n  model = genai.GenerativeModel(\n    model_name=\"gemini-1.5-flash\",\n    generation_config=generation_config,\n    # safety_settings = Adjust safety settings\n    # See https://ai.google.dev/gemini-api/docs/safety-settings\n  )\n\n  # TODO Make these files available on the local file system\n  # You may need to update the file paths\n  # files = [\n  #   upload_to_gemini(audio_path, mime_type=mime_type),\n  # ]\n  file = upload_to_gemini(audio_path, mime_type=mime_type)\n\n  chat_session = model.start_chat(\n    history=[\n      {\n        \"role\": \"user\",\n        \"parts\": [file],\n      },\n    ]\n  )\n\n  response = chat_session.send_message(\"give a short summary of the file\")\n\n  print(response.text)\n  return response.text"
    },
    {
      "path": "create_structure.py",
      "content": "import os\n\ndef create_directory(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n        print(f\"Created directory: {path}\")\n\ndef create_file(path):\n    if not os.path.exists(path):\n        with open(path, 'w') as f:\n            f.write(\"# This file is intentionally left empty\")\n        print(f\"Created file: {path}\")\n\ndef generate_structure():\n    # Define the base directories\n    base_dir = os.path.dirname(os.path.abspath(__file__))\n    google_ai_dir = os.path.join(base_dir, 'google_ai')\n    tests_dir = os.path.join(base_dir, 'tests')\n    tests_google_ai_dir = os.path.join(tests_dir, 'google_ai')\n\n    # Create directories\n    create_directory(google_ai_dir)\n    create_directory(tests_dir)\n    create_directory(tests_google_ai_dir)\n\n    # Create files in google_ai directory\n    create_file(os.path.join(google_ai_dir, '__init__.py'))\n    create_file(os.path.join(google_ai_dir, 'transcription.py'))\n    create_file(os.path.join(google_ai_dir, 'question_generator.py'))\n    create_file(os.path.join(google_ai_dir, 'file_utils.py'))\n\n    # Create files in tests/google_ai directory\n    create_file(os.path.join(tests_google_ai_dir, '__init__.py'))\n    create_file(os.path.join(tests_google_ai_dir, 'test_transcription.py'))\n    create_file(os.path.join(tests_google_ai_dir, 'test_question_generator.py'))\n    create_file(os.path.join(tests_google_ai_dir, 'test_file_utils.py'))\n\n    print(\"File structure generated successfully!\")\n\nif __name__ == \"__main__\":\n    generate_structure()"
    },
    {
      "path": "export_structure.py",
      "content": "import os\nimport json\n\n\ndef should_exclude(path):\n    exclude_dirs = {'.venv', 'venv', '__pycache__', 'node_modules', '.git', 'audio_uploads'}\n    exclude_extensions = {'.pyc', '.pyo', '.pyd', '.db', '.sqlite3', 'wav', 'pdf', 'png', 'jpg', 'jpeg', 'json'}\n\n    parts = path.split(os.sep)\n    if any(part in exclude_dirs for part in parts):\n        return True\n\n    _, ext = os.path.splitext(path)\n    return ext.lower() in exclude_extensions\n\n\ndef read_file_content(file_path):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            return file.read()\n    except Exception as e:\n        return f\"Error reading file: {str(e)}\"\n\n\ndef explore_directory(directory):\n    structure = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if not should_exclude(file_path):\n                relative_path = os.path.relpath(file_path, directory)\n                structure.append({\n                    'path': relative_path,\n                    'content': read_file_content(file_path)\n                })\n    return structure\n\n\ndef export_project_structure(root_dir='.'):\n\n    if os.path.exists('project_structure.json'):\n        os.remove('project_structure.json')\n\n    project_structure = explore_directory(root_dir)\n    output = {\n        'project_structure': project_structure\n    }\n\n    with open('project_structure.json', 'w', encoding='utf-8') as f:\n        json.dump(output, f, indent=2)\n\n\nif __name__ == \"__main__\":\n    export_project_structure()\n    print(\"Project structure exported to project_structure.json\")"
    },
    {
      "path": "app/run.py",
      "content": "import os\nfrom app import create_app\n\napp = create_app(os.getenv('FLASK_CONFIG') or 'default')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
      "path": "app/__init__.py",
      "content": "import logging\nimport os\n\nfrom flask import Flask\nfrom flask_login import LoginManager\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom config import config\nfrom .utils import init_oauth, oauth\n\ndb = SQLAlchemy()\nlogin_manager = LoginManager()\n\n\ndef create_app(config_name=None):\n    app = Flask(__name__)\n\n    if config_name is None:\n        config_name = os.getenv('FLASK_CONFIG', 'default')\n\n    app.config.from_object(config[config_name])\n    config[config_name].init_app(app)\n\n    db.init_app(app)\n\n    if app.config['SQLALCHEMY_ECHO']:\n        # Set up SQLAlchemy query logging\n        logging.basicConfig()\n        logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)\n\n    login_manager.init_app(app)\n    init_oauth(app)\n\n    from .models.user import User\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.query.get(user_id)\n\n    # Register blueprints\n    from .main import main as main_blueprint\n    app.register_blueprint(main_blueprint)\n\n    from .auth import auth as auth_blueprint\n    app.register_blueprint(auth_blueprint, url_prefix='/auth')\n\n    from .answer import answer as quiz_blueprint\n    app.register_blueprint(quiz_blueprint, url_prefix='/answer')\n\n    from .quiz import quiz as quiz_blueprint\n    app.register_blueprint(quiz_blueprint, url_prefix='/quiz')\n\n    # Import and register the init-db command\n    from .cli import init_db_command\n    app.cli.add_command(init_db_command)\n\n    return app\n"
    },
    {
      "path": "app/cli.py",
      "content": "import click\nfrom flask.cli import with_appcontext\nfrom flask import current_app\nfrom . import db\nimport os\nfrom sqlalchemy import inspect\n\n\n@click.command('init-db')\n@with_appcontext\ndef init_db_command():\n    \"\"\"Clear the existing data and create new tables.\"\"\"\n    db.create_all()\n\n    # Print all tables that SQLAlchemy is aware of\n    inspector = inspect(db.engine)\n    tables = inspector.get_table_names()\n    click.echo(f\"Tables created: {', '.join(tables)}\")\n\n    db_uri = current_app.config['SQLALCHEMY_DATABASE_URI']\n    if db_uri.startswith('sqlite:///'):\n        db_path = db_uri.replace('sqlite:///', '')\n        if not os.path.isabs(db_path):\n            db_path = os.path.join(current_app.instance_path, db_path)\n        click.echo(f\"SQLite database location: {os.path.abspath(db_path)}\")\n    else:\n        click.echo(f\"Database URI: {db_uri}\")"
    },
    {
      "path": "app/utils.py",
      "content": "from authlib.integrations.flask_client import OAuth\n\noauth = OAuth()\n\n\ndef init_oauth(app):\n    oauth.init_app(app)\n    oauth.register(\n        name='google',\n        client_id=app.config['GOOGLE_CLIENT_ID'],\n        client_secret=app.config['GOOGLE_CLIENT_SECRET'],\n        server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n        #client_kwargs={'scope': 'email'},\n        client_kwargs={'scope': 'openid email profile'}\n    )\n\n\n\n"
    },
    {
      "path": "app/answer/__init__.py",
      "content": "from flask import Blueprint\n\nanswer = Blueprint('answer', __name__)\n\nfrom . import routes"
    },
    {
      "path": "app/answer/routes.py",
      "content": "from flask import render_template, request, jsonify, current_app\nfrom werkzeug.utils import secure_filename\nfrom datetime import datetime\nfrom transcribe import transcribe_audio\nfrom . import answer\nimport os\n\n@answer.route('/')\ndef index():\n    return render_template('answer/index.html')\n\ndef generate_timestamp_filename(original_filename):\n    # Get current timestamp with milliseconds\n    timestamp = datetime.now().strftime(\"%Y%m%d-%H%M%S-%f\")\n    # Get the file extension\n    _, file_extension = os.path.splitext(original_filename)\n    # Create new filename\n    return f\"{timestamp}{file_extension}\"\n\n\n@answer.route('/evaluate_audio', methods=['POST'])\ndef evaluate_audio():\n    try:\n        if 'audio' not in request.files:\n            return jsonify({'error': 'No audio file provided'}), 400\n\n        audio_file = request.files['audio']\n\n        if audio_file.filename == '':\n            return jsonify({'error': 'No selected file'}), 400\n\n        if audio_file:\n            # Generate a new filename based on current timestamp\n            new_filename = generate_timestamp_filename(audio_file.filename)\n\n            # Secure the filename\n            secure_name = secure_filename(new_filename)\n\n            # Define the path where you want to save the file\n            save_path = os.path.join(current_app.config['UPLOAD_FOLDER'], secure_name)\n\n            # Save the file\n            audio_file.save(save_path)\n\n            # Now pass the saved file path to your transcribe_audio function\n            result = transcribe_audio(save_path)\n\n            # You might want to store the filename in your database here\n\n            return jsonify({'result': result, 'filename': secure_name})\n        else:\n            return jsonify({'error': 'Invalid file'}), 400\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in evaluate_audio: {str(e)}\")\n        return jsonify({'error': f'An error occurred while processing the audio: {str(e)}'}), 500"
    },
    {
      "path": "app/auth/__init__.py",
      "content": "from flask import Blueprint\n\nauth = Blueprint('auth', __name__)\n\nfrom . import routes"
    },
    {
      "path": "app/auth/routes.py",
      "content": "from flask import redirect, url_for, flash, session\nfrom flask_login import login_user, logout_user, current_user\n\nfrom . import auth\nfrom ..models import User\nfrom ..utils import oauth\n\n\n@auth.route('/login')\ndef login():\n    return oauth.google.authorize_redirect(url_for('auth.authorized', _external=True))\n\n\n@auth.route('/logout')\ndef logout():\n    if current_user.is_authenticated:\n        logout_user()\n    session.clear()  # This clears all session data\n    flash('You have been logged out.', 'danger')\n    return redirect(url_for('main.home'))\n\n\n@auth.route('/login/authorized')\ndef authorized():\n    try:\n        token = oauth.google.authorize_access_token()\n        user_info = token.get('userinfo')\n\n        if user_info:\n            user = User.get_or_create(\n                email=user_info['email'],\n                first_name=user_info.get('given_name'),\n                last_name=user_info.get('family_name'),\n                picture=user_info.get('picture')\n            )\n            login_user(user)\n            session['user'] = user.to_dict()  # Store all user info in session\n            flash('Logged in successfully.', 'success')\n        else:\n            flash('Failed to get user info from Google.', 'danger')\n\n        return redirect(url_for('main.home'))\n    except Exception as e:\n        flash(f'An error occurred: {str(e)}', 'danger')\n        return redirect(url_for('main.home'))\n"
    },
    {
      "path": "app/quiz/__init__.py",
      "content": "from flask import Blueprint\n\nquiz = Blueprint('quiz', __name__)\n\nfrom . import routes"
    },
    {
      "path": "app/quiz/forms.py",
      "content": "from flask_wtf import FlaskForm\nfrom wtforms import StringField, SubmitField, MultipleFileField, IntegerField\nfrom wtforms.validators import DataRequired, NumberRange\nfrom flask_wtf.file import FileAllowed, FileRequired\n\nclass CreateQuizForm(FlaskForm):\n    title = StringField('Quiz Title', validators=[DataRequired()])\n    images = MultipleFileField('Upload Images', validators=[\n        FileRequired(),\n        FileAllowed(['jpg', 'png', 'jpeg', 'gif'], 'Images only!')\n    ])\n    submit = SubmitField('Create Quiz')\n\nclass EditQuizForm(FlaskForm):\n    title = StringField('Quiz Title', validators=[DataRequired()])\n    images = MultipleFileField('Upload Additional Images', validators=[\n        FileAllowed(['jpg', 'png', 'jpeg', 'gif'], 'Images only!')\n    ])\n    submit = SubmitField('Update Quiz')\n\nclass QuestionForm(FlaskForm):\n    question_text = StringField('Question', validators=[DataRequired()])\n    answer = StringField('Answer', validators=[DataRequired()])\n    difficulty_level = IntegerField('Difficulty Level', validators=[NumberRange(min=1, max=10)])\n    submit = SubmitField('Save Question')"
    },
    {
      "path": "app/quiz/routes.py",
      "content": "from flask import render_template, redirect, url_for, flash, request, abort, current_app\nfrom flask_login import login_required, current_user\nfrom werkzeug.utils import secure_filename\nimport os\nfrom . import quiz\nfrom .forms import CreateQuizForm, EditQuizForm, QuestionForm\nfrom .. import db\nfrom ..models import Quiz, Question, PageScan\nfrom google_ai import generate_questions  # Updated import statement\n\n\n\n@quiz.route('/')\n@login_required\ndef index():\n    user_quizzes = Quiz.query.filter_by(user_owner_id=current_user.id).all()\n    return render_template('quiz/index.html', quizzes=user_quizzes)\n\n\n@quiz.route('/create', methods=['GET', 'POST'])\n@login_required\ndef create():\n    form = CreateQuizForm()\n    if form.validate_on_submit():\n        try:\n            quiz = Quiz(title=form.title.data, user_owner_id=current_user.id)\n            db.session.add(quiz)\n            db.session.flush()  # To get the quiz id\n\n            uploaded_images = []\n            for image in form.images.data:\n                if image:\n                    filename = secure_filename(image.filename)\n                    filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)\n                    image.save(filepath)\n                    page_scan = PageScan(quiz_id=quiz.id, file_name=filename)\n                    db.session.add(page_scan)\n                    uploaded_images.append(filepath)\n\n            db.session.commit()\n\n            # Generate questions\n            if uploaded_images:\n                questions = generate_questions(uploaded_images)\n                for q in questions:\n                    question = Question(\n                        quiz_id=quiz.id,\n                        question_text=q['question'],\n                        answer=q['answer'],\n                        difficulty_level=q['difficulty_level']\n                    )\n                    db.session.add(question)\n                db.session.commit()\n\n            flash('Quiz created successfully!', 'success')\n            return redirect(url_for('quiz.edit', quiz_id=quiz.id))\n        except Exception as e:\n            db.session.rollback()\n            current_app.logger.error(f\"Error creating quiz: {str(e)}\")\n            flash('An error occurred while creating the quiz. Please try again.', 'error')\n\n    return render_template('quiz/create.html', form=form)\n\n@quiz.route('/<quiz_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit(quiz_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    if quiz.user_owner_id != current_user.id:\n        abort(403)\n\n    form = EditQuizForm(obj=quiz)\n    if form.validate_on_submit():\n        quiz.title = form.title.data\n\n        uploaded_images = []\n        for image in form.images.data:\n            if image:\n                filename = secure_filename(image.filename)\n                filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)\n                image.save(filepath)\n                page_scan = PageScan(quiz_id=quiz.id, file_name=filename)\n                db.session.add(page_scan)\n                uploaded_images.append(filepath)\n\n        db.session.commit()\n\n        # Generate questions for new images\n        if uploaded_images:\n            questions = generate_questions(uploaded_images)\n            for q in questions:\n                question = Question(\n                    quiz_id=quiz.id,\n                    question_text=q['question'],\n                    answer=q['answer'],\n                    difficulty_level=q['difficulty_level']\n                )\n                db.session.add(question)\n            db.session.commit()\n\n        flash('Quiz updated successfully!', 'success')\n        return redirect(url_for('quiz.edit', quiz_id=quiz.id))\n\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\n    return render_template('quiz/edit.html', form=form, quiz=quiz, questions=questions)\n\n\n@quiz.route('/<quiz_id>/delete_question/<question_id>', methods=['POST'])\n@login_required\ndef delete_question(quiz_id, question_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    if quiz.user_owner_id != current_user.id:\n        abort(403)\n\n    question = Question.query.get_or_404(question_id)\n    if question.quiz_id != quiz.id:\n        abort(400)\n\n    db.session.delete(question)\n    db.session.commit()\n    flash('Question deleted successfully!', 'success')\n    return redirect(url_for('quiz.edit', quiz_id=quiz_id))\n\n# Keep other routes (answer, add_question, edit_question) as they are\n\n@quiz.route('/<quiz_id>/answer', methods=['GET', 'POST'])\n@login_required\ndef answer(quiz_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    questions = Question.query.filter_by(quiz_id=quiz_id).all()\n\n    if request.method == 'POST':\n        # Process answers here\n        # This is a placeholder for answer processing logic\n        flash('Answers submitted successfully!', 'success')\n        return redirect(url_for('quiz.index'))\n\n    return render_template('quiz/answer.html', quiz=quiz, questions=questions)\n\n\n# Add this new route to your existing routes.py file\n\n@quiz.route('/<quiz_id>/edit_question/<question_id>', methods=['GET', 'POST'])\n@login_required\ndef edit_question(quiz_id, question_id):\n    quiz = Quiz.query.get_or_404(quiz_id)\n    question = Question.query.get_or_404(question_id)\n\n    if quiz.user_owner_id != current_user.id or question.quiz_id != quiz.id:\n        abort(403)\n\n    form = QuestionForm(obj=question)\n\n    if form.validate_on_submit():\n        question.question_text = form.question_text.data\n        question.answer = form.answer.data\n        question.difficulty_level = form.difficulty_level.data\n        db.session.commit()\n        flash('Question updated successfully!', 'success')\n        return redirect(url_for('quiz.edit', quiz_id=quiz_id))\n\n    return render_template('quiz/edit_question.html', form=form, quiz=quiz, question=question)"
    },
    {
      "path": "app/models/user.py",
      "content": "import logging\nimport uuid\n\nfrom flask_login import UserMixin\nfrom sqlalchemy import Column, String\n\nfrom .. import db\n\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'user'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    email = Column(String(255), unique=True, nullable=False)\n    first_name = Column(String(255))\n    last_name = Column(String(255))\n    picture = Column(String(255))\n\n    quizzes = db.relationship(\"Quiz\", back_populates=\"owner\")\n    answers = db.relationship(\"Answer\", back_populates=\"user\")\n\n    def __init__(self, email, first_name=None, last_name=None, picture=None):\n        self.email = email\n        self.first_name = first_name\n        self.last_name = last_name\n        self.picture = picture\n\n    @staticmethod\n    def get(email):\n        return User.query.filter_by(email=email).first()\n\n    @staticmethod\n    def create(email, first_name=None, last_name=None, picture=None):\n        user = User(email=email, first_name=first_name, last_name=last_name, picture=picture)\n        db.session.add(user)\n        db.session.commit()\n        logging.info(f\"Created new user with email: {email}\")\n        return user\n\n    @staticmethod\n    def get_or_create(email, first_name=None, last_name=None, picture=None):\n        user = User.get(email)\n        if user is None:\n            user = User.create(email, first_name, last_name, picture)\n        else:\n            user.update(first_name, last_name, picture)\n        return user\n\n    def update(self, first_name=None, last_name=None, picture=None):\n        if first_name is not None:\n            self.first_name = first_name\n        if last_name is not None:\n            self.last_name = last_name\n        if picture is not None:\n            self.picture = picture\n        db.session.commit()\n        logging.info(f\"Updated user information for email: {self.email}\")\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'email': self.email,\n            'first_name': self.first_name,\n            'last_name': self.last_name,\n            'picture': self.picture\n        }\n\n    @staticmethod\n    def from_dict(data):\n        return User.get_or_create(\n            email=data.get('email'),\n            first_name=data.get('first_name'),\n            last_name=data.get('last_name'),\n            picture=data.get('picture')\n        )\n"
    },
    {
      "path": "app/models/models.py",
      "content": "import uuid\n\nfrom sqlalchemy import Column, String, DateTime, ForeignKey, func\nfrom sqlalchemy.orm import relationship\n\nfrom .. import db\n\n\nclass Quiz(db.Model):\n    __tablename__ = 'quiz'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_owner_id = Column(String(36), ForeignKey('user.id'))\n    title = Column(String(255))\n    created_date = Column(DateTime, default=func.now())\n\n    owner = relationship(\"User\", back_populates=\"quizzes\")\n    questions = relationship(\"Question\", back_populates=\"quiz\")\n    page_scans = relationship(\"PageScan\", back_populates=\"quiz\")\n\n\nclass Question(db.Model):\n    __tablename__ = 'question'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\n    page_scan_id = Column(String(36), ForeignKey('page_scan.id'))\n    question_text = Column(String(1000))\n    answer = Column(String(1000))\n    difficulty_level = Column(db.Integer)\n\n    quiz = relationship(\"Quiz\", back_populates=\"questions\")\n    page_scan = relationship(\"PageScan\", back_populates=\"questions\")\n\n\nclass Answer(db.Model):\n    __tablename__ = 'answer'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String(36), ForeignKey('user.id'))\n    answer_text = Column(String(1000))\n    audio_file_name = Column(String(255))\n    date = Column(DateTime, default=func.now())\n    feedback = Column(String(1000))\n    correctness = Column(db.Float)\n    completeness = Column(db.Float)\n\n    user = relationship(\"User\", back_populates=\"answers\")\n\n\nclass PageScan(db.Model):\n    __tablename__ = 'page_scan'\n\n    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n    quiz_id = Column(String(36), ForeignKey('quiz.id'))\n    page_position = Column(db.Integer)\n    file_name = Column(String(255))\n    created_date = Column(DateTime, default=func.now())\n\n    quiz = relationship(\"Quiz\", back_populates=\"page_scans\")\n    questions = relationship(\"Question\", back_populates=\"page_scan\")\n"
    },
    {
      "path": "app/models/__init__.py",
      "content": "from .user import User\nfrom .models import Quiz, Question, Answer, PageScan"
    },
    {
      "path": "app/templates/navbar.html",
      "content": "<nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\n    <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"{{ url_for('main.home') }}\">My Website</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\"\n                aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav me-auto\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'home' %}active{% endif %}\"\n                       href=\"{{ url_for('main.home') }}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'about' %}active{% endif %}\"\n                       href=\"{{ url_for('main.about') }}\">About</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'quiz.index' %}active{% endif %}\"\n                       href=\"{{ url_for('quiz.index') }}\">Quiz</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'services' %}active{% endif %}\"\n                       href=\"{{ url_for('answer.index') }}\">Answer</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link {% if active_page == 'contact' %}active{% endif %}\"\n                       href=\"{{ url_for('main.contact') }}\">Contact</a>\n                </li>\n            </ul>\n            <ul class=\"navbar-nav\">\n                {% if current_user.is_authenticated %}\n                    <li class=\"nav-item\">\n                        {% if current_user.picture %}\n                            <img src=\"{{ current_user.picture }}\" alt=\"Profile\" class=\"rounded-circle\"\n                                 style=\"width: 24px; height: 24px; object-fit: cover;\">\n                        {% endif %}\n                        <span class=\"navbar-text me-3\">{{ session['user']['first_name'] }}</span>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{{ url_for('auth.logout') }}\">Logout</a>\n                    </li>\n                {% else %}\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{{ url_for('auth.login') }}\">Login</a>\n                    </li>\n                {% endif %}\n            </ul>\n        </div>\n    </div>\n</nav>"
    },
    {
      "path": "app/templates/base.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Book-Scan-Quizz{% endblock %}</title>\n    <!-- Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            padding-top: 56px;\n        }\n        .alert-danger {\n            color: #721c24;\n            background-color: #f8d7da;\n            border-color: #f5c6cb;\n        }\n    </style>\n    {% block extra_css %}{% endblock %}\n</head>\n<body>\n    {% include 'navbar.html' %}\n\n    <div class=\"container mt-4\">\n        {% with messages = get_flashed_messages(with_categories=true) %}\n            {% if messages %}\n                {% for category, message in messages %}\n                    <div class=\"alert alert-{{ category }} alert-dismissible fade show\" role=\"alert\">\n                        {{ message }}\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n                    </div>\n                {% endfor %}\n            {% endif %}\n        {% endwith %}\n\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <!-- Bootstrap Bundle with Popper -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"></script>\n    {% block extra_js %}{% endblock %}\n</body>\n</html>"
    },
    {
      "path": "app/templates/answer/index.html",
      "content": "{% extends \"base.html\" %}\n\n{% block title %}Quiz - My Website{% endblock %}\n\n{% block content %}\n<h1>Welcome to the Quiz Page</h1>\n<p>Press and hold the button to record your answer.</p>\n\n<div class=\"text-center my-4\">\n    <button id=\"recordButton\" class=\"btn btn-lg btn-success rounded-circle\" style=\"width: 100px; height: 100px;\">\n        Record\n    </button>\n</div>\n\n<div id=\"recordingFeedback\" class=\"text-center my-2\" style=\"display: none;\">\n    Recording... <span id=\"recordingDuration\">0</span>s\n</div>\n\n<div id=\"processingFeedback\" class=\"text-center my-2\" style=\"display: none;\">\n    Processing your audio...\n</div>\n\n<div id=\"resultContainer\" class=\"mt-4\">\n    <h3>Result:</h3>\n    <p id=\"resultText\"></p>\n</div>\n\n<div id=\"audioVisualization\" class=\"mt-3\" style=\"display: none;\">\n    <div id=\"audioMeter\" style=\"width: 0%; height: 20px; background-color: #4CAF50; transition: width 0.1s;\"></div>\n</div>\n\n{% endblock %}\n\n{% block extra_js %}\n<script>\nlet mediaRecorder;\nlet audioChunks = [];\nlet startTime;\nlet durationInterval;\nlet audioContext;\nlet analyser;\nlet dataArray;\nlet animationId;\n\nconst recordButton = document.getElementById('recordButton');\nconst recordingFeedback = document.getElementById('recordingFeedback');\nconst recordingDuration = document.getElementById('recordingDuration');\nconst resultText = document.getElementById('resultText');\nconst processingFeedback = document.getElementById('processingFeedback');\nconst audioVisualization = document.getElementById('audioVisualization');\nconst audioMeter = document.getElementById('audioMeter');\n\nrecordButton.addEventListener('mousedown', startRecording);\nrecordButton.addEventListener('mouseup', stopRecording);\nrecordButton.addEventListener('mouseleave', stopRecording);\n\nfunction disableButton() {\n    recordButton.disabled = true;\n    recordButton.classList.remove('btn-success', 'btn-danger');\n    recordButton.classList.add('btn-secondary');\n    recordButton.style.cursor = 'not-allowed';\n}\n\nfunction enableButton() {\n    recordButton.disabled = false;\n    recordButton.classList.remove('btn-secondary');\n    recordButton.classList.add('btn-success');\n    recordButton.style.cursor = 'pointer';\n}\n\nfunction startRecording() {\n    if (recordButton.disabled) return;\n\n    audioChunks = [];\n    navigator.mediaDevices.getUserMedia({ audio: true })\n        .then(stream => {\n            mediaRecorder = new MediaRecorder(stream);\n            mediaRecorder.start();\n            startTime = Date.now();\n\n            mediaRecorder.addEventListener(\"dataavailable\", event => {\n                audioChunks.push(event.data);\n            });\n\n            recordButton.classList.remove('btn-success');\n            recordButton.classList.add('btn-danger');\n            recordingFeedback.style.display = 'block';\n            audioVisualization.style.display = 'block';\n            startDurationCounter();\n            startAudioVisualization(stream);\n        });\n}\n\nfunction stopRecording() {\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n        recordButton.classList.remove('btn-danger');\n        recordButton.classList.add('btn-success');\n        recordingFeedback.style.display = 'none';\n        audioVisualization.style.display = 'none';\n        stopDurationCounter();\n        stopAudioVisualization();\n\n        mediaRecorder.addEventListener(\"stop\", () => {\n            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n            sendAudioToServer(audioBlob);\n        });\n    }\n}\n\nfunction startDurationCounter() {\n    recordingDuration.textContent = '0';\n    durationInterval = setInterval(() => {\n        const duration = Math.floor((Date.now() - startTime) / 1000);\n        recordingDuration.textContent = duration;\n    }, 1000);\n}\n\nfunction stopDurationCounter() {\n    clearInterval(durationInterval);\n}\n\nfunction startAudioVisualization(stream) {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = audioContext.createAnalyser();\n    const source = audioContext.createMediaStreamSource(stream);\n    source.connect(analyser);\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n\n    function updateAudioMeter() {\n        analyser.getByteFrequencyData(dataArray);\n        const average = dataArray.reduce((acc, val) => acc + val, 0) / dataArray.length;\n        const volume = Math.min(100, Math.max(0, average * 2));\n        audioMeter.style.width = `${volume}%`;\n        animationId = requestAnimationFrame(updateAudioMeter);\n    }\n\n    updateAudioMeter();\n}\n\nfunction stopAudioVisualization() {\n    if (audioContext) {\n        audioContext.close();\n    }\n    if (animationId) {\n        cancelAnimationFrame(animationId);\n    }\n}\n\nfunction sendAudioToServer(audioBlob) {\n    const formData = new FormData();\n    formData.append(\"audio\", audioBlob, \"recording.wav\");\n\n    resultText.textContent = '';\n    processingFeedback.style.display = 'block';\n    disableButton();\n\n    fetch('/answer/evaluate_audio', {\n        method: 'POST',\n        body: formData\n    })\n    .then(response => response.json())\n    .then(data => {\n        processingFeedback.style.display = 'none';\n        if (data.error) {\n            resultText.textContent = data.error;\n            resultText.style.color = 'red';\n        } else {\n            resultText.textContent = data.result;\n            resultText.style.color = 'initial';\n        }\n        enableButton();\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        processingFeedback.style.display = 'none';\n        resultText.textContent = 'An error occurred while processing the audio.';\n        resultText.style.color = 'red';\n        enableButton();\n    });\n}\n</script>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/answer.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Answer Quiz: {{ quiz.title }}</h1>\n    <form method=\"POST\">\n        {% for question in questions %}\n            <div>\n                <h3>Question {{ loop.index }}</h3>\n                <p>{{ question.question_text }}</p>\n                <input type=\"text\" name=\"answer_{{ question.id }}\" required>\n            </div>\n        {% endfor %}\n        <button type=\"submit\">Submit Answers</button>\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/index.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>My Quizzes</h1>\n    <a href=\"{{ url_for('quiz.create') }}\" class=\"btn btn-primary\">Create New Quiz</a>\n    <ul class=\"list-group mt-3\">\n    {% for quiz in quizzes %}\n        <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n            {{ quiz.title }}\n            <div>\n                <a href=\"{{ url_for('quiz.edit', quiz_id=quiz.id) }}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                <a href=\"{{ url_for('quiz.answer', quiz_id=quiz.id) }}\" class=\"btn btn-sm btn-primary\">Answer</a>\n            </div>\n        </li>\n    {% endfor %}\n    </ul>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/create.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Create New Quiz</h1>\n    <form method=\"POST\" enctype=\"multipart/form-data\">\n        {{ form.hidden_tag() }}\n        <div>\n            {{ form.title.label }}\n            {{ form.title() }}\n        </div>\n        <div>\n            {{ form.images.label }}\n            {{ form.images() }}\n        </div>\n        {{ form.submit() }}\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/add_question.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Add Question to Quiz: {{ quiz.title }}</h1>\n    <form method=\"POST\">\n        {{ form.hidden_tag() }}\n        <div>\n            {{ form.question_text.label }}\n            {{ form.question_text() }}\n        </div>\n        <div>\n            {{ form.answer.label }}\n            {{ form.answer() }}\n        </div>\n        <div>\n            {{ form.difficulty_level.label }}\n            {{ form.difficulty_level() }}\n        </div>\n        {{ form.submit() }}\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/edit_question.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>Edit Question for Quiz: {{ quiz.title }}</h1>\n    <form method=\"POST\">\n        {{ form.hidden_tag() }}\n        <div>\n            {{ form.question_text.label }}\n            {{ form.question_text() }}\n        </div>\n        <div>\n            {{ form.answer.label }}\n            {{ form.answer() }}\n        </div>\n        <div>\n            {{ form.difficulty_level.label }}\n            {{ form.difficulty_level() }}\n        </div>\n        {{ form.submit() }}\n    </form>\n{% endblock %}"
    },
    {
      "path": "app/templates/quiz/edit.html",
      "content": "{% extends \"base.html\" %}\n{% block content %}\n    <h1>{% if quiz %}Edit{% else %}Create{% endif %} Quiz</h1>\n    <form method=\"POST\" enctype=\"multipart/form-data\">\n        {{ form.hidden_tag() }}\n        <div class=\"mb-3\">\n            {{ form.title.label(class=\"form-label\") }}\n            {{ form.title(class=\"form-control\") }}\n        </div>\n        <div class=\"mb-3\">\n            {{ form.images.label(class=\"form-label\") }}\n            {{ form.images(class=\"form-control\", accept=\"image/*\", multiple=true) }}\n        </div>\n        <div id=\"imagePreview\" class=\"mb-3\">\n            <!-- Uploaded images will be displayed here -->\n        </div>\n        {% if questions %}\n            <h2>Questions</h2>\n            {% for question in questions %}\n                <div class=\"card mb-3\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Question {{ loop.index }}</h5>\n                        <p class=\"card-text\">{{ question.question_text }}</p>\n                        <p class=\"card-text\"><strong>Answer:</strong> {{ question.answer }}</p>\n                        <p class=\"card-text\"><strong>Difficulty:</strong> {{ question.difficulty_level }}</p>\n                        <a href=\"{{ url_for('quiz.edit_question', quiz_id=quiz.id, question_id=question.id) }}\" class=\"btn btn-secondary\">Edit</a>\n                        <form action=\"{{ url_for('quiz.delete_question', quiz_id=quiz.id, question_id=question.id) }}\" method=\"POST\" style=\"display: inline;\">\n                            <input type=\"submit\" value=\"Delete\" class=\"btn btn-danger\" onclick=\"return confirm('Are you sure you want to delete this question?');\">\n                        </form>\n                    </div>\n                </div>\n            {% endfor %}\n        {% endif %}\n        <button type=\"submit\" class=\"btn btn-primary\">{% if quiz %}Update{% else %}Create{% endif %} Quiz</button>\n    </form>\n{% endblock %}\n\n{% block extra_js %}\n<script>\ndocument.addEventListener('DOMContentLoaded', function() {\n    const imageInput = document.getElementById('images');\n    const imagePreview = document.getElementById('imagePreview');\n\n    imageInput.addEventListener('change', function() {\n        imagePreview.innerHTML = '';\n        for (let i = 0; i < this.files.length; i++) {\n            const file = this.files[i];\n            if (file.type.startsWith('image/')) {\n                const img = document.createElement('img');\n                img.classList.add('img-thumbnail', 'm-1');\n                img.style.maxWidth = '100px';\n                img.style.maxHeight = '100px';\n                img.file = file;\n                imagePreview.appendChild(img);\n\n                const reader = new FileReader();\n                reader.onload = (function(aImg) {\n                    return function(e) {\n                        aImg.src = e.target.result;\n                    };\n                })(img);\n                reader.readAsDataURL(file);\n            }\n        }\n    });\n});\n</script>\n{% endblock %}"
    },
    {
      "path": "app/templates/main/home.html",
      "content": "{% extends \"base.html\" %}\n\n{% block content %}\n<h1>Welcome to Book-Scan-Quizz</h1>\n\n{% if current_user.is_authenticated %}\n    <p>Hello, {{ session['user']['first_name'] }}! Thanks for logging in with Google.</p>\n    <p>Your email is: {{ session['user']['email'] }}</p>\n    {% if session['user']['picture'] %}\n        <img src=\"{{ session['user']['picture'] }}\" alt=\"Profile Picture\" style=\"width: 50px; height: 50px; border-radius: 50%;\">\n    {% endif %}\n{% else %}\n    <p>This is the home page of our mobile-first website. Feel free to explore other pages using the navigation menu.</p>\n    <p>You can log in using your Google account to access more features.</p>\n{% endif %}\n\n{% endblock %}"
    },
    {
      "path": "app/templates/main/about.html",
      "content": "{% extends \"base.html\" %}\n\n{% block title %}About - My Website{% endblock %}\n\n{% block content %}\n<h1>About Us</h1>\n<p>We are a company dedicated to creating amazing mobile-first websites. Our team of experts ensures that every project we undertake is responsive, user-friendly, and visually appealing.</p>\n{% endblock %}"
    },
    {
      "path": "app/templates/main/contact.html",
      "content": "{% extends \"base.html\" %}\n\n{% block title %}Contact - My Website{% endblock %}\n\n{% block content %}\n<h1>Contact Us</h1>\n<p>Get in touch with us for any inquiries or project discussions.</p>\n<form>\n    <div class=\"mb-3\">\n        <label for=\"name\" class=\"form-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\" required>\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"email\" class=\"form-label\">Email</label>\n        <input type=\"email\" class=\"form-control\" id=\"email\" required>\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"message\" class=\"form-label\">Message</label>\n        <textarea class=\"form-control\" id=\"message\" rows=\"3\" required></textarea>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n{% endblock %}"
    },
    {
      "path": "app/main/__init__.py",
      "content": "from flask import Blueprint\n\nmain = Blueprint('main', __name__)\n\nfrom . import routes, errors"
    },
    {
      "path": "app/main/errors.py",
      "content": ""
    },
    {
      "path": "app/main/routes.py",
      "content": "from flask import render_template\nfrom . import main\nfrom flask_login import current_user\n\n@main.route('/')\ndef home():\n    return render_template('main/home.html')\n\n@main.route('/about')\ndef about():\n    return render_template('main/about.html')\n\n@main.route('/contact')\ndef contact():\n    return render_template('main/contact.html')"
    },
    {
      "path": "tests/.DS_Store",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0xb8 in position 549: invalid start byte"
    },
    {
      "path": "tests/__init__.py",
      "content": ""
    },
    {
      "path": "tests/test_config.py",
      "content": "import os\n\n# Get the absolute path to the test directory\nTEST_DIR = os.path.dirname(os.path.abspath(__file__))\n\n# Define paths to test files\nTEST_FILES_DIR = os.path.join(TEST_DIR, 'files')\nTEST_AUDIO_DIR = os.path.join(TEST_FILES_DIR, 'audio')\nTEST_IMAGES_DIR = os.path.join(TEST_FILES_DIR, 'images')\n\n# Define specific test file paths\nDUMMY_SERBIAN = os.path.join(TEST_AUDIO_DIR, 'dummy_serbian.wav')\nGERMAN_WRONG = os.path.join(TEST_AUDIO_DIR, 'german_wrong_sentence.wav')\nTEST_IMAGE_FILE_1 = os.path.join(TEST_IMAGES_DIR, 'test_image_1.jpg')\nTEST_IMAGE_FILE_2 = os.path.join(TEST_IMAGES_DIR, 'test_image_2.png')\n\n# You can add more configurations here as needed"
    },
    {
      "path": "tests/google_ai/test_transcription.py",
      "content": "import unittest\nimport os\nfrom google_ai import transcribe_audio\nfrom tests.test_config import DUMMY_SERBIAN\nfrom app import create_app\nfrom config import config\n\n\nclass TestTranscription(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app('testing')\n        self.app_context = self.app.app_context()\n        self.app_context.push()\n\n    def tearDown(self):\n        self.app_context.pop()\n\n    def test_transcribe_dummy_serbian(self):\n        # Ensure the test file exists\n        self.assertTrue(os.path.exists(DUMMY_SERBIAN), f\"Test file not found: {DUMMY_SERBIAN}\")\n\n        result = transcribe_audio(DUMMY_SERBIAN)\n\n        # Assert that we got a non-None result\n        self.assertIsNotNone(result, \"Transcription result is None\")\n\n        # Assert that the result is a non-empty string\n        self.assertTrue(isinstance(result, str) and len(result) > 0, \"Transcription result is empty or not a string\")\n\n        # You might want to add more specific assertions here based on what you expect\n        # the transcription of dummy_serbian.wav to contain\n        # For example:\n        # self.assertIn(\"expected word or phrase\", result.lower())\n\n        print(f\"Transcription result: {result}\")\n\n\nif __name__ == '__main__':\n    unittest.main()\n# This file is intentionally left empty"
    },
    {
      "path": "tests/google_ai/__init__.py",
      "content": "# This file is intentionally left empty"
    },
    {
      "path": "tests/google_ai/test_question_generator.py",
      "content": "import unittest\nimport os\nfrom pathlib import Path\nfrom flask import current_app\nfrom google_ai import generate_questions, config\nfrom tests.test_config import TEST_IMAGES_DIR\nfrom app import create_app\nfrom config import TestingConfig\n\n\nclass TestQuestionGenerator(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app('testing')\n        self.app_context = self.app.app_context()\n        self.app_context.push()\n\n        self.image_files = [\n            os.path.join(TEST_IMAGES_DIR, f)\n            for f in os.listdir(TEST_IMAGES_DIR)\n            if f.lower().endswith(('.png', '.jpg', '.jpeg'))\n        ]\n        self.single_image = self.image_files[0] if self.image_files else None\n\n    def tearDown(self):\n        self.app_context.pop()\n\n    def test_generate_questions_single_image(self):\n        if not self.single_image:\n            self.skipTest(\"No test images available\")\n\n        questions = generate_questions([self.single_image])\n        self.assertIsNotNone(questions)\n        self.assertIsInstance(questions, list)\n        self.assertTrue(len(questions) > 0)\n\n        for question in questions:\n            self._assert_valid_question(question)\n            print(question)\n\n    def test_generate_questions_multiple_images(self):\n        if len(self.image_files) < 2:\n            self.skipTest(\"Not enough test images available\")\n\n        questions = generate_questions(self.image_files[:2])\n        self.assertIsNotNone(questions)\n        self.assertIsInstance(questions, list)\n        self.assertTrue(len(questions) > 0)\n\n        for question in questions:\n            self._assert_valid_question(question)\n            print(question)\n\n    def test_generate_questions_invalid_image(self):\n        invalid_file = os.path.join(TEST_IMAGES_DIR, 'nonexistent.jpg')\n        with self.assertRaises(Exception):  # Adjust the exception type as needed\n            generate_questions([invalid_file])\n\n    def _assert_valid_question(self, question):\n        self.assertIsInstance(question, dict)\n        self.assertIn('page_nr', question)\n        self.assertIn('question', question)\n        self.assertIn('answer', question)\n        self.assertIn('difficulty_level', question)\n\n        self.assertIsInstance(question['page_nr'], int)\n        self.assertIsInstance(question['question'], str)\n        self.assertIsInstance(question['answer'], str)\n        self.assertIn(question['difficulty_level'], ['easy', 'medium', 'hard'])\n\n        self.assertTrue(len(question['question']) > 0)\n        self.assertTrue(len(question['answer']) > 0)\n\n    def test_generate_questions_respects_model_config(self):\n        if not self.single_image:\n            self.skipTest(\"No test images available\")\n\n        original_model = config.DEFAULT_PRO_MODEL\n        config.DEFAULT_PRO_MODEL = \"test-model\"\n\n        try:\n            with unittest.mock.patch('google_ai.question_generator.execute_genai_operation') as mock_execute:\n                mock_execute.return_value = '[{\"page_nr\": 1, \"question\": \"Test?\", \"answer\": \"Test.\", \"difficulty_level\": \"easy\"}]'\n                generate_questions([self.single_image])\n                mock_execute.assert_called_once()\n                _, kwargs = mock_execute.call_args\n                self.assertEqual(kwargs['model_name'], \"test-model\")\n        finally:\n            config.DEFAULT_PRO_MODEL = original_model\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "path": "tests/files/.DS_Store",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x86 in position 23: invalid start byte"
    },
    {
      "path": "tests/files/images/kiara-geschichte-1 .jpg",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte"
    },
    {
      "path": "tests/files/images/kiara-geschichte-0.jpg",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte"
    },
    {
      "path": "tests/files/audio/german_wrong_sentence.wav",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x9f in position 4: invalid start byte"
    },
    {
      "path": "tests/files/audio/dummy_serbian.wav",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x9f in position 4: invalid start byte"
    },
    {
      "path": "google_ai/transcription.py",
      "content": "from typing import Optional\n\nfrom .config import DEFAULT_MODEL\nfrom .utils import execute_genai_operation\n\n\ndef transcribe_audio(audio_path: str, mime_type: str = \"audio/wav\", model_name: str = DEFAULT_MODEL) -> Optional[str]:\n    \"\"\"\n    Transcribes the audio file at the given path using Google's Generative AI.\n\n    Args:\n    audio_path (str): Path to the audio file.\n    mime_type (str): MIME type of the audio file. Defaults to \"audio/wav\".\n    model_name (str): Name of the Gemini model to use. Defaults to the value in config.py.\n\n    Returns:\n    Optional[str]: The transcribed text, or None if transcription failed.\n    \"\"\"\n    prompt = \"Transcribe the audio file and provide a summary.\"\n    return execute_genai_operation(prompt, file_paths=audio_path, mime_type=mime_type, model_name=model_name)\n"
    },
    {
      "path": "google_ai/config.py",
      "content": "\"\"\"\nShared configuration settings for Google AI services.\n\"\"\"\n\n# Default model names\nDEFAULT_MODEL = \"gemini-1.5-flash\"\nDEFAULT_PRO_MODEL = \"gemini-1.5-pro-latest\"\n\n# Generation configuration\nGENERATION_CONFIG = {\n    \"temperature\": 0,\n    \"top_p\": 0.95,\n    \"top_k\": 64,\n    \"max_output_tokens\": 8192,\n}\n\n# Safety settings\nSAFETY_SETTINGS = [\n    {\n        \"category\": \"HARM_CATEGORY_HARASSMENT\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n    {\n        \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n    {\n        \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n    {\n        \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"threshold\": \"BLOCK_NONE\"\n    },\n]\n"
    },
    {
      "path": "google_ai/__init__.py",
      "content": "\"\"\"\nGoogle AI Module\n\nThis module provides functionality for transcription and question generation\nusing Google's AI services.\n\"\"\"\n\nfrom . import config\nfrom .question_generator import generate_questions\nfrom .transcription import transcribe_audio\n\n__all__ = ['transcribe_audio', 'generate_questions', 'config']\n\n# Version of the google_ai module\n__version__ = \"0.2.0\"\n"
    },
    {
      "path": "google_ai/utils.py",
      "content": "from typing import Optional, Union, List\nimport google.generativeai as genai\nfrom flask import current_app\n\nfrom .config import GENERATION_CONFIG, SAFETY_SETTINGS, DEFAULT_MODEL\n\n\ndef execute_genai_operation(\n        prompt: str,\n        file_paths: Optional[Union[str, List[str]]] = None,\n        mime_type: Optional[str] = None,\n        model_name: str = DEFAULT_MODEL\n) -> Optional[str]:\n    \"\"\"\n    Executes a Google AI operation with the given parameters.\n\n    Args:\n    prompt (str): The prompt to send to the AI model.\n    file_paths (Optional[Union[str, List[str]]]): Path(s) to the file(s) to be processed.\n    mime_type (Optional[str]): MIME type of the file(s). If multiple files, all must be the same type.\n    model_name (str): Name of the Gemini model to use.\n\n    Returns:\n    Optional[str]: The response from the AI model, or None if an error occurred.\n    \"\"\"\n    try:\n        genai.configure(api_key=current_app.config['GEMINI_API_KEY'])\n\n        model = genai.GenerativeModel(\n            model_name=model_name,\n            generation_config=GENERATION_CONFIG,\n            safety_settings=SAFETY_SETTINGS\n        )\n\n        parts = []\n        if file_paths:\n            if isinstance(file_paths, str):\n                file_paths = [file_paths]  # Convert single path to list\n\n            for file_path in file_paths:\n                file = genai.upload_file(file_path, mime_type=mime_type)\n                parts.append(file)\n\n        parts.append(prompt)\n\n        chat_session = model.start_chat(history=[{\"role\": \"user\", \"parts\": parts}])\n        response = chat_session.send_message(prompt)\n\n        return response.text\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in execute_genai_operation: {str(e)}\")\n        return None"
    },
    {
      "path": "google_ai/question_generator.py",
      "content": "import json\nfrom typing import List, Dict, Any, Optional\n\nfrom .config import DEFAULT_PRO_MODEL\nfrom .utils import execute_genai_operation\n\n\ndef generate_questions(image_paths: List[str], model_name: str = DEFAULT_PRO_MODEL) -> Optional[List[Dict[str, Any]]]:\n    \"\"\"\n    Generate questions based on the provided images using Google's Generative AI.\n\n    Args:\n    image_paths (List[str]): List of paths to image files.\n    model_name (str): Name of the Gemini model to use. Defaults to the value in config.py.\n\n    Returns:\n    Optional[List[Dict[str, Any]]]: List of generated questions with their details, or None if generation failed.\n    \"\"\"\n    prompt = \"\"\"\n    * make sure that you analyze all the uploaded images \n    * for each image find the relevant topics \n    * for each topic come up with one or more relevant questions\n    * questions and answers MUST come from uploaded images ONLY!\n    * if you can not analyze provide information on that \n    * do not stop until you have analyzed all images \n    * provide your results as JSON\n    * each json element MUST have the following structure: page_nr, question, answer, difficulty_level\n    * difficulty_level should be one of: easy, medium, hard\n    * be very careful to provide VALID JSON!\n    \"\"\"\n\n    result = None\n    for image_path in image_paths:\n        response = execute_genai_operation(prompt, file_paths=image_path, mime_type=\"image/jpeg\", model_name=model_name)\n        if response:\n            try:\n                parsed_response = json.loads(response)\n                if result is None:\n                    result = parsed_response\n                else:\n                    result.extend(parsed_response)\n            except json.JSONDecodeError:\n                print(f\"Failed to parse JSON for image: {image_path}\")\n\n    return result\n"
    },
    {
      "path": "instance/dev.sqlite",
      "content": "Error reading file: 'utf-8' codec can't decode byte 0x89 in position 99: invalid start byte"
    },
    {
      "path": ".idea/dataSources.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"DataSourceManagerImpl\" format=\"xml\" multifile-model=\"true\">\n    <data-source source=\"LOCAL\" name=\"dev\" uuid=\"1fa8386b-743c-4a1c-bd62-c22020f5b709\">\n      <driver-ref>sqlite.xerial</driver-ref>\n      <synchronize>true</synchronize>\n      <jdbc-driver>org.sqlite.JDBC</jdbc-driver>\n      <jdbc-url>jdbc:sqlite:E:\\source\\repos\\book-scan-quizz\\instance\\dev.sqlite</jdbc-url>\n      <jdbc-additional-properties>\n        <property name=\"com.intellij.clouds.kubernetes.db.enabled\" value=\"false\" />\n      </jdbc-additional-properties>\n      <working-dir>$ProjectFileDir$</working-dir>\n      <libraries>\n        <library>\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/xerial/sqlite-jdbc/3.45.1.0/sqlite-jdbc-3.45.1.0.jar</url>\n        </library>\n        <library>\n          <url>file://$APPLICATION_CONFIG_DIR$/jdbc-drivers/Xerial SQLiteJDBC/3.45.1/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar</url>\n        </library>\n      </libraries>\n    </data-source>\n  </component>\n</project>"
    },
    {
      "path": ".idea/experiment-mobileweb.iml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"Flask\">\n    <option name=\"enabled\" value=\"true\" />\n  </component>\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.11 (book-scan-quizz)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"TemplatesService\">\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Jinja2\" />\n    <option name=\"TEMPLATE_FOLDERS\">\n      <list>\n        <option value=\"$MODULE_DIR$/templates\" />\n      </list>\n    </option>\n  </component>\n</module>"
    },
    {
      "path": ".idea/dataSources.local.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"dataSourceStorageLocal\" created-in=\"PY-233.14475.56\">\n    <data-source name=\"dev\" uuid=\"1fa8386b-743c-4a1c-bd62-c22020f5b709\">\n      <database-info product=\"\" version=\"\" jdbc-version=\"\" driver-name=\"\" driver-version=\"\" dbms=\"SQLITE\" />\n      <schema-mapping />\n    </data-source>\n  </component>\n</project>"
    },
    {
      "path": ".idea/vcs.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"VcsDirectoryMappings\">\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\n  </component>\n</project>"
    },
    {
      "path": ".idea/.gitignore",
      "content": "# Default ignored files\n/shelf/\n/workspace.xml\n# Editor-based HTTP Client requests\n/httpRequests/\n# Datasource local storage ignored files\n/dataSources/\n/dataSources.local.xml\n"
    },
    {
      "path": ".idea/workspace.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AnalysisUIOptions\">\n    <option name=\"ANALYZE_INJECTED_CODE\" value=\"false\" />\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/app/quiz/forms.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/quiz/forms.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/quiz/routes.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/quiz/routes.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/templates/quiz/edit.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/templates/quiz/edit.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/app/templates/quiz/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app/templates/quiz/index.html\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/instance/dev.sqlite\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/instance/dev.sqlite\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\n    <envs>\n      <env key=\"FLASK_APP\" value=\"app\" />\n    </envs>\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\n    <option name=\"myEnvs\">\n      <map>\n        <entry key=\"FLASK_APP\" value=\"app\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2iIEhKaLBYBbFhtm0UxCg8yVGaW\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Flask server.Flask (app).executor\": \"Run\",\n    \"Flask server.Flask.executor\": \"Debug\",\n    \"Python tests.Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_multiple_images.executor\": \"Run\",\n    \"Python tests.Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_single_image.executor\": \"Run\",\n    \"Python tests.Python tests for test_transcription.TestTranscription.test_transcribe_dummy_serbian.executor\": \"Run\",\n    \"Python tests.Python tests in test_question_generator.py.executor\": \"Run\",\n    \"Python tests.Python tests in test_transcription.py.executor\": \"Run\",\n    \"Python.create_structure.executor\": \"Run\",\n    \"Python.export_structure.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"master\",\n    \"last_opened_file_path\": \"/Users/almirkazazic/Documents/GitHub/book-scan-quizz\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"run.code.analysis.last.selected.profile\": \"aDefault\",\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/tests/files/audio\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Flask server.Flask (app)\">\n    <configuration name=\"Flask (app)\" type=\"Python.FlaskServer\">\n      <option name=\"flaskDebug\" value=\"true\" />\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"target\" value=\"$PROJECT_DIR$/app/run.py\" />\n      <option name=\"targetType\" value=\"PATH\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <EXTENSION ID=\"net.ashald.envfile\">\n        <option name=\"IS_ENABLED\" value=\"false\" />\n        <option name=\"IS_SUBST\" value=\"false\" />\n        <option name=\"IS_PATH_MACRO_SUPPORTED\" value=\"false\" />\n        <option name=\"IS_IGNORE_MISSING_FILES\" value=\"false\" />\n        <option name=\"IS_ENABLE_EXPERIMENTAL_INTEGRATIONS\" value=\"false\" />\n        <ENTRIES>\n          <ENTRY IS_ENABLED=\"true\" PARSER=\"runconfig\" IS_EXECUTABLE=\"false\" />\n        </ENTRIES>\n      </EXTENSION>\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_multiple_images\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests/google_ai\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;test_question_generator.TestQuestionGenerator.test_generate_questions_multiple_images&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_single_image\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests/google_ai\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;test_question_generator.TestQuestionGenerator.test_generate_questions_single_image&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"Python tests for test_transcription.TestTranscription.test_transcribe_dummy_serbian\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests/google_ai\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;test_transcription.TestTranscription.test_transcribe_dummy_serbian&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PYTHON&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"Python tests in test_question_generator.py\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests/google_ai\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/tests/google_ai/test_question_generator.py&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"Python tests in test_transcription.py\" type=\"tests\" factoryName=\"Autodetect\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"experiment-mobileweb\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/tests/google_ai\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\n      <option name=\"_new_target\" value=\"&quot;$PROJECT_DIR$/tests/google_ai/test_transcription.py&quot;\" />\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"Flask server.Flask (app)\" />\n      <item itemvalue=\"Python tests.Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_multiple_images\" />\n      <item itemvalue=\"Python tests.Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_single_image\" />\n      <item itemvalue=\"Python tests.Python tests for test_transcription.TestTranscription.test_transcribe_dummy_serbian\" />\n      <item itemvalue=\"Python tests.Python tests in test_question_generator.py\" />\n      <item itemvalue=\"Python tests.Python tests in test_transcription.py\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python tests.Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_multiple_images\" />\n        <item itemvalue=\"Python tests.Python tests for test_question_generator.TestQuestionGenerator.test_generate_questions_single_image\" />\n        <item itemvalue=\"Python tests.Python tests in test_question_generator.py\" />\n        <item itemvalue=\"Python tests.Python tests for test_transcription.TestTranscription.test_transcribe_dummy_serbian\" />\n        <item itemvalue=\"Python tests.Python tests in test_transcription.py\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-d68999036c7f-b11f5e8da5ad-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.14475.56\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"3691bbee-cd8e-4e35-8ce0-88dd8c44b049\" name=\"Changes\" comment=\"\" />\n      <created>1719169808821</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1719169808821</updated>\n      <workItem from=\"1719169810018\" duration=\"6133000\" />\n      <workItem from=\"1719575605919\" duration=\"12626000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\n          <line>25</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/app/auth/routes.py</url>\n          <line>15</line>\n          <option name=\"timeStamp\" value=\"2\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/app/quiz/routes.py</url>\n          <option name=\"timeStamp\" value=\"3\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$create_structure.coverage\" NAME=\"create_structure Coverage Results\" MODIFIED=\"1719642799324\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$Flask__app_.coverage\" NAME=\"Flask (app) Coverage Results\" MODIFIED=\"1719665680290\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$Flask.coverage\" NAME=\"Flask (app) Coverage Results\" MODIFIED=\"1719178837235\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$export_structure.coverage\" NAME=\"export_structure Coverage Results\" MODIFIED=\"1719655513219\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/book_scan_quizz$.coverage\" NAME=\" Coverage Results\" MODIFIED=\"1719657392728\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/tests/google_ai\" />\n  </component>\n</project>"
    },
    {
      "path": ".idea/modules.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/experiment-mobileweb.iml\" filepath=\"$PROJECT_DIR$/.idea/experiment-mobileweb.iml\" />\n    </modules>\n  </component>\n</project>"
    },
    {
      "path": ".idea/misc.xml",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Black\">\n    <option name=\"sdkName\" value=\"Python 3.11 (experiment-mobileweb)\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11 (book-scan-quizz)\" project-jdk-type=\"Python SDK\" />\n</project>"
    },
    {
      "path": ".idea/inspectionProfiles/profiles_settings.xml",
      "content": "<component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>"
    }
  ]
}